__NUXT_JSONP__("/blog/series-opengl--opengl-2", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E){return {data:[{}],fetch:{"data-v-f027adea:0":{page:{slug:"opengl-2",description:q,title:"OpenGL入門から3DCGレンダラ実装まで その2",series:q,toc:[{id:m,depth:s,text:m},{id:n,depth:s,text:n},{id:o,depth:t,text:o},{id:p,depth:t,text:p}],body:{type:"root",children:[{type:b,tag:"h1",props:{id:"そもそもopenglとは"},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82opengl%E3%81%A8%E3%81%AF",tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:"そもそもOpenGLとは?"}]},{type:a,value:c},{type:b,tag:u,props:{id:m},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#%E6%A6%82%E8%A6%81",tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:m}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"OpenGLとは、Khronos Groupという団体が策定している2D\u002F3D グラフィックスライブラリの"},{type:b,tag:d,props:{},children:[{type:a,value:"オープン標準規格"}]},{type:a,value:"です。\nつまり、Khronos GroupはOpenGLという"},{type:b,tag:d,props:{},children:[{type:a,value:"ライブラリそのもの"}]},{type:a,value:"の実装は行なっておらず、どのような命令でどのような効果が得られるのかというAPIの策定と公開を行なっているということになります。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"通常、私達が利用することになるライブラリとしてのOpenGLは、GPUの各開発企業が自社のGPU向けに実装を行なったものとなります[^1]。\nOpenGLはオープン標準でありどの企業も自社のGPUで利用できるようにすることができます。しかし、世に存在するOpenGLを使いたいGPU全てで動く実装を1つの団体が公開するのは事実上不可能であるため、このような形になっていると思われます。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"OpenGL自体は、GPUなどのハードウェアやそれを制御するデバイスドライバに近い低レベルなAPIです[^2]。"}]},{type:a,value:c},{type:b,tag:u,props:{id:n},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3",tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:n}]},{type:a,value:c},{type:b,tag:v,props:{id:o},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#%E3%82%B3%E3%83%B3%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88",tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:o}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"OpenGLは、それ自体が巨大なステートマシンとなっています。内部的にOpenGLのステートを示す変数を持つ巨大なデータ構造を保持しており、このデータ構造のことをOpenGLではコンテキストと言います。OpenGLを用いたプログラミングでは、用意されたAPIを用いてOpenGLに命令を発行し、コンテキストを更新することで描画を制御することになります。\nコンテキストは同時に複数発行することが可能で、例えば同時にOpenGLを用いたウィンドウを複数起動する場合、ウィンドウごとに更新対象とするコンテキストをスイッチングすることでOpenGLを用いたGPUレンダリングを同時に行うことができます。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"言葉ではあまりしっくりこないかもしれませんが、この点は実際にOpenGLでプログラムを記述するとよくわかります[^3]。"}]},{type:a,value:c},{type:b,tag:v,props:{id:p},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#%E3%83%97%E3%83%AD%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%A8%E3%83%AC%E3%83%B3%E3%83%80%E3%83%AA%E3%83%B3%E3%82%B0%E3%83%91%E3%82%A4%E3%83%97%E3%83%A9%E3%82%A4%E3%83%B3",tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:a,value:p}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"OpenGLにおける"},{type:b,tag:d,props:{},children:[{type:a,value:"プロファイル"}]},{type:a,value:"とは、簡単に言うとコンテキストが保持する状態の種類やそれに対する制御を行うインターフェースの種類などによって区別されるAPIセットのことです。\n2019年現在のOpenGLには、"},{type:b,tag:d,props:{},children:[{type:a,value:"コアプロファイル(Core contexts)"},{type:b,tag:d,props:{},children:[{type:a,value:"と"}]},{type:a,value:r}]},{type:a,value:"の2つのプロファイルが存在します。これらのプロファイルはそれぞれ別の仕様として独立してOpenGLの各バージョンごとに策定されています。以下の画像はKhronos Groupページで公開されている仕様一覧の様子です。\n"},{type:b,tag:"img",props:{alt:"DeepinScreenshot_select-area_20191215065917.png",src:"https:\u002F\u002Fqiita-image-store.s3.ap-northeast-1.amazonaws.com\u002F0\u002F225893\u002F2d404c14-f0dc-3d43-52a0-052ffc5002ba.png"},children:[]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"同一のバージョンに対して複数のAPIが用意されているのは一見不思議ですが、これにはOpenGLの歴史的経緯が関係しています。OpenGLはバージョン3.0以上と未満で大きく思想が異なっており、そこにAPI的な互換性はありません。つまり、OpenGL 2.xのころのコードをOpenGL 3.xや4.x環境で普通に動かそうとしても、APIが変化しているためビルドできないということです。[^4]\nそして、各バージョンが提供しているメインの最新API仕様、これがコア仕様であり、"},{type:b,tag:d,props:{},children:[{type:a,value:w}]},{type:a,value:"であるということになります。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"しかし、高バージョンのOpenGLが提供する機能を、OpenGL 2.x以前のAPI仕様に則ったコードから利用したい、3.x以上への対応のためにコードを書き換えたくないという需要も存在します。そのようなケースのために今現在も用意されているのが各バージョンの"},{type:b,tag:d,props:{},children:[{type:a,value:r}]},{type:a,value:"であるということのようです。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"コアプロファイルと互換プロファイルの主な違いとして、主要な"},{type:b,tag:d,props:{},children:[{type:a,value:x}]},{type:a,value:"の違いがあります。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:d,props:{},children:[{type:a,value:x}]},{type:a,value:"とは頂点データやテクスチャデータなどの元データから、実際に画面に描画する2次元の画像データを生成するまでの過程のことです。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:d,props:{},children:[{type:a,value:w}]},{type:a,value:"で採用されているレンダリングパイプラインは**GLSL(OpenGL Shading Language)**と呼ばれるGPU上で実行される専用のプログラミング言語(シェーダー言語)を用いたもので、このようなプログラマによって設計・記述が可能なシェーダー言語を用いたレンダリングパイプラインは「"},{type:b,tag:d,props:{},children:[{type:a,value:"プログラマブルシェーダ"}]},{type:a,value:"を用いたレンダリングパイプライン」であると言われます。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"一方、"},{type:b,tag:d,props:{},children:[{type:a,value:r}]},{type:a,value:"で利用できるレンダリングパイプラインは**固定機能パイプライン(Fixed function pipeline)**であると言われます。\nそれぞれのパイプラインの特徴を以下に示します。"}]},{type:a,value:c},{type:b,tag:y,props:{id:z},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#%E5%9B%BA%E5%AE%9A%E6%A9%9F%E8%83%BD%E3%83%91%E3%82%A4%E3%83%97%E3%83%A9%E3%82%A4%E3%83%B3",tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:b,tag:d,props:{},children:[{type:a,value:z}]}]},{type:a,value:c},{type:b,tag:A,props:{},children:[{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:"単純な命令ですぐに描画を行うことができる。OpenGLにおけるHello World的なところに到達するまでのコストは低く、はじめやすい。"}]},{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:"多くの部分がプログラマブルシェーダーを用いる場合と比較して抽象化されOpenGL内部に隠されている。プログラマが細かい制御をいじることが出来ない。"}]},{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:"OpenGLが実際に内部で何をやっているのかわかりにくく、パフォーマンスチューニング可能な範囲や柔軟性などに限界がある。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:y,props:{id:B},children:[{type:b,tag:f,props:{ariaHidden:g,href:"#%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%83%96%E3%83%AB%E3%82%B7%E3%82%A7%E3%83%BC%E3%83%80%E3%83%BC",tabIndex:h},children:[{type:b,tag:i,props:{className:[j,k]},children:[]}]},{type:b,tag:d,props:{},children:[{type:a,value:B}]}]},{type:a,value:c},{type:b,tag:A,props:{},children:[{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:"Hello Worldまでの学習コストが固定機能パイプラインと比較して高い。少し描画を行うだけでもGLSLと呼ばれるシェーダー言語を記述する必要がある。"}]},{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:"抽象度が固定機能パイプラインと比較して低く、細かい命令をプログラマがOpenGLに与えなければならない。"}]},{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:"シェーダーを用いると固定機能パイプラインでは殆ど固定されていたGPU内部でのレンダリングパイプラインの処理をプログラマが設計し記述することができる。[^5]"}]},{type:a,value:c},{type:b,tag:l,props:{},children:[{type:a,value:"非常に柔軟性が高く表現の幅が広い。また、適切に記述すれば効率的な処理を作ることができる。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"プログラマブルシェーダーを用いたコアプロファイルのレンダリングパイプラインは学習コストが若干高いですが、現在推奨される方法であり、実際にGPUを用いたレンダリングで何をやっているのかの概要を理解するにもうってつけのものになっているため、今回の記事シリーズではコアプロファイルを採用してやっていきます。[^6]"}]}]},dir:"\u002Farticles\u002Fseries-opengl",path:C,extension:".md",createdAt:D,updatedAt:D},displayDateString:"2021.09.23",dateString:"2021-09-23T00:24:33+09:00",publishStatus:"公開",pagePath:C,series:q},"data-v-be034c16:0":{prevTitle:"OpenGL入門から3DCGレンダラ実装まで その1",nextTitle:"OpenGL入門から3DCGレンダラ実装まで その4",existPrev:E,existNext:E,prevSlug:"\u002Fblog\u002Fseries-opengl--opengl-1",nextSlug:"\u002Fblog\u002Fseries-opengl--opengl-4"}},mutations:void 0}}("text","element","\n","strong","p","a","true",-1,"span","icon","icon-link","li","概要","アーキテクチャ","コンテキスト","プロファイルとレンダリングパイプライン","OpenGL入門から3DCGレンダラ実装まで","互換プロファイル",2,3,"h2","h3","コアプロファイル","レンダリングパイプライン","h4","固定機能パイプライン","ul","プログラマブルシェーダー","\u002Farticles\u002Fseries-opengl\u002Fopengl-2","2021-09-22T15:24:33.000Z",true)));