__NUXT_JSONP__("/blog/unrealengine--a-little-harder-introduction-to-blueprint", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP,aQ,aR,aS,aT,aU,aV,aW,aX,aY,aZ,a_,a$,ba,bb,bc,bd,be,bf,bg,bh,bi,bj,bk,bl,bm,bn,bo,bp,bq,br,bs,bt,bu,bv,bw,bx,by,bz,bA,bB,bC,bD,bE,bF,bG,bH,bI,bJ,bK,bL,bM,bN,bO,bP,bQ,bR,bS,bT,bU,bV,bW,bX,bY,bZ,b_,b$,ca,cb,cc,cd,ce,cf,cg,ch,ci,cj,ck,cl,cm,cn,co,cp,cq,cr,cs,ct,cu,cv,cw,cx,cy,cz,cA,cB,cC,cD,cE,cF,cG,cH,cI,cJ,cK,cL,cM,cN,cO,cP,cQ,cR,cS,cT){return {data:[{page:{slug:"a-little-harder-introduction-to-blueprint",description:"Blueprint に本当に入門するために、Blueprint の実行モデルや実装について説明する記事",title:"すこし厳しい Blueprint 入門",enforceCreatedAt:bg,enforceUpdatedAt:bg,tags:["Unreal Engine","Unreal C++","Blueprint","Advent Calendar"],assets:"\u002Farticle-assets\u002Funrealengine\u002Fa-little-harder-introduction-to-blueprint",advent_calendar:{name:"Unreal Engine (UE) Advent Calendar 2022",link:"https:\u002F\u002Fqiita.com\u002Fadvent-calendar\u002F2022\u002Fue",day:18},toc:[{id:af,depth:y,text:af},{id:ag,depth:y,text:ag},{id:ah,depth:y,text:ah},{id:bh,depth:y,text:at},{id:Y,depth:y,text:Y},{id:bi,depth:y,text:aA},{id:bj,depth:y,text:au},{id:ai,depth:y,text:ai},{id:aj,depth:y,text:aj},{id:bk,depth:y,text:av},{id:bl,depth:y,text:aB},{id:ak,depth:y,text:ak},{id:bm,depth:y,text:t},{id:bn,depth:Z,text:aC},{id:bo,depth:Z,text:aD},{id:bp,depth:y,text:aE},{id:bq,depth:Z,text:aF},{id:br,depth:Z,text:aG},{id:bs,depth:y,text:w},{id:al,depth:Z,text:al},{id:am,depth:Z,text:am},{id:bt,depth:y,text:aH},{id:bu,depth:y,text:aI},{id:bv,depth:y,text:aJ}],body:{type:"root",children:[{type:b,tag:J,props:{id:"introduction"},children:[{type:b,tag:m,props:{href:"#introduction",ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:"Introduction"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"Unreal Engine ユーザーたるもの、Blueprint は日々活用されていることでしょう。そういった皆々様方は、かつてBlueprint に入門されたことかと思いますが、Blueprint\nの裏側を覗きに行く機会はあまりないかもしれません。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"Unreal Engine に搭載されたスクリプティング言語としての Blueprint が、はたしてどのような形で記述され、誰によって実行され、どうやって C++ と連携しているのか？\nそんな裏側について掘り下げ、「Blueprint に入門」してみるのが本記事です。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"使えなさそうで、意外と実用できる場面もある知識だったりしますので、興味のある方はぜひ読んでみてください。「そんなこととっくに知ってるぜ」というパワー系の皆さんは、本記事の粗を探してつついてくれると大変助かります。"}]},{type:a,value:c},{type:b,tag:J,props:{id:bw},children:[{type:b,tag:m,props:{href:"#%E7%9B%AE%E6%AC%A1",ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:bw}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:m,props:{href:bx},children:[{type:a,value:aK}]}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:b,tag:m,props:{href:by},children:[{type:a,value:af}]}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:b,tag:m,props:{href:bz},children:[{type:a,value:ag}]}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:b,tag:m,props:{href:bA},children:[{type:a,value:ah}]}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:m,props:{href:bB},children:[{type:a,value:bC}]}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:b,tag:m,props:{href:bD},children:[{type:a,value:at}]}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:b,tag:m,props:{href:bE},children:[{type:a,value:Y}]}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:b,tag:m,props:{href:bF},children:[{type:a,value:aA}]}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:b,tag:m,props:{href:bG},children:[{type:a,value:au}]}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:m,props:{href:bH},children:[{type:a,value:bI}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:m,props:{href:bJ},children:[{type:a,value:bK}]}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:b,tag:m,props:{href:bL},children:[{type:a,value:ai}]}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:b,tag:m,props:{href:bM},children:[{type:a,value:aj}]}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:b,tag:m,props:{href:aL},children:[{type:a,value:av}]}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:b,tag:m,props:{href:bN},children:[{type:a,value:aB}]}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:m,props:{href:bO},children:[{type:a,value:bP}]}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:m,props:{href:bQ},children:[{type:a,value:ak}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:m,props:{href:bR},children:[{type:a,value:t}]}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:b,tag:m,props:{href:bS},children:[{type:a,value:aC}]}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:b,tag:m,props:{href:aM},children:[{type:a,value:aD}]}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:m,props:{href:bT},children:[{type:a,value:aE}]}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:b,tag:m,props:{href:bU},children:[{type:a,value:aF}]}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:b,tag:m,props:{href:bV},children:[{type:a,value:aG}]}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:m,props:{href:bW},children:[{type:a,value:w}]}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:b,tag:m,props:{href:bX},children:[{type:a,value:al}]}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:b,tag:m,props:{href:bY},children:[{type:a,value:am}]}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:m,props:{href:bZ},children:[{type:a,value:aH}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:m,props:{href:b_},children:[{type:a,value:aI}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:m,props:{href:b$},children:[{type:a,value:aJ}]}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:m,props:{href:ca},children:[{type:a,value:cb}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:m,props:{href:cc},children:[{type:a,value:aN}]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:m,props:{href:cd},children:[{type:a,value:aO}]}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:J,props:{id:aK},children:[{type:b,tag:m,props:{href:bx,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:aK}]},{type:a,value:c},{type:b,tag:z,props:{id:af},children:[{type:b,tag:m,props:{href:by,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:af}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"UE 5.1"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"UHT は C# 実装版を利用"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:z,props:{id:ag},children:[{type:b,tag:m,props:{href:bz,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:ag}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"C++ がある程度読める"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"Unreal のリフレクションに関する知識 (FPropertyがわかればよい) がある"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"原理に興味がある"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:z,props:{id:ah},children:[{type:b,tag:m,props:{href:bA,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:ah}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"本記事での範疇は、Blueprint コードの内部表現、Blueprint 実行システムの構造などに焦点を当てます。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"Blueprint Graph 画面の描画や、ノードの定義方法などについてはあまり詳しく掘り下げません。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"また、本記事はエンジンのソースを読むことで得られた情報に基づいており、用語などは極力ソースに準拠するようにしていますが、説明のための記事上の用語が存在することがあります。Unreal\nEngine 以外の一般論については通常の用語を使用しています。"}]},{type:a,value:c},{type:b,tag:J,props:{id:"プログラミング言語としての-blueprint"},children:[{type:b,tag:m,props:{href:bB,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:bC}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"まず、Blueprint の実行システムについて、大まかな構造を理解しましょう。Blueprint をひとつのプログラミング言語としてみたとき、以下のような特徴を持つと言えるでしょう。"}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:at}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"スクリプト言語"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"ノードベース・ビジュアルプログラミング言語"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:Y}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"C++ との相互運用性"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"オブジェクト指向言語"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"明示的な型付け"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:au}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"型などについては "},{type:b,tag:m,props:{href:"https:\u002F\u002Fja.wikipedia.org\u002Fwiki\u002F%E5%9E%8B%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0",rel:[L,M,N],target:O},children:[{type:a,value:"Wikipedia"}]},{type:a,value:"\nに説明を任せるとして、この後のために説明しておきたい事項について触れておきます。"}]},{type:a,value:c},{type:b,tag:z,props:{id:bh},children:[{type:b,tag:m,props:{href:bD,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:at}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"Blueprint は汎用言語ではなく、特定のタスクに特化した"},{type:b,tag:m,props:{href:"https:\u002F\u002Fja.wikipedia.org\u002Fwiki\u002F%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E5%9B%BA%E6%9C%89%E8%A8%80%E8%AA%9E",rel:[L,M,N],target:O},children:[{type:a,value:"ドメイン固有言語"}]},{type:a,value:"です。このことは、Blueprint の設計にも大きく影響しています。詳しくは後述しますが、演算のような基本処理から、タスクスケジューリングのような高度な処理まで、Blueprint の実行基盤は全面的に Unreal Engine に依存しています。そのため、スタンドアロンな言語として切り離して利用するのはなかなか難しい作りになっていますが、よく言えば Unreal Engine と深く統合されていると言えます。切り離す必要もないですしね。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"ところで、Wikipedia のドメイン固有言語のページを覗くと、Unreal Engine への言及があります。なんとそこで触れられているのは Blueprint ではなく Unreal Script なのですが……。加筆すべきか？"}]},{type:a,value:c},{type:b,tag:z,props:{id:Y},children:[{type:b,tag:m,props:{href:bE,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:Y}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"Blueprint がネイティブコンパイル言語ではないというのは、最終的に Blueprint で記述された処理が実行される際に、機械語となって各プラットフォームの CPU で直接実行されない(\nできない)ということです。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"これはスクリプト言語では珍しいことではありません。独自の処理系をソフトウェアとして実装し、その処理系に向けたコードを与えれば、CPU\nで実行される機械語でなくともソフトウェア上で「実行する」ことは可能です。処理系がコードを解釈して、示される意味のとおりに、実際のCPUやOSを制御するように実装されていれば良いからです。\nBlueprint はこのタイプの言語であり、Unreal Engine の上に実装されたソフトウェアの処理系によって解釈・実行されます。こういったコードを解釈・実行するようなソフトウェアのことをVMと呼ぶこともあります。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"一方で、Blueprint はコンパイルもされる言語です。このことは上記の内容と矛盾しません。Blueprint はコンパイルされると、 "},{type:b,tag:_,props:{},children:[{type:a,value:"Blueprint bytecode"}]},{type:a,value:"\nというバイト列形式の中間表現を吐き出します。上記で述べた処理系が直接扱うのは、この bytecode のほうであり、ノードによる表現は直接扱えないのです。なお、詳細は後述しますが、Blueprint\nbytecode を実行する処理系を "},{type:b,tag:_,props:{},children:[{type:a,value:aP}]},{type:a,value:" と言います。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"このような仕組みを取っているのは、主に実行時コストを落とすためだと思われます。ノードによる表現が作成する、接続関係によるネットワーク表現は人間にとっては直感的ですが、そのまま実行するには向きませんし、扱うデータが大きくなります。そのため、より実行時に処理しやすく軽量な中間表現として\nbytecode を事前に生成しておき、実行時には bytecode のみを処理するという形式を取っているのでしょう。"}]},{type:a,value:c},{type:b,tag:v,props:{className:[R]},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:H,props:{alt:A,src:"\u002Farticle-assets\u002Funrealengine\u002Fa-little-harder-introduction-to-blueprint\u002F\u002Fblueprint-pipeline.png"},children:[]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"なお、他に bytecodeのような中間表現が用いられることのメリットは、中間表現を生成するコンパイラに選択肢を持たせることができることなどがあります。中間表現の仕様さえ満たしていれば、それを生成しているのがどんなコンパイラでも、中間表現を手書きできる謎の人間でも構わないわけです。このあたりの特性を利用している言語の例としては、.NET言語(\nC#, F#, ....)や"},{type:b,tag:m,props:{href:"https:\u002F\u002Fja.wikipedia.org\u002Fwiki\u002FJava%E4%BB%AE%E6%83%B3%E3%83%9E%E3%82%B7%E3%83%B3",rel:[L,M,N],target:O},children:[{type:a,value:"JVM"}]},{type:a,value:"言語(Java, Scala,\nKotlin, ....)の実行系、あるいはコンパイラ基盤であるLLVMのLLVM-IR などに例があります。\nBlueprint も、Blueprint VM バイトコードを吐き出す別言語のコンパイラというものを作成するのは不可能ではないはずです。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"また、過去には Blueprint のコンパイルバックエンドに、C++のコードを吐き出す実装(ネイティブ化)\nが存在しました。"},{type:b,tag:m,props:{href:"https:\u002F\u002Fdocs.unrealengine.com\u002F5.1\u002Fja\u002Fcompiler-overview-for-blueprints-visual-scripting-in-unreal-engine\u002F",rel:[L,M,N],target:O},children:[{type:a,value:"こちらの公式ドキュメント"}]},{type:a,value:"\nを参照すると、5.1現在も "},{type:b,tag:h,props:{},children:[{type:a,value:"FKismetCppBackend"}]},{type:a,value:" がデバッグ用に存在していることになっていますが、これは誤りであり、コード上からは完全に削除されているため、現在ではあらゆる Blueprint\nは bytecode として実行されます。"}]},{type:a,value:c},{type:b,tag:z,props:{id:bi},children:[{type:b,tag:m,props:{href:bF,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:aA}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"C++との相互運用性は、Blueprint の極めて強力な特徴です。Unreal Engine が独自のスクリプト言語を持っていることの大きなメリットとも言えるでしょう。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"通常、複数言語の混在した開発において、言語間のデータの受け渡しや関数の呼び出しは大きな課題であり、そのためのレイヤや相互運用のためのライブラリがプロジェクトに導入されることも珍しくありません。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"しかし、Blueprint ははじめから Unreal Engine で使われることを想定して設計され、独自のビルドシステムや C++ 側の実装の存在を前提として実装されているので、ほとんど意識せずに\nC++ との相互運用が可能となっています。"}]},{type:a,value:c},{type:b,tag:v,props:{className:[R]},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:H,props:{alt:A,src:"\u002Farticle-assets\u002Funrealengine\u002Fa-little-harder-introduction-to-blueprint\u002F\u002Finteroperability.png"},children:[]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"このことは Blueprint の言語設計にも影響を与えているはずです。たとえば、Blueprint はかなり強くオブジェクト指向を意識した言語です。C++で定義されたクラスや、作成されたオブジェクトの階層的な構造をそのまま持ち込もうとすると、必然的にそうなるのでしょう。もちろん、ゲーム開発においてオブジェクト指向が大きな実績を持っているということもあるとは思います。"}]},{type:a,value:c},{type:b,tag:z,props:{id:bj},children:[{type:b,tag:m,props:{href:bG,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:au}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"これについてはあまり詳しく触れません。Blueprint は静的型付け言語ですが、型安全性は保証されていません。\nたとえば、ピンの型にWildcard(何でも入れられる)などを利用した場合、実行時に型の不一致でエラーが発生することがあります。\n一方で、基本的に型を意識して扱うことができ、これもやはりC++との相互運用性を考えたスクリプティング言語としての経緯が見えるところです(そうじゃなくても型ほしいですけど)。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"まあただ、Blueprint には UObject という "},{type:b,tag:_,props:{},children:[{type:a,value:"†最強の基本クラス†"}]},{type:a,value:" がいるので、なんとも言えませんが。"}]},{type:a,value:c},{type:b,tag:J,props:{id:"blueprint-の歴史的背景と-unrealkismet"},children:[{type:b,tag:m,props:{href:bH,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:bI}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"Blueprint に関するコードを読んでいくと、"},{type:b,tag:h,props:{},children:[{type:a,value:"Kismet"}]},{type:a,value:" という語がよく登場しますので、軽く紹介しておきます。\nBlueprint は、Unreal Engine 4から搭載された機能でした。しかし、Unreal Engine におけるノードベースのビジュアルスクリプティング言語の歴史は Unreal Engine 4 からではありません。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"Blueprint の系譜は Unreal Engine 3 から始まっています。残念ながら私は実際に触ったことはないのですが(当時10歳)、Unreal Engine 3 にも、 "},{type:b,tag:_,props:{},children:[{type:a,value:"UnrealKismet"}]},{type:a,value:" というビジュアルスクリプティング言語が存在しました。\nそして、Unreal Engine 4 の機能として公開された Blueprint 実装のコードベースは、この Kismet の多くを引き継いだものなのです。この継承の歴史は Unreal Engine 5 になっても途絶えておらず、エンジン内の Blueprint に関連するコードの髄所に Kismet という語が認められます。また、 "},{type:b,tag:h,props:{},children:[{type:a,value:"K2Node"}]},{type:a,value:an},{type:b,tag:h,props:{},children:[{type:a,value:"K2"}]},{type:a,value:" なども、 "},{type:b,tag:h,props:{},children:[{type:a,value:"Kismet 2"}]},{type:a,value:" の略であると思います。"}]},{type:a,value:c},{type:b,tag:J,props:{id:"blueprint-vm-概要"},children:[{type:b,tag:m,props:{href:bJ,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:bK}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"さて、Blueprint の基本的な特徴を把握したところで、Blueprint が実際に実行されている実行系の構造を見ていきます。\nBlueprint の実行系とは、前述の Blueprint bytecode を読んで、それが意味するところの処理を実行してくれる実装のことです。このような解釈・実行系のことをVMと呼ぶこともあると言いましたが、Blueprint の該当する実装においてもコード上で "},{type:b,tag:_,props:{},children:[{type:a,value:aP}]},{type:a,value:" と書かれることがあり、端的でわかりやすいので、この用語を採用します。"}]},{type:a,value:c},{type:b,tag:z,props:{id:ai},children:[{type:b,tag:m,props:{href:bL,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:ai}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:_,props:{},children:[{type:a,value:aP}]},{type:a,value:" の特徴をつかむために、どのような計算モデルを採用しているのか知ることにはメリットがあります。\nこの種の VM では"},{type:b,tag:m,props:{href:"https:\u002F\u002Fja.wikipedia.org\u002Fwiki\u002F%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E3%83%9E%E3%82%B7%E3%83%B3",rel:[L,M,N],target:O},children:[{type:a,value:"スタックマシン"}]},{type:a,value:"などの計算モデルが採用されることが多いと思いますが、Blueprint がドメイン固有言語であり、C++と協調して動く、ゲームエンジン内の VM であるという特徴が、計算モデルにも影響を与えているように思われます。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"というのも、Blueprint VM はスタックマシンともレジスタマシンとも断定し難い、双方の特徴を持った独自の構造をしているように(僕の目には)見えます。\nこのような構造になっているのには、Blueprint VM はデータがその内部に完結する必要がないという点の影響が大きいのではないかと個人的には思っています。この種の VM を汎用的な実行基盤として構築するのならば、そこで扱う全てのデータはVMが管理するレジスタなりメモリ上なりに収められ、規定のデータ構造や操作による管理で完結していなければなりません。\nしかし、Blueprint VM はC++が隣に存在することが前提の仮想機械であり、Blueprint VM が管理しないC++上に確保されているC++変数の値などに大きく依存しています。C++ はすでに完全な機能を備えた言語処理系を持つ言語ですので、Blueprint VM は単体で完全な機能を備える必要がないわけです。すると当然、独立した通常の VM 実装とは異なる点が出てくるということでしょう。"}]},{type:a,value:c},{type:b,tag:z,props:{id:aj},children:[{type:b,tag:m,props:{href:bM,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:aj}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"汎用 VM はそれだけであらゆる処理が実行できる(チューリング完全になる)ように構築されるので、(命令セットの設計思想によりますが)四則演算や論理演算などの基本的な命令を含む完結した命令セットを持ちます。これと比較すると、Blueprint VM の設計は非常に特殊です。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"たとえば、Blueprint VM は演算命令を一つも持ちません。「加算がしたければ加算処理を行う C++ 関数を呼び出せばよい」というような設計思想で作られているように思われます。実際、Blueprintにおける "},{type:b,tag:h,props:{},children:[{type:a,value:"int32"}]},{type:a,value:" 同士の加算は、以下のように "},{type:b,tag:h,props:{},children:[{type:a,value:ce}]},{type:a,value:" マクロで作成された C++ 関数で処理されます。"}]},{type:a,value:c},{type:b,tag:v,props:{className:[T]},children:[{type:b,tag:v,props:{className:[U]},children:[{type:a,value:"int32同士の加算"}]},{type:b,tag:D,props:{},children:[{type:b,tag:h,props:{className:[B]},children:[{type:a,value:"\u002F** Addition (A + B) *\u002F\nUFUNCTION(BlueprintPure, meta=(DisplayName = \"int + int\", CompactNodeTitle = \"+\", Keywords = \"+ add plus\", CommutativeAssociativeBinaryOperator = \"true\"), Category=\"Math|Integer\")\nstatic int32 Add_IntInt(int32 A, int32 B = 1);\n\nKISMET_MATH_FORCEINLINE int32 UKismetMathLibrary::Add_IntInt(int32 A, int32 B)\n{\n\treturn A + B;\n}"}]}]}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"また、いかなるメモリ管理も行いません。メモリ管理は Unreal Engine の GC に依存しています。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"代わりに、C++ との連携のための命令は豊富に持っています。たとえば、たった今見たような C++ で実装された関数は、 "},{type:b,tag:h,props:{},children:[{type:a,value:"EX_CallMath [0x67]"}]},{type:a,value:" という命令によって呼び出すことができます。この命令は、ネイティブ関数として実装された "},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" も呼び出すことができる命令です。"},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" からネイティブ関数ポインタを取得し、引数や呼び出しコンテキストなどのデータと、戻り値を格納すべきアドレスをディスパッチした上で呼び出しを実行します。"}]},{type:a,value:c},{type:b,tag:z,props:{id:bk},children:[{type:b,tag:m,props:{href:aL,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:av}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"ここで、Blueprint VM に搭載されている命令の一覧を提示しておきます。\n使われ方がわからないとピンとこないと思いますが、後の内容を読みつつ、必要に応じて参照する形で利用してください。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"かなり大きなテーブルになったので、折りたたんであります。"}]},{type:a,value:c},{type:b,tag:"details",props:{},children:[{type:a,value:c},{type:b,tag:"summary",props:{},children:[{type:b,tag:"b",props:{},children:[{type:a,value:"Blueprint VM 命令セット"}]}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"(一部編集中。ソースコードのコメントを元に翻訳したり、ソースを呼んで解説を追記する形で作成していますが、間に合わなくて空欄だったりコメント原文のままの箇所があります。)"}]},{type:a,value:c},{type:b,tag:"style",props:{type:"text\u002Fcss"},children:[{type:a,value:"\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{border-color:black;border-style:none;border-width:1px;font-size:14px;\n  overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg th{border-color:black;border-style:none;border-width:1px;font-size:14px;\n  font-weight:normal;overflow:hidden;padding:10px 5px;word-break:normal;}\n.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}\n"}]},{type:a,value:c},{type:b,tag:"table",props:{className:["tg"],style:"table-layout: fixed;"},children:[{type:a,value:c},{type:b,tag:"colgroup",props:{},children:[{type:a,value:c},{type:b,tag:aQ,props:{style:"inline-size: 12em"},children:[]},{type:a,value:c},{type:b,tag:aQ,props:{style:"inline-size: 4em"},children:[]},{type:a,value:c},{type:b,tag:aQ,props:{style:A},children:[]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:"thead",props:{},children:[{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:aR,props:{className:[e]},children:[{type:a,value:"命令名"}]},{type:a,value:d},{type:b,tag:aR,props:{className:[e]},children:[{type:a,value:"バイトコード"}]},{type:a,value:d},{type:b,tag:aR,props:{className:[e]},children:[{type:a,value:"説明"}]},{type:a,value:g}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:"tbody",props:{},children:[{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:aS}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x00"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"関数のローカル変数を取得。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_InstanceVariable"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x01"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"オブジェクト変数を取得。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_DefaultVariable"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x02"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"コンテキストのオブジェクトのCDOを取得。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:cf}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x04"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"関数から戻る。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:aT}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x06"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"ローカルアドレスに基づいて指定されたコード上の場所に Jump する。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:ao}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x07"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"式が false だったならば、ローカルアドレスに基づいて Jump する。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_Assert"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x09"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"アサートを発行。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:cg}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x0B"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"何もしない"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_Let"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x0F"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"FProperty を利用して、任意サイズの値の代入処理を行う。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_ClassContext"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x12"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"CDO を利用して、指定した UClass の CDO をコンテキストとして処理を実行する。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_MetaCast"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x13"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"UClass 間のメタキャスト命令。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_LetBool"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x14"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"真偽値の代入命令。Bool 値変数は Bitfield にパックして保持されるため、専用の命令が用意されている。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_EndParmValue"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x15"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"関数の任意引数デフォルト値の終了を示すようだが、5.1現在利用されているようには見えない。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_EndFunctionParms"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x16"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"関数の呼び出し引数定義の終了。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_Self"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x17"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"Self オブジェクトを取得。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_Skip"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x18"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"スキップ可能な式を表すようだが、5.1現在利用されているようには見えない。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_Context"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x19"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"式を評価して作成した UObject のコンテキストで後続の処理を実行する。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_Context_FailSilent"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x1A"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_Context と同様だが、作成した UObject が無効値だった場合に例外をスローしない。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_VirtualFunction"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x1B"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"仮想関数を引数付きで呼び出す。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_FinalFunction"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x1C"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"完全に実装された通常の関数を引数付きで呼び出す。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_IntConst"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x1D"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"int32 を実行スタックから読み出す。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_FloatConst"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x1E"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"float を実行スタックから読み出す。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_StringConst"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x1F"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"FString を実行スタックから読み出す。読み込む実行スタック上の文字列は、ヌル終端する ANSI char として扱われる。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_ObjectConst"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x20"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"UObject を実行スタックから読み出す。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_NameConst"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x21"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"FName を実行スタックから読み出す。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_RotationConst"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x22"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"FRotation を実行スタックから読み出す。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_VectorConst"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x23"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"FVector を実行スタックから読み出す。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_ByteConst"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x24"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"実行スタックを 1 byte 読み出す。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_IntZero"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x25"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"int32 の定数 0 を結果に書き込む。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_IntOne"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x26"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"int32 の定数 1 を結果に書き込む。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_True"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x27"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"bool の定数 true を結果に書き込む。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_False"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x28"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"bool の定数 false を結果に書き込む。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_TextConst"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x29"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"FText を実行スタックから読み出す。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_NoObject"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x2A"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"UObject* の定数 nullptr を結果に書き込む。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_TransformConst"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x2B"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"FTransform を実行スタックから読み出す。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_IntConstByte"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x2C"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"実行スタックの 1 byte の値を読み出し、int32 で取得する。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_NoInterface"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x2D"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"オブジェクトを保持していない TScriptInterface を結果に書き込む。"},{type:b,tag:h,props:{},children:[{type:a,value:".SetObject(nullptr);"}]},{type:a,value:" を呼び出した状態。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_DynamicCast"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x2E"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"UObjectの dynamic cast を実行する。スタック上から `UClass` オブジェクトを読み出し、そのクラスに続く命令で評価される `UObject` がキャスト可能か(継承関係のチェック)を行う。キャスト可能であれば、有効な値を返し、キャスト不能であれば無効値を返す。この命令内では UObject 型しか扱っておらず、C++的な dynamic cast は行っていない。UClass の保持するリフレクション情報を元に、キャスト可能かどうかに基づいて、有効ならば評価された UObject を返すが、無効ならば返さないという処理である。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:aU}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x2F"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"UScriptStruct を実行スタックから読み出す。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_EndStructConst"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x30"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:b,tag:h,props:{},children:[{type:a,value:aU}]},{type:a,value:" に対応して利用され、実行スタック上で "},{type:b,tag:h,props:{},children:[{type:a,value:aU}]},{type:a,value:" のデータの終了を示す。ただし、UScriptStruct から存在すべきプロパティは判明するため、実行時にはこれは利用されておらず、シリアライズなどのエディタ処理で利用されている。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:ch}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x31"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"渡された TArray へのセットを開始する。実行スタックから評価された Array プロパティとオブジェクトアドレス、続いて "},{type:b,tag:h,props:{},children:[{type:a,value:ci}]},{type:a,value:" が現れるまで要素の値を読み取り順次 Array に追加する。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:ci}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x32"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:b,tag:h,props:{},children:[{type:a,value:ch}]},{type:a,value:" に対応して利用され、TArray のセットの終了を示す。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_PropertyConst"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x33"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"FProperty を実行スタックから読み出す。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_UnicodeStringConst"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x34"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"FString を実行スタックから読み出す。読み込む実行スタック上の文字列は、ヌル終端する UTF-16 バイト列として扱われる。サロゲートペアを考慮して読み込まれる。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_Int64Const"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x35"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"int64 を実行スタックから読み出す。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_UInt64Const"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x36"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"uint64 を実行スタックから読み出す。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_DoubleConst"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x37"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"double を実行スタックから読み出す。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_Cast"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x38"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"スタックからキャストコード(キャストする型の組み合わせと方向)を読み取り、そのコードに紐付けられたネイティブ関数を呼び出し、処理を引き継ぐ。呼び出されたネイティブ関数の中では、後続のスタック上のバイトを特定の型と見做して変換処理を実行する。この命令はBlueprint 実行処理の内部でキャストの必要が発生した際に利用されているようで、普段Blueprintを記述するときに直接利用することはない。たとえば、EX_Castには FloatToDouble の処理を行う関数があるが、Blueprint Graph 上で配置する Float to Cast のキャストノードは通常のC++関数であり、関連はない。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:cj}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x39"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"渡された TSet へのセットを開始する。実行スタックから評価された Set プロパティとオブジェクトアドレス、要素数を読み取り、続いて "},{type:b,tag:h,props:{},children:[{type:a,value:aw}]},{type:a,value:" が現れるまで要素の値を読み取り順次 Set に追加する。要素数が 0 であれば空の Set の作成のみが行われ、値の読み取りなしに実行スタックに "},{type:b,tag:h,props:{},children:[{type:a,value:aw}]},{type:a,value:" が現れなければならない。ただし、実装的には要素数は 1 以上かそれ未満かしか見ておらず、続く要素数ではなく追加していく Set の初期 Slack サイズを示している。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:aw}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x3A"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:b,tag:h,props:{},children:[{type:a,value:cj}]},{type:a,value:" に対応して利用され、TSet のセットの終了を示す。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:ck}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x3B"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"渡された TMap へのセットを開始する。実行スタックから評価された Map プロパティとオブジェクトアドレス、要素数を読み取り、続いて "},{type:b,tag:h,props:{},children:[{type:a,value:cl}]},{type:a,value:" が現れるまで要素の値を読み取り順次 Map に追加する。 要素の値は K, V, K, V... の順で実行スタックに積まれている。要素数が 0 であれば空の Map の作成のみが行われ、値の読み取りなしに実行スタックに "},{type:b,tag:h,props:{},children:[{type:a,value:aw}]},{type:a,value:" が現れなければならない。ただし、実装的には要素数は 1 以上かそれ未満かしか見ておらず、続く要素数ではなく追加していく Map の初期 Slack サイズを示している。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:cl}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x3C"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:b,tag:h,props:{},children:[{type:a,value:ck}]},{type:a,value:" に対応して利用され、TMap のセットの終了を示す。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:cm}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x3D"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"TSet を実行スタックから読み出す。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_EndSetConst"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x3E"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:b,tag:h,props:{},children:[{type:a,value:cm}]},{type:a,value:cn}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:co}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x3F"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"TMap を実行スタックから読み出す。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_EndMapConst"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x40"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:b,tag:h,props:{},children:[{type:a,value:co}]},{type:a,value:cn}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_Vector3fConst"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x41"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"FVector3f を実行スタックから読み出す。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_StructMemberContext"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x42"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"スタック上の構造体メンバ Property と、続く命令で評価される構造体のオブジェクトを元に、Property が示すメンバのコンテキストを取得・設定する。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_LetMulticastDelegate"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x43"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"Assignment to a multi-cast delegate"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_LetDelegate"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x44"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"Assignment to a delegate"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_LocalVirtualFunction"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x45"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"Special instructions to quickly call a virtual function that we know is going to run only locally"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_LocalFinalFunction"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x46"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"Special instructions to quickly call a final function that we know is going to run only locally"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_LocalOutVariable"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x48"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"local out (pass by reference) function parameter"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_DeprecatedOp4A"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x4A"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_InstanceDelegate"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x4B"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"const reference to a delegate or normal function object"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_PushExecutionFlow"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x4C"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"push an address on to the execution flow stack for future execution when a EX_PopExecutionFlow is executed. Execution continues on normally and doesn't change to the pushed address."}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_PopExecutionFlow"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x4D"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"continue execution at the last address previously pushed onto the execution flow stack."}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_ComputedJump"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x4E"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"実行スタックの続く命令を評価して得られたオフセットを元にジャンプを行う。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_PopExecutionFlowIfNot"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x4F"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"continue execution at the last address previously pushed onto the execution flow stack, if the condition is not true."}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_Breakpoint"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x50"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"Breakpoint 命令。エディタ上のコンパイルでのみ存在し、それ以外では "},{type:b,tag:h,props:{},children:[{type:a,value:cg}]},{type:a,value:" のように振る舞う。"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_InterfaceContext"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x51"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"Call a function through a native interface variable"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_ObjToInterfaceCast"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x52"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"Converting an object reference to native interface variable"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_EndOfScript"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x53"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"Last byte in script code"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_CrossInterfaceCast"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x54"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"Converting an interface variable reference to native interface variable"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_InterfaceToObjCast"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x55"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"Converting an interface variable reference to an object"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_WireTracepoint"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x5A"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:cp}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_SkipOffsetConst"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x5B"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"A CodeSizeSkipOffset constant"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_AddMulticastDelegate"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x5C"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"Adds a delegate to a multicast delegate's targets"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_ClearMulticastDelegate"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x5D"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"Clears all delegates in a multicast target"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_Tracepoint"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x5E"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:cp}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_LetObj"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x5F"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"assign to any object ref pointer"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_LetWeakObjPtr"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x60"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"assign to a weak object pointer"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_BindDelegate"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x61"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"bind object and name to delegate"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_RemoveMulticastDelegate"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x62"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"Remove a delegate from a multicast delegate's targets"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_CallMulticastDelegate"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x63"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"Call multicast delegate"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_LetValueOnPersistentFrame"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x64"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_ArrayConst"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x65"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_EndArrayConst"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x66"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_SoftObjectConst"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x67"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_CallMath"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x68"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"static pure function from on local call space"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_SwitchValue"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x69"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_InstrumentationEvent"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x6A"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"Instrumentation event"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_ArrayGetByRef"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x6B"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_ClassSparseDataVariable"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x6C"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"Sparse data variable"}]},{type:a,value:g}]},{type:a,value:g},{type:b,tag:l,props:{},children:[{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"EX_FieldPathConst"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[{type:a,value:"0x6D"}]},{type:a,value:d},{type:b,tag:f,props:{className:[e]},children:[]},{type:a,value:g}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"ざっと見ても、C++ で定義された、かなり高級な型の値を実行スタックから読み出す命令や、同じく高級な型の代入命令などが多数存在します。また、特定の値を示すリテラルのように働き、固定の値を結果として書き込む命令も多いです。"}]},{type:a,value:c},{type:b,tag:z,props:{id:bl},children:[{type:b,tag:m,props:{href:bN,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:aB}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"繰り返し述べたように、Blueprint VM は独立した VM とは言いにくい実装になっています。それ自体が困難ですが、仮に C++ と Unreal Engine から Blueprint VM を引き剥がしてスタンドアロンで動かしたとすると、四則演算も比較もできなくなりますから、まともな処理を動かすことはできないでしょう。\n代わりに、C++ や Unreal Engine のシステムと深く結びついているため、Blueprint ではコンテンツ制作はもちろん、エディタに関するスクリプティングなどについても高い自由度を提供できているといえるかもしれません。"}]},{type:a,value:c},{type:b,tag:J,props:{id:"blueprint-vm-詳解"},children:[{type:b,tag:m,props:{href:bO,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:bP}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"そもそも、Blueprint の処理はどのように呼び出されるのでしょうか。UEngine は C++ のエントリポイントから起動しますから、Blueprint に処理を任せるために C++ と Blueprint を接続している仕組みがあるはずです。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"この章では、Blueprint が実行される大きな流れについての説明を行います。"}]},{type:a,value:c},{type:b,tag:z,props:{id:ak},children:[{type:b,tag:m,props:{href:bQ,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:ak}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"Unreal Engine 内部で Blueprint の処理が開始される場合、その多くは「Blueprint の関数を呼び出す」という操作に対応しています。\nこれはあらゆる処理において言えることです。Blueprint の Event についても、コンパイル時には関数に変換されており、C++ から呼び出されるときには直接的には関数として扱われています。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"たとえば、Event の代表格である "},{type:b,tag:h,props:{},children:[{type:a,value:"Tick"}]},{type:a,value:cq},{type:b,tag:h,props:{},children:[{type:a,value:"BeginPlay"}]},{type:a,value:" などは、コンパイル時に以下のような中間グラフ上の関数(Function stub)に変換されてからコンパイルされます。"}]},{type:a,value:c},{type:b,tag:v,props:{className:[R]},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:H,props:{alt:A,src:"\u002Farticle-assets\u002Funrealengine\u002Fa-little-harder-introduction-to-blueprint\u002F\u002Fevent-nodes.png"},children:[]}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:H,props:{alt:A,src:"\u002Farticle-assets\u002Funrealengine\u002Fa-little-harder-introduction-to-blueprint\u002F\u002Fevent-stub-tick.png"},children:[]}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:H,props:{alt:A,src:"\u002Farticle-assets\u002Funrealengine\u002Fa-little-harder-introduction-to-blueprint\u002F\u002Fevent-stub-beginplay.png"},children:[]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"また、Blueprint から C++ の処理を呼び出したいときもあります。このときにも、対応するのは C++ の関数を呼び出すという操作です。\nということで、Blueprint と C++ の連携を紐解く切り口として、相互に関数が呼び出される仕組みを見ていきましょう。"}]},{type:a,value:c},{type:b,tag:z,props:{id:bm},children:[{type:b,tag:m,props:{href:bR,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:t}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"Unreal Engine においての Blueprint \u002F C++ の相互関数呼び出しには、 UFunction というクラスが大きな役割を果たしています。\nUFunctionを一言で説明すると、「Blueprint か C++ の関数を表す関数オブジェクト」です。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"C++ の関数オブジェクトといえば、Unreal C++ なら "},{type:b,tag:h,props:{},children:[{type:a,value:"TFunction\u003C\u003E"}]},{type:a,value:"、STL なら "},{type:b,tag:h,props:{},children:[{type:a,value:"\u003Cfunction\u003E"}]},{type:a,value:an},{type:b,tag:h,props:{},children:[{type:a,value:"std::function\u003C\u003E"}]},{type:a,value:" などが思い浮かぶでしょう。これらは、C++ の関数様のオブジェクトを取り回すのに特化したクラスです。一方、"},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" は、Blueprint と C++ の双方で呼び出し可能な関数を表すクラスなのです。"}]},{type:a,value:c},{type:b,tag:$,props:{id:bn},children:[{type:b,tag:m,props:{href:bS,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:aC}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"とはいえ、C++ の関数と Blueprint の関数はコンパイル後の内部表現が全く異なりますから、完全に共通化したデータを保持しているわけではありません。以下は、"},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" のなかで関数呼び出しに関わるメンバを示した図です。"}]},{type:a,value:c},{type:b,tag:v,props:{className:[R]},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:H,props:{alt:A,src:"\u002Farticle-assets\u002Funrealengine\u002Fa-little-harder-introduction-to-blueprint\u002F\u002Fufunction-structure.png"},children:[]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:aV},{type:b,tag:h,props:{},children:[{type:a,value:cr}]},{type:a,value:" を継承した型であり、"},{type:b,tag:h,props:{},children:[{type:a,value:cr}]},{type:a,value:" のほうにも重要な情報が保持されています。\nこれらのパラメータのうち、C++ の関数と Blueprint の関数で使われ方が大きく異なるのは、 "},{type:b,tag:h,props:{},children:[{type:a,value:V}]},{type:a,value:" と "},{type:b,tag:h,props:{},children:[{type:a,value:"Script"}]},{type:a,value:" です。"}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"Func\n"},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"C++ の関数である時にのみ有効で、それ以外の場合には nullptr。"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"C++ の関数ポインタを保持する。"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"Script\n"},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"バイト列を保持する "},{type:b,tag:h,props:{},children:[{type:a,value:"TArray\u003Cuint8\u003E"}]},{type:a,value:" メンバ。"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"Blueprint の関数であるときにのみ長さが1以上となり、Blueprint バイトコードを保持する。"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" の呼び出し処理では、その "},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" が C++ 関数を表しているのか Blueprint 関数を表しているのかによって処理を分岐し、結果として共通した使用法で双方の関数を呼び出せるようにしているのです。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"上図に示したそれ以外のメンバの役割は以下です。こちらは Blueprint \u002F C++ 共通で利用されます。"}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"FunctionFlags\n"},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:b,tag:m,props:{href:"https:\u002F\u002Fdocs.unrealengine.com\u002F5.1\u002Fen-US\u002FAPI\u002FRuntime\u002FCoreUObject\u002FUObject\u002FEFunctionFlags\u002F",rel:[L,M,N],target:O},children:[{type:a,value:"EFunctionFlags"}]},{type:a,value:"で定義されたフラグをビットフィールドとして保持する。C++ 関数であるかを表す "},{type:b,tag:h,props:{},children:[{type:a,value:"FUNC_Native"}]},{type:a,value:" なども定義されており、関数の属性を判別するのに多用される。"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"NumParams\n"},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"関数の引数や戻り値などは、関数のパラメータとして扱われる。それらの総数を表す。"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"ParamsSize\n"},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"関数のパラメータが総計で占めることになるメモリ上のサイズを表す。関数呼び出しの際に、パラメータのために確保すべき領域を知るためなどに利用される。"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"ChildProperties\n"},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"FProperty のリンクリスト。"},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" の場合は、関数のパラメータのリフレクション情報を保持する。これにより、引数の具体的な型や、オブジェクト上での配置位置オフセットなどが判明し、パラメータの利用が可能となる。"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"このように、"},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" は Blueprint \u002F C++ の関数のシグニチャのための共通した表現を持ち、その処理の実体のみを個別に扱うことで、Blueprint \u002F C++ どちらからも呼び出し可能な関数を実現しているクラスなのです。"}]},{type:a,value:c},{type:b,tag:$,props:{id:bo},children:[{type:b,tag:m,props:{href:aM,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:aD}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" と聞いて、いつも Unreal C++ で書いている "},{type:b,tag:h,props:{},children:[{type:a,value:ap}]},{type:a,value:" マクロを付けたメンバ変数のことを連想したのに、なにか違うものの説明をされて戸惑っている人がいるかもしれません。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:m,props:{href:"https:\u002F\u002Fdocs.unrealengine.com\u002F5.1\u002Fja\u002Fufunctions-in-unreal-engine\u002F",rel:[L,M,N],target:O},children:[{type:a,value:"公式ドキュメント"}]},{type:a,value:"含め、「"},{type:b,tag:h,props:{},children:[{type:a,value:ce}]},{type:a,value:" をつけると "},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" になる」と説明されることがありますが、厳密に言うと、"},{type:b,tag:h,props:{},children:[{type:a,value:ap}]},{type:a,value:" マクロを付けた関数自体が "},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" になるわけではありません。中身が書き換わるわけでもありませんし、実装はそのまま利用されます。しかし、 "},{type:b,tag:h,props:{},children:[{type:a,value:ap}]},{type:a,value:" マクロを付けた関数には、その関数を "},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:an},{type:b,tag:h,props:{},children:[{type:a,value:V}]},{type:a,value:" メンバとして取り扱い可能にする(シグニチャをあわせて引数のディスパッチを行う)ためのラッパー関数が外部に生成されます。この生成は Unreal Header Tool によってビルド前に行われます。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"ラッパー関数を生成する目的は、呼び出しのシグニチャを統一することです。"},{type:b,tag:h,props:{},children:[{type:a,value:ap}]},{type:a,value:" マクロは様々な引数や戻り値を持った関数に付けられますが、 "},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:an},{type:b,tag:h,props:{},children:[{type:a,value:V}]},{type:a,value:" メンバが保持できるシグニチャは一定です。そこで、"},{type:b,tag:h,props:{},children:[{type:a,value:V}]},{type:a,value:" が保持できるシグニチャを持ったラッパー関数で包み、内部で引数の値や戻り値の処理を個別に行うことで、どんな関数でも "},{type:b,tag:h,props:{},children:[{type:a,value:V}]},{type:a,value:" で保持できるように差異を吸収するのです。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"このラッパー関数によって、"},{type:b,tag:h,props:{},children:[{type:a,value:ap}]},{type:a,value:" マクロを付けた任意の C++ 関数を "},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" で保持することができるようになります。すると、C++ で実装した関数が Blueprint \u002F C++ で扱えるようになるという仕組みなのです。"}]},{type:a,value:c},{type:b,tag:v,props:{className:[R]},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:H,props:{alt:A,src:"\u002Farticle-assets\u002Funrealengine\u002Fa-little-harder-introduction-to-blueprint\u002F\u002Fwhat-ufunction.png"},children:[]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"ちなみに、このラッパー関数のことを、Unreal Engine では Thunk function (サンク関数) と呼んでいるようです。この名前に「オッ」となった人はいるでしょうか。そうです。出会って戸惑うUFUNCTION() 指定子ランキングトップの "},{type:b,tag:h,props:{},children:[{type:a,value:"UFUNCTION(CustomThunk)"}]},{type:a,value:" とは、このサンク関数をUHTに自動生成させることを抑制し、自分自身でカスタムのサンク関数を記述するための指定子なのです。\nCustomThunkの使い方については、別の記事を書こうと思っています。"}]},{type:a,value:c},{type:b,tag:z,props:{id:bp},children:[{type:b,tag:m,props:{href:bT,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:aE}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" はローカルだけでなくリモート(サーバーなど)で実行されることもあるので、エンジン内でも様々な方法の実行処理が記述されています。ここでは、ローカル関数に特化した呼び出しの流れを見てみます。簡単のため、一部コードは省いて、コメントを追記しました。"}]},{type:a,value:c},{type:b,tag:v,props:{className:[T]},children:[{type:b,tag:v,props:{className:[U]},children:[{type:a,value:cs}]},{type:b,tag:D,props:{},children:[{type:b,tag:h,props:{className:[B]},children:[{type:a,value:"#define RESULT_PARAM Z_Param__Result\n#define RESULT_DECL void* const RESULT_PARAM\n\nvoid ProcessLocalFunction(UObject* Context, UFunction* Fn, FFrame& Stack, RESULT_DECL)\n{\n  \u002F\u002F UFunction の有効性をチェック\n\tcheckSlow(Fn);\n  \u002F\u002F C++関数か？\n\tif(Fn-\u003EHasAnyFunctionFlags(FUNC_Native))\n\t{\n    \u002F\u002F C++の関数を直接呼び出し\n\t\tFn-\u003EInvoke(Context, Stack, RESULT_PARAM);\n\t}\n\telse\n\t{\n    \u002F\u002F UFunction が持つ Script メンバに保持された Blueprint バイトコードを実行\n\t\tProcessScriptFunction(Context, Fn, Stack, RESULT_PARAM, ProcessLocalScriptFunction);\n\t}\n}"}]}]}]},{type:a,value:c},{type:b,tag:$,props:{id:bq},children:[{type:b,tag:m,props:{href:bU,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:aF}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" には "},{type:b,tag:h,props:{},children:[{type:a,value:aW}]},{type:a,value:" という、"},{type:b,tag:h,props:{},children:[{type:a,value:V}]},{type:a,value:" に保持する C++ 関数を呼び出すための専用メンバが存在します。C++ 関数に対する呼び出しは、このメンバを呼び出すだけで対応されています。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"「この呼び出し方では様々な引数の関数に対応できないのでは？」と思うかもしれませんが、問題ありません。 "},{type:b,tag:m,props:{href:aM},children:[{type:a,value:"UFunction の説明の項"}]},{type:a,value:" で述べた通り、C++ のネイティブ関数を "},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" で利用する場合、必ずシグニチャが統一されたラッパーである Thunk 関数が存在します。\n最終的に関数に渡される引数の値や、その関数が紐づくオブジェクトは、すべてここで渡されている "},{type:b,tag:h,props:{},children:[{type:a,value:aq}]},{type:a,value:cq},{type:b,tag:h,props:{},children:[{type:a,value:W}]},{type:a,value:" から Thunk 関数が取り出し、最終的な引数として決定します。\nまた、関数の戻り値は "},{type:b,tag:h,props:{},children:[{type:a,value:aX}]},{type:a,value:" に格納されます。コード上部に定義を引用しましたが、"},{type:b,tag:h,props:{},children:[{type:a,value:aX}]},{type:a,value:aV},{type:b,tag:h,props:{},children:[{type:a,value:"void* const"}]},{type:a,value:" を表すので、任意の戻り値のアドレスを受けることができます。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"例として、Blueprint における Int 同士の加算を定義している以下の関数を保持する "},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" を "},{type:b,tag:h,props:{},children:[{type:a,value:aW}]},{type:a,value:" した場合を見てみます。"}]},{type:a,value:c},{type:b,tag:v,props:{className:[T]},children:[{type:b,tag:v,props:{className:[U]},children:[{type:a,value:"Add_IntInt()"}]},{type:b,tag:D,props:{},children:[{type:b,tag:h,props:{className:[B]},children:[{type:a,value:"static int32 Add_IntInt(int32 A, int32 B = 1);"}]}]}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"UHT によって以下の Thunk 関数が自動生成され、"},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:an},{type:b,tag:h,props:{},children:[{type:a,value:V}]},{type:a,value:" に保持されているので、"},{type:b,tag:h,props:{},children:[{type:a,value:aW}]},{type:a,value:" で実行されるのもこの Thunk 関数です。"}]},{type:a,value:c},{type:b,tag:v,props:{className:[T]},children:[{type:b,tag:v,props:{className:[U]},children:[{type:a,value:"Thunk関数"}]},{type:b,tag:D,props:{},children:[{type:b,tag:h,props:{className:[B]},children:[{type:a,value:"\u002F\u002F static int32 Add_IntInt(int32 A, int32 B) の Thunk 関数\nvoid UKismetMathLibrary::execAdd_IntInt(UObject* Context, FFrame& Stack, void* const Z_Param__Result)\n{\n\tFIntProperty::TCppType Z_Param_A = FIntProperty::GetDefaultPropertyValue();\n\t\u002F\u002F 第1引数を Stack.Code のバイトコードを評価して取得する。Codeが進む。\n\tStack.StepCompiledIn\u003CFIntProperty\u003E(&Z_Param_A);;\n\n\tFIntProperty::TCppType Z_Param_B = FIntProperty::GetDefaultPropertyValue();\n\t\u002F\u002F 第2引数を Stack.Code のバイトコードを評価して取得する。Codeが進む。\n\tStack.StepCompiledIn\u003CFIntProperty\u003E(&Z_Param_B);;\n\n\t\u002F\u002F 次の Stack.Code が nullptr でなければ、1つ Code を進める。\n\tStack.Code += !!Stack.Code;;\n\n\t\u002F\u002F 引数を C++関数にディスパッチ。値を結果格納用の引数に書き込んで終了。\n\t*(int32*)Z_Param__Result = UKismetMathLibrary::Add_IntInt(Z_Param_A, Z_Param_B);\n}"}]}]}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:W}]},{type:a,value:" から C++ 関数に渡すべき引数の値などを読み出し、全ての準備が整ってから実際の C++関数の呼び出しを行っていることがわかります。"}]},{type:a,value:c},{type:b,tag:$,props:{id:br},children:[{type:b,tag:m,props:{href:bV,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:aG}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"Blueprint 関数は、ネイティブ実行可能なコードではなく Blueprint VM のバイトコードなので、単純に呼び出すことはできず、逐次バイトコードを処理していく必要があります。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"上のコードで利用されている "},{type:b,tag:h,props:{},children:[{type:a,value:ax}]},{type:a,value:" のシグニチャは以下です。"}]},{type:a,value:c},{type:b,tag:v,props:{className:[aa]},children:[{type:b,tag:D,props:{className:[B]},children:[{type:b,tag:h,props:{className:[B]},children:[{type:b,tag:i,props:{className:[j,C]},children:[{type:a,value:"template"}]},{type:b,tag:i,props:{className:[j,x]},children:[{type:a,value:"\u003C"}]},{type:b,tag:i,props:{className:[j,C]},children:[{type:a,value:"typename"}]},{type:a,value:E},{type:b,tag:i,props:{className:[j,ct]},children:[{type:a,value:"Exec"}]},{type:b,tag:i,props:{className:[j,x]},children:[{type:a,value:"\u003E"}]},{type:a,value:c},{type:b,tag:i,props:{className:[j,C]},children:[{type:a,value:aY}]},{type:a,value:E},{type:b,tag:i,props:{className:[j,X]},children:[{type:a,value:"ProcessScriptFunction"}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:F}]},{type:a,value:ay},{type:b,tag:i,props:{className:[j,x]},children:[{type:a,value:K}]},{type:a,value:E},{type:b,tag:i,props:{className:[j,C,ab]},children:[{type:a,value:aq}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:I}]},{type:a,value:" UFunction"},{type:b,tag:i,props:{className:[j,x]},children:[{type:a,value:K}]},{type:a,value:" Function"},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:I}]},{type:a,value:cu},{type:b,tag:i,props:{className:[j,x]},children:[{type:a,value:cv}]},{type:a,value:cw},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:I}]},{type:a,value:aZ},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:I}]},{type:a,value:" Exec ExecFtor"},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:G}]},{type:a,value:c}]}]}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:ax}]},{type:a,value:" は、Blueprint 関数の呼び出しの前処理と、呼び出しまでを行ってくれるヘルパー関数です。\nBlueprint 関数の引数や戻り値パラメータを保持するメモリ領域は、C++ の関数と異なり自動で確保されないので、呼び出す前に明示的に確保を行う必要があります。また、関数呼び出しに際しては、確保したメモリ領域や、関数の処理の実行状況、実行しているバイトコードへの命令カウンタなどをまとめて管理するスタックフレーム(のようなもの)を新たに構築する必要があります。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:ax}]},{type:a,value:" が行う前処理の中では、渡された "},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" のプロパティ情報などを元に、必要なメモリの確保や初期化を行い、スタックフレーム(のようなもの)の構築までを行ってくれます。これは、 "},{type:b,tag:h,props:{},children:[{type:a,value:w}]},{type:a,value:" 型の変数として引き継がれていきます。"},{type:b,tag:h,props:{},children:[{type:a,value:w}]},{type:a,value:" については後ほど詳しく触れます。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"第5引数の型がテンプレート型引数によって指定されており、ここに渡した関数が最後のバイトコード実行の処理として利用されます。\nまた、第5引数(最後の引数)に渡されているのは以下の関数です。簡単のため、例外処理は削除しています。"}]},{type:a,value:c},{type:b,tag:v,props:{className:[aa]},children:[{type:b,tag:D,props:{className:[B]},children:[{type:b,tag:h,props:{className:[B]},children:[{type:b,tag:i,props:{className:[j,C]},children:[{type:a,value:aY}]},{type:a,value:E},{type:b,tag:i,props:{className:[j,X]},children:[{type:a,value:"ProcessLocalScriptFunction"}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:F}]},{type:a,value:ay},{type:b,tag:i,props:{className:[j,x]},children:[{type:a,value:K}]},{type:a,value:E},{type:b,tag:i,props:{className:[j,C,ab]},children:[{type:a,value:aq}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:I}]},{type:a,value:cu},{type:b,tag:i,props:{className:[j,x]},children:[{type:a,value:cv}]},{type:a,value:cw},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:I}]},{type:a,value:aZ},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:G}]},{type:a,value:c},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:ar}]},{type:a,value:"\n\tUFunction"},{type:b,tag:i,props:{className:[j,x]},children:[{type:a,value:K}]},{type:a,value:" Function "},{type:b,tag:i,props:{className:[j,x]},children:[{type:a,value:cx}]},{type:a,value:E},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:F}]},{type:a,value:t},{type:b,tag:i,props:{className:[j,x]},children:[{type:a,value:K}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:G}]},{type:a,value:W},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:P}]},{type:a,value:"Node"},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:Q}]},{type:a,value:ac},{type:b,tag:i,props:{className:[j,ad]},children:[{type:a,value:"\u002F\u002F No POD struct can ever be stored in this buffer. "}]},{type:a,value:ac},{type:b,tag:i,props:{className:[j,X]},children:[{type:a,value:"MS_ALIGN"}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:F}]},{type:b,tag:i,props:{className:[j,cy]},children:[{type:a,value:cz}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:G}]},{type:a,value:" uint8 "},{type:b,tag:i,props:{className:[j,C,ab]},children:[{type:a,value:cA}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:a_}]},{type:a,value:"MAX_SIMPLE_RETURN_VALUE_SIZE"},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:a$}]},{type:a,value:E},{type:b,tag:i,props:{className:[j,X]},children:[{type:a,value:"GCC_ALIGN"}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:F}]},{type:b,tag:i,props:{className:[j,cy]},children:[{type:a,value:cz}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:G}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:Q}]},{type:a,value:"\n\n\t"},{type:b,tag:i,props:{className:[j,ad]},children:[{type:a,value:"\u002F\u002F バイトコードの実行。EX_Return 命令が現れるまで実行し続ける。"}]},{type:a,value:ac},{type:b,tag:i,props:{className:[j,C]},children:[{type:a,value:"while"}]},{type:a,value:E},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:F}]},{type:b,tag:i,props:{className:[j,x]},children:[{type:a,value:K}]},{type:a,value:W},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:P}]},{type:a,value:cB},{type:b,tag:i,props:{className:[j,x]},children:[{type:a,value:cC}]},{type:a,value:" EX_Return"},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:G}]},{type:a,value:ac},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:ar}]},{type:a,value:d},{type:b,tag:i,props:{className:[j,ad]},children:[{type:a,value:"\u002F\u002F 後続のバイトコードを一つ読み取り、その命令を実行する。内部では処理に依存した数だけ Stack.Code が進む。"}]},{type:a,value:"\n\t\tStack"},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:P}]},{type:b,tag:i,props:{className:[j,X]},children:[{type:a,value:ba}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:F}]},{type:a,value:W},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:P}]},{type:a,value:cD},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:I}]},{type:a,value:E},{type:b,tag:i,props:{className:[j,C,ab]},children:[{type:a,value:cA}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:G}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:Q}]},{type:a,value:ac},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:as}]},{type:a,value:cE},{type:b,tag:i,props:{className:[j,ad]},children:[{type:a,value:"\u002F\u002F 処理が終わったので一つコードを進め(EX_Return命令をステップオーバー)、終了処理に入る"}]},{type:a,value:"\n  Stack"},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:P}]},{type:a,value:ae},{type:b,tag:i,props:{className:[j,x]},children:[{type:a,value:bb}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:Q}]},{type:a,value:cE},{type:b,tag:i,props:{className:[j,C]},children:[{type:a,value:"if"}]},{type:a,value:E},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:F}]},{type:b,tag:i,props:{className:[j,x]},children:[{type:a,value:K}]},{type:a,value:W},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:P}]},{type:a,value:cB},{type:b,tag:i,props:{className:[j,x]},children:[{type:a,value:cC}]},{type:a,value:" EX_Nothing"},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:G}]},{type:a,value:g},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:ar}]},{type:a,value:d},{type:b,tag:i,props:{className:[j,ad]},children:[{type:a,value:"\u002F\u002F 次の命令が EX_Nothing でなければ、後続の命令を評価し、RESULT_PARAM に関数の結果を格納する"}]},{type:a,value:cF},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:P}]},{type:b,tag:i,props:{className:[j,X]},children:[{type:a,value:ba}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:F}]},{type:a,value:W},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:P}]},{type:a,value:cD},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:I}]},{type:a,value:" RESULT_PARAM"},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:G}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:Q}]},{type:a,value:g},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:as}]},{type:a,value:g},{type:b,tag:i,props:{className:[j,C]},children:[{type:a,value:"else"}]},{type:a,value:g},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:ar}]},{type:a,value:d},{type:b,tag:i,props:{className:[j,ad]},children:[{type:a,value:"\u002F\u002F EX_Nothing なら、命令カウンタを一つ進めて(EX_Nothingをステップオーバー)終了"}]},{type:a,value:cF},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:P}]},{type:a,value:ae},{type:b,tag:i,props:{className:[j,x]},children:[{type:a,value:bb}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:Q}]},{type:a,value:g},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:as}]},{type:a,value:c},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:as}]},{type:a,value:c}]}]}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:"ProcessLocalScriptFunction()"}]},{type:a,value:" はローカルでバイトコードを実行する関数です。\nこの関数には、"},{type:b,tag:h,props:{},children:[{type:a,value:ax}]},{type:a,value:" が整えてくれた "},{type:b,tag:h,props:{},children:[{type:a,value:"FFrame& Stack"}]},{type:a,value:" が渡されてきます。"},{type:b,tag:h,props:{},children:[{type:a,value:bc}]},{type:a,value:aV},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" の保持するバイトコード上の位置を示すポインタで、いわゆるプログラムカウンタの役割を果たします(後述)。処理をみると、"},{type:b,tag:h,props:{},children:[{type:a,value:bc}]},{type:a,value:" を進めることで命令の処理位置が進んでいき、"},{type:b,tag:h,props:{},children:[{type:a,value:cf}]},{type:a,value:" まで実行され続けることがわかります。"}]},{type:a,value:c},{type:b,tag:z,props:{id:bs},children:[{type:b,tag:m,props:{href:bW,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:w}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"さて、"},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" の実行にも登場しましたが、Blueprint VM の実行処理をより詳しく見ていくためには、"},{type:b,tag:h,props:{},children:[{type:a,value:w}]},{type:a,value:" のことを知る必要があります。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:w}]},{type:a,value:" は、C \u002F C++ など言語にも存在するスタックフレームに近い役割を果たすクラスです。スタックフレームとは、関数呼び出しのためにスタック領域に構築される、ローカル変数、リターンアドレス(呼び出し元のアドレス)、引数などの情報を持ったデータ構造です。関数が呼び出されると、その関数の命令を実行するための作業領域がメモリ上に必要ですし、自分がどこから呼ばれたのかがわからなければ関数からの return ができないので、それらの情報を扱うためのデータ構造を関数の呼び出し時に構築しているのです。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:w}]},{type:a,value:" はスタックフレーム同様、関数呼び出しのたびに構築され、関数が終了すると破棄されるので、呼び出しがネストすると多段的に存在することもありますが、特定の関数呼び出しに対応する "},{type:b,tag:h,props:{},children:[{type:a,value:w}]},{type:a,value:" は一つであると考えてよいです。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:w}]},{type:a,value:" はスタック領域に確保されるわけではありませんし、データ構造としてもスタックではありません。プログラムカウンタの役割を持つ変数や、直近の命令の結果を保持する変数などもメンバに持つので、それらはレジスタ的であるとも言えます。\n下図は、"},{type:b,tag:h,props:{},children:[{type:a,value:w}]},{type:a,value:" の主要なメンバ変数を示したものです。典型的なスタックフレームにありそうなものを青、レジスタ的な働きをしているものを橙に塗り分けたので、参考程度に御覧ください。"}]},{type:a,value:c},{type:b,tag:v,props:{className:[R]},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:H,props:{alt:A,src:"\u002Farticle-assets\u002Funrealengine\u002Fa-little-harder-introduction-to-blueprint\u002F\u002Ffframe-structure.png"},children:[]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:$,props:{id:al},children:[{type:b,tag:m,props:{href:bX,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:al}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"UFunction* Node\n"},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:bd},{type:b,tag:h,props:{},children:[{type:a,value:w}]},{type:a,value:cG},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" のポインタを保持する。"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"UObject* Object\n"},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:bd},{type:b,tag:h,props:{},children:[{type:a,value:w}]},{type:a,value:" に対応するコンテキストオブジェクト。多くの場合、関数が属する "},{type:b,tag:h,props:{},children:[{type:a,value:ay}]},{type:a,value:" のインスタンスと考えてもよい。ローカル変数へのアクセスなどに利用される。一部の命令の実行において、暗黙的に "},{type:b,tag:h,props:{},children:[{type:a,value:cH}]},{type:a,value:" と同等の役割として扱われる。"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"uint8* Locals\n"},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:bd},{type:b,tag:h,props:{},children:[{type:a,value:w}]},{type:a,value:cG},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" のローカル変数を保持しているメモリ領域の先頭アドレス。複数のローカル変数が連続して配置されることがあるが、別途得られたローカル変数の "},{type:b,tag:h,props:{},children:[{type:a,value:S}]},{type:a,value:" の情報を元に先頭アドレスからのオフセットを計算し、任意のローカル変数にアクセスできるようになっている。"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"FOutParamRec* OutParams\n"},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"ミュータブルな参照渡しなどによって、戻り値以外の出力パラメータと認識される引数がある場合、その引数は "},{type:b,tag:h,props:{},children:[{type:a,value:"CPF_OutParm"}]},{type:a,value:" というフラグを持つようになる。"},{type:b,tag:h,props:{},children:[{type:a,value:"OutParams"}]},{type:a,value:cI},{type:b,tag:h,props:{},children:[{type:a,value:"FOutParmRec"}]},{type:a,value:" のメンバとして、最初の追加出力引数の "},{type:b,tag:h,props:{},children:[{type:a,value:S}]},{type:a,value:" へのポインタ、その "},{type:b,tag:h,props:{},children:[{type:a,value:S}]},{type:a,value:" へのデータの保存先アドレス、および次の追加出力パラメータを保持する。リンクリストになっているので、一つずつ辿っていくことで、すべての追加出力パラメータにアクセスできる。"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"戻り値を格納すべき領域は OutParams のように "},{type:b,tag:h,props:{},children:[{type:a,value:w}]},{type:a,value:" のメンバとしてではなく、"},{type:b,tag:h,props:{},children:[{type:a,value:aX}]},{type:a,value:" のように、命令を処理する関数の引数として既定のものが渡されてくる。"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:$,props:{id:am},children:[{type:b,tag:m,props:{href:bY,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:am}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"uint8* Code\n"},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"いわゆるプログラムカウンタのような変数。実行中のバイトコードの実体は "},{type:b,tag:h,props:{},children:[{type:a,value:t}]},{type:a,value:" のメモリ領域などに配置されているが、 "},{type:b,tag:h,props:{},children:[{type:a,value:ae}]},{type:a,value:" はそのバイトコード上の特定の位置をポイントすることで、現在実行中の命令位置を保持する。この変数の指す位置をインクリメントすることで、バイトコードの実行が進む。"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"FProperty* MostRecentProperty\n"},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"直近の命令でアクセスされた "},{type:b,tag:h,props:{},children:[{type:a,value:S}]},{type:a,value:" のアドレスを保持する。これにより、Blueprint VM は、続く命令で前の命令で得られたプロパティに対するアクセスが可能になる。"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"uint8* MostRecentPropertyAddress\n"},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:cJ}]},{type:a,value:" のデータの実体が配置されたメモリ領域の先頭アドレス。 "},{type:b,tag:h,props:{},children:[{type:a,value:S}]},{type:a,value:" は型のリフレクション情報であり、値そのものは持たないので、"},{type:b,tag:h,props:{},children:[{type:a,value:S}]},{type:a,value:" の情報やメソッドを利用してこのメモリ領域から値を読み出すことで、実値へのアクセスが可能となる。"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"uint8* MostRecentPropertyContainer\n"},{type:b,tag:u,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:cK}]},{type:a,value:" は、直近の命令でアクセスされた "},{type:b,tag:h,props:{},children:[{type:a,value:S}]},{type:a,value:" コンテナのメモリ領域の先頭アドレスを保持する。処理のステップによっては、「あるメンバプロパティのアドレス位置はまだわからないが、そのプロパティを持っているオブジェクトのアドレスはわかる」といったシチュエーションがよくある。プロパティを保持するオブジェクトのことを Property Container と呼んでおり、追加で Property Container のアドレスにオフセットをかけることでメンバのアドレスに到達できる。"},{type:b,tag:h,props:{},children:[{type:a,value:S}]},{type:a,value:" が保持するリフレクション情報には、オブジェクト内での自身のメモリ配置のオフセット情報が含まれているが、それは相対的な値であるため、オフセットをかける対象となる絶対アドレスとして "},{type:b,tag:h,props:{},children:[{type:a,value:cK}]},{type:a,value:" が必要となる。"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:z,props:{id:bt},children:[{type:b,tag:m,props:{href:bZ,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:aH}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"Blueprint VM のバイトコード実行の実体は、"},{type:b,tag:h,props:{},children:[{type:a,value:w}]},{type:a,value:" による "},{type:b,tag:h,props:{},children:[{type:a,value:ae}]},{type:a,value:" ポインタのインクリメントです。 バイトコードには命令のほか、オブジェクトのバイト表現が埋め込まれたり、値リテラルを表すバイトが埋め込まれたりします。それらを処理次第、バイト数分だけ "},{type:b,tag:h,props:{},children:[{type:a,value:ae}]},{type:a,value:" を進めるのです。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"処理の実行に最も多用される "},{type:b,tag:h,props:{},children:[{type:a,value:w}]},{type:a,value:" のメンバ関数は、以下の "},{type:b,tag:h,props:{},children:[{type:a,value:az}]},{type:a,value:"です。"}]},{type:a,value:c},{type:b,tag:v,props:{className:[aa]},children:[{type:b,tag:D,props:{className:[B]},children:[{type:b,tag:h,props:{className:[B]},children:[{type:b,tag:i,props:{className:[j,C]},children:[{type:a,value:aY}]},{type:a,value:E},{type:b,tag:i,props:{className:[j,ct]},children:[{type:a,value:w}]},{type:b,tag:i,props:{className:[j,o,"double-colon"]},children:[{type:a,value:"::"}]},{type:b,tag:i,props:{className:[j,X]},children:[{type:a,value:ba}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:F}]},{type:a,value:ay},{type:b,tag:i,props:{className:[j,x]},children:[{type:a,value:K}]},{type:a,value:E},{type:b,tag:i,props:{className:[j,C,ab]},children:[{type:a,value:aq}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:I}]},{type:a,value:aZ},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:G}]},{type:a,value:c},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:ar}]},{type:a,value:"\n\tint32 B "},{type:b,tag:i,props:{className:[j,x]},children:[{type:a,value:cx}]},{type:a,value:E},{type:b,tag:i,props:{className:[j,x]},children:[{type:a,value:K}]},{type:a,value:ae},{type:b,tag:i,props:{className:[j,x]},children:[{type:a,value:bb}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:Q}]},{type:a,value:ac},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:F}]},{type:a,value:"GNatives"},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:a_}]},{type:a,value:cL},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:a$}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:G}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:F}]},{type:b,tag:i,props:{className:[j,C,ab]},children:[{type:a,value:aq}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:I}]},{type:b,tag:i,props:{className:[j,x]},children:[{type:a,value:K}]},{type:b,tag:i,props:{className:[j,C]},children:[{type:a,value:cH}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:I}]},{type:a,value:"RESULT_PARAM"},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:G}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:Q}]},{type:a,value:c},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:as}]},{type:a,value:c}]}]}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"このメンバは、一つ先のバイトコードを読み出し、そのバイト値を関数ポインタの配列 "},{type:b,tag:h,props:{},children:[{type:a,value:be}]},{type:a,value:" のインデックスとすることで、命令コードによる命令関数の呼び出しを実現している関数です。先に命令表で示した命令コードが、ここでの変数 "},{type:b,tag:h,props:{},children:[{type:a,value:cL}]},{type:a,value:" に数値として読み出されるということです。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:be}]},{type:a,value:" は以下のように定義されます。"}]},{type:a,value:c},{type:b,tag:v,props:{className:[aa]},children:[{type:b,tag:D,props:{className:[B]},children:[{type:b,tag:h,props:{className:[B]},children:[{type:a,value:"COREUOBJECT_API FNativeFuncPtr GNatives"},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:a_}]},{type:a,value:"EX_Max"},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:a$}]},{type:b,tag:i,props:{className:[j,o]},children:[{type:a,value:Q}]},{type:a,value:c}]}]}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"この配列に対して、命令処理を実装した関数が、各々追加されています。以下は単純な "},{type:b,tag:h,props:{},children:[{type:a,value:aT}]},{type:a,value:" 命令の実装です。"}]},{type:a,value:c},{type:b,tag:v,props:{className:[T]},children:[{type:b,tag:v,props:{className:[U]},children:[{type:a,value:aT}]},{type:b,tag:D,props:{},children:[{type:b,tag:h,props:{className:[B]},children:[{type:a,value:"void UObject::execJump( UObject* Context, FFrame& Stack, RESULT_DECL )\n{\n  \u002F\u002F 現在の Stack.Code 位置から、CodeSkipSizeType のサイズのメモリを読み出し、CodeSkipSizeType として解釈して返す。\n  \u002F\u002F sizeof(CodeSkipSizeType) だけ Stack.Code が進む。 \n\tCodeSkipSizeType Offset = Stack.ReadCodeSkipCount();\n  \u002F\u002F 現在の Stack.Code を、`UFunction` の保持するバイトコードへの特定オフセット位置に置き換える\n\tStack.Code = &Stack.Node-\u003EScript[Offset];\n}\nIMPLEMENT_VM_FUNCTION( EX_Jump, execJump ); \u002F\u002F GNatives に EX_Jump の値(列挙型であり命令コードを示す)で登録"}]}]}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"なお、 "},{type:b,tag:h,props:{},children:[{type:a,value:cM}]},{type:a,value:" とはバイトコード上のオフセットを表すのに十分なサイズの数値型で、多くのプラットフォームでは "},{type:b,tag:h,props:{},children:[{type:a,value:cN}]},{type:a,value:" です。\nこの処理によって、バイトコード上に示されたジャンプ位置に現在の "},{type:b,tag:h,props:{},children:[{type:a,value:bc}]},{type:a,value:" を書き換え、後続する命令の内容を変更することができます。\n"},{type:b,tag:h,props:{},children:[{type:a,value:cM}]},{type:a,value:" が "},{type:b,tag:h,props:{},children:[{type:a,value:cN}]},{type:a,value:" であると仮定したときのバイトコードを図示するなら、以下のようになるでしょう。"}]},{type:a,value:c},{type:b,tag:v,props:{className:[R]},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:H,props:{alt:A,src:"\u002Farticle-assets\u002Funrealengine\u002Fa-little-harder-introduction-to-blueprint\u002F\u002Fex-jump.png"},children:[]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"また、もう少し複雑な例として、条件付きジャンプ "},{type:b,tag:h,props:{},children:[{type:a,value:ao}]},{type:a,value:" も見てみましょう。"}]},{type:a,value:c},{type:b,tag:v,props:{className:[T]},children:[{type:b,tag:v,props:{className:[U]},children:[{type:a,value:ao}]},{type:b,tag:D,props:{},children:[{type:b,tag:h,props:{className:[B]},children:[{type:a,value:"void UObject::execJumpIfNot( UObject* Context, FFrame& Stack, RESULT_DECL )\n{\n\tCHECK_RUNAWAY;\n\n  \u002F\u002F 希望されるジャンプ先のオフセット位置をバイトコードから読み出す\n\tCodeSkipSizeType Offset = Stack.ReadCodeSkipCount();\n\n\t\u002F\u002F 続く命令を Step で評価する。その結果を第二引数の `Value` に受け取る。\n\tbool Value = 0;\n\tStack.Step( Stack.Object, &Value );\n\n  \u002F\u002F `Value` の値によってジャンプするか否かを分岐\n\tif( !Value )\n\t{\n\t\tStack.Code = &Stack.Node-\u003EScript[ Offset ];\n\t}\n}\nIMPLEMENT_VM_FUNCTION( EX_JumpIfNot, execJumpIfNot );"}]}]}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:ao}]},{type:a,value:" では、"},{type:b,tag:h,props:{},children:[{type:a,value:az}]},{type:a,value:" で実行された "},{type:b,tag:h,props:{},children:[{type:a,value:"execJumpIfNot()"}]},{type:a,value:" の中で、更に "},{type:b,tag:h,props:{},children:[{type:a,value:az}]},{type:a,value:" を呼び出しています。\nこのパターンは多くの命令の実装で見られるもので、バイトコードの表現の自由度を向上させています。 "},{type:b,tag:h,props:{},children:[{type:a,value:ao}]},{type:a,value:cI},{type:b,tag:h,props:{},children:[{type:a,value:bf}]},{type:a,value:" を評価式に持つ単純な分岐命令などに利用できるものです。しかし、"},{type:b,tag:h,props:{},children:[{type:a,value:bf}]},{type:a,value:" の値の決定を命令処理内部で更に "},{type:b,tag:h,props:{},children:[{type:a,value:az}]},{type:a,value:" することで、ジャンプするか否かの決定を、後続の任意のバイトコードの実行結果によって決定できるようになっているのです。\n"},{type:b,tag:h,props:{},children:[{type:a,value:bf}]},{type:a,value:" の値を決定するのはもしかすると単にバイトコード上に埋め込まれた定数かもしれませんし、複雑な処理の結果かもしれません。"}]},{type:a,value:c},{type:b,tag:v,props:{className:[R]},children:[{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:H,props:{alt:A,src:"\u002Farticle-assets\u002Funrealengine\u002Fa-little-harder-introduction-to-blueprint\u002F\u002Fex-jump-if-not.png"},children:[]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"続いて、"},{type:b,tag:h,props:{},children:[{type:a,value:cJ}]},{type:a,value:" などを利用する命令の例として、ローカル変数へのアクセス命令 "},{type:b,tag:h,props:{},children:[{type:a,value:aS}]},{type:a,value:" も見ておきます。\n(例のごとく例外処理は省いています)"}]},{type:a,value:c},{type:b,tag:v,props:{className:[T]},children:[{type:b,tag:v,props:{className:[U]},children:[{type:a,value:aS}]},{type:b,tag:D,props:{},children:[{type:b,tag:h,props:{className:[B]},children:[{type:a,value:"void UObject::execLocalVariable( UObject* Context, FFrame& Stack, RESULT_DECL )\n{\n  \u002F\u002F バイトコードから、読み出したいプロパティを表す `FProperty` を読み出す。その分 Code は進む。\n\tFProperty* VarProperty = Stack.ReadProperty();\n  \u002F\u002F `Stack.Locals` が指すローカル変数メモリ領域に対して、`FProperty` のメモリ配置情報を適用し、読み出したいプロパティデータのアドレスを決定する。そのアドレスを `MostRecentProeprtyAddress` に入れておく。\n  Stack.MostRecentPropertyAddress = VarProperty-\u003EContainerPtrToValuePtr\u003Cuint8\u003E(Stack.Locals);\n  \u002F\u002F ↑ で `MostRecentProeprtyAddress` を更新したので、そのプロパティのコンテナである `Stack.Locals` のアドレスに `MostRecentPropertyContainer` も更新しておく\n  Stack.MostRecentPropertyContainer = Stack.Locals;\n\n  if (RESULT_PARAM)\n  {\n    \u002F\u002F プロパティに Getter が定義されているか\n    if (VarProperty-\u003EHasGetter())\n    {\n      \u002F\u002F されていたら Getter で読み出し、RESULT_PARAM に受け取る\n      VarProperty-\u003EGetValue_InContainer(Stack.MostRecentPropertyContainer, RESULT_PARAM);\n    }\n    else\n    {\n      \u002F\u002F されていなかったら、プロパティデータのアドレスからデータを RESULT_PARAM にコピーして値を読み出す\n      VarProperty-\u003ECopyCompleteValueToScriptVM(RESULT_PARAM, Stack.MostRecentPropertyAddress);\n    }\n  }\n}\nIMPLEMENT_VM_FUNCTION( EX_LocalVariable, execLocalVariable );"}]}]}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"このように、プロパティに直接アクセスする命令の中では、アクセスしたプロパティの履歴を "},{type:b,tag:h,props:{},children:[{type:a,value:w}]},{type:a,value:" の Recent~ 系のメンバに記録してくれるのです。これにより、"},{type:b,tag:h,props:{},children:[{type:a,value:w}]},{type:a,value:" を共用する後続の命令もそのプロパティにアクセス可能になるので、プロパティアクセスに頻繁に利用されます。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"これらの命令が読めれば、大抵の命令の処理は読むことができます。 "},{type:b,tag:h,props:{},children:[{type:a,value:cs}]},{type:a,value:" に実装がありますので、気になる命令は見てみるとよいでしょう。"}]},{type:a,value:c},{type:b,tag:z,props:{id:bu},children:[{type:b,tag:m,props:{href:b_,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:aI}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:m,props:{href:aL},children:[{type:a,value:av}]},{type:a,value:" で、定義されている命令とその役割は記載しましたが、実際にはどこにどうやって定義されているのかについてはまだ触れていませんでした。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"これは、 "},{type:b,tag:h,props:{},children:[{type:a,value:"Runtime\u002FCoreUObject\u002FPublic\u002FUObject\u002FScript.h"}]},{type:a,value:" をみるとすぐにわかります。公式ドキュメントにも記載のある、 "},{type:b,tag:m,props:{href:"https:\u002F\u002Fdocs.unrealengine.com\u002F5.1\u002Fen-US\u002FAPI\u002FRuntime\u002FCoreUObject\u002FUObject\u002FEExprToken\u002F",rel:[L,M,N],target:O},children:[{type:b,tag:h,props:{},children:[{type:a,value:"EExprToken"}]}]},{type:a,value:" が、Blueprint VM の命令のコードを決定しています。\nここで定義した列挙型の値を、一つ前の項でも見た命令の実装と紐づけて、 "},{type:b,tag:h,props:{},children:[{type:a,value:be}]},{type:a,value:" に入れておくことで、命令の呼び出しを実現しているようです。"}]},{type:a,value:c},{type:a,value:c},{type:b,tag:z,props:{id:bv},children:[{type:b,tag:m,props:{href:b$,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:aJ}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"ここまで、実装ベースで Blueprint VM の背後を見てきました。しかし、バイトコードの役割がわかるようになったからには、実際に実行されているバイトコードを確認してみたくなるでしょう。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"Unreal Engine には、コンパイルして生成されたバイトコードを人間が読みやすい形で逆アセンブルして出力する "},{type:b,tag:h,props:{},children:[{type:a,value:"FKismetBytecodeDisassembler"}]},{type:a,value:" というクラスが定義されています。これは Blueprint コンパイラの中でも利用できるようになっていて、Engine.ini に以下を加えることで有効化できます。"}]},{type:a,value:c},{type:b,tag:v,props:{className:[aa]},children:[{type:b,tag:D,props:{className:[cO]},children:[{type:b,tag:h,props:{className:[cO]},children:[{type:a,value:"[Kismet]\nCompileDisplaysBinaryBackend=True"}]}]}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"これが有効化されていると、Blueprint のコンパイル時に、生成されたバイトコードを逆アセンブルしたテキストがログ出力されるようになります。\nたとえば、以下のグラフをコンパイルすると……"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:H,props:{alt:A,src:"\u002Farticle-assets\u002Funrealengine\u002Fa-little-harder-introduction-to-blueprint\u002F\u002Fsample-nodes.png"},children:[]}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"これが出てきます。"}]},{type:a,value:c},{type:b,tag:v,props:{className:[aa]},children:[{type:b,tag:D,props:{className:[cP]},children:[{type:b,tag:h,props:{className:[cP]},children:[{type:a,value:"LogK2Compiler: [function ExecuteUbergraph_L_GameEntry]:\nLabel_0x0:\n     $4E: Computed Jump, offset specified by expression:\n         $0: Local variable of type int32 named EntryPoint. Parameter flags: (Parameter).\nLabel_0xA:\n     $68: Call Math (stack node KismetSystemLibrary::PrintString)\n       $17: EX_Self\n       $1F: literal ansi string \"Hello\"\n       $27: EX_True\n       $27: EX_True\n       $2F: literal struct LinearColor (serialized size: 16)\n         $1E: literal float 0.000000\n         $1E: literal float 0.660000\n         $1E: literal float 1.000000\n         $1E: literal float 1.000000\n         $30: EX_EndStructConst\n       $1E: literal float 2.000000\n       $21: literal name None\n       $16: EX_EndFunctionParms\nLabel_0x52:\n     $6: Jump to offset 0x7D\nLabel_0x57:\n     $45: Local Virtual Script Function named NewFunction\n       $28: EX_False\n       $1D: literal int32 0\n       $21: literal name None\n       $16: EX_EndFunctionParms\nLabel_0x78:\n     $6: Jump to offset 0xA\nLabel_0x7D:\n     $4: Return expression\n       $B: EX_Nothing\nLabel_0x7F:\n     $53: EX_EndOfScript\nLogK2Compiler: [function ReceiveBeginPlay]:\nLabel_0x0:\n     $46: Local Final Script Function (stack node L_GameEntry_C::ExecuteUbergraph_L_GameEntry)\n       $1D: literal int32 87\n       $16: EX_EndFunctionParms\nLabel_0xF:\n     $4: Return expression\n       $B: EX_Nothing\nLabel_0x11:\n     $53: EX_EndOfScript\nLogK2Compiler: [function NewFunction]:\nLabel_0x0:\n     $68: Call Math (stack node KismetSystemLibrary::PrintString)\n       $17: EX_Self\n       $1F: literal ansi string \"Hello\"\n       $27: EX_True\n       $27: EX_True\n       $2F: literal struct LinearColor (serialized size: 16)\n         $1E: literal float 0.000000\n         $1E: literal float 0.660000\n         $1E: literal float 1.000000\n         $1E: literal float 1.000000\n         $30: EX_EndStructConst\n       $1E: literal float 2.000000\n       $21: literal name None\n       $16: EX_EndFunctionParms\nLabel_0x48:\n     $4: Return expression\n       $B: EX_Nothing\nLabel_0x4A:\n     $53: EX_EndOfScript\n"}]}]}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:b,tag:h,props:{},children:[{type:a,value:"$xx"}]},{type:a,value:" のように表示されているのが Blueprint VM の命令コードであり、それに合わせて命令の名前などを併記してくれています。\nまた、インデントを変えることでその内部で実行されている命令を表現してくれています。リテラル値を表す命令などではその値も示してくれているので、大変読みやすいです。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"ただ、実際に Config に上記の設定を加えてみると、"},{type:b,tag:h,props:{},children:[{type:a,value:"Trace~"}]},{type:a,value:" などのよくわからない命令が大量に入ると思います。これは Blueprint デバッガのための命令がノード単位で挿入されるからです。これを回避するには、エンジンのソースコードをいじるか、デバッガでデバッグ命令を挿入するかのフラグを上書きする必要があります。僕は面倒なので後者の手法で、"},{type:b,tag:h,props:{},children:[{type:a,value:"FKismetFunctionContext::bCreateDebugData"}]},{type:a,value:" の値を "},{type:b,tag:h,props:{},children:[{type:a,value:"false"}]},{type:a,value:" に上書きすることで綺麗な出力を得ています。"}]},{type:a,value:c},{type:b,tag:J,props:{id:"この知識何に使えるの"},children:[{type:b,tag:m,props:{href:ca,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:cb}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"普段意識する必要は全く無いでしょう。しかし、記事中でも少し触れた "},{type:b,tag:h,props:{},children:[{type:a,value:"CustomThunk"}]},{type:a,value:" などの Thunk 関数を自作するようなコードは非常に強力です。というのも、本来は Blueprint VM 側に処理が隠されてしまい、結果の引数しか受け取れないはずの C++ 実装で、実行中の Blueprint VM の "},{type:b,tag:h,props:{},children:[{type:a,value:w}]},{type:a,value:" に直接操作を加えることができるのです。このため、ある種のメタプログラミングのようなことが可能になります。\n代表格は "},{type:b,tag:h,props:{},children:[{type:a,value:cQ}]},{type:a,value:" ピンなどです。たまに見かける、繋いではじめて型が確定する灰色のピンがあると思いますが、あれが "},{type:b,tag:h,props:{},children:[{type:a,value:cQ}]},{type:a,value:" ピンで、そういった特殊な機能を気軽に利用できるようになります。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"また、最適化などの面でもかなり役立つと思います。Blueprint VM を見ていると、案外まだ最適化の余地がありそうな実装がちらほら見受けられます。エンジンに手を加えずとも、Blueprint VM に様々な命令を実行させることはプロジェクトからも可能ですから、「さいきょうの最適化ノード」を構築することもできるでしょう。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"今回の記事では間に合いませんでしたが、バイトコードを生成しているコンパイラに対して手を加えることもできます。Blueprint Compiler には CompilerExtension というコンパイラ拡張用のAPIが存在しており、コンパイラ側から実行したいバイトコードを変更することができます。K2_Node を深いレベルから実装する場合、"},{type:b,tag:h,props:{},children:[{type:a,value:"FNodeHandlingFunctor::Compile()"}]},{type:a,value:" という、ノードの動作を Blueprint Compiler が処理できるステートメントに記述し直す処理を実装する必要があります。この場合にも Blueprint VM の知識は大いに役立つでしょう。"}]},{type:a,value:c},{type:b,tag:J,props:{id:aN},children:[{type:b,tag:m,props:{href:cc,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:aN}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"Blueprint VM は、Unreal Engine でのコンテンツ制作に特化したドメイン固有言語であるということが、実装からもよくわかりました。\n高速化のためにバイトコードに変換されていますが、C++ との連携機能は柔軟かつ強力であり、我々が遊ぶ余地も沢山ありそうです。\nみなさんもどんどん 「Blueprint を書いて」いきましょう！"}]},{type:a,value:c},{type:b,tag:J,props:{id:aO},children:[{type:b,tag:m,props:{href:cd,ariaHidden:p,tabIndex:q},children:[{type:b,tag:i,props:{className:[r,s]},children:[]}]},{type:a,value:aO}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"コンパイラまで書こうと思ったけど間に合わなかったよ！！！"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"ところで、そろそろ公式に動きがありそうな新スクリプト言語 Verse が気になります。現時点の情報として、エンジンをまたいで利用可能なスクリプト言語であるとのことなので、Blueprint VM とは全く別の実行基盤が搭載されると考えたほうがよさそうです。\n一応コンテンツ制作向けということで DSL とも言えるのかもしれませんが、汎化の具合によっては一つの汎用言語として、Blueprint VM の実装思想とはかなり異なるものなのかもしれません。待ち遠しいですね。"}]},{type:a,value:c},{type:b,tag:k,props:{},children:[{type:a,value:"明日は "},{type:b,tag:m,props:{href:"https:\u002F\u002Fqiita.com\u002Fdgtanaka",rel:[L,M,N],target:O},children:[{type:a,value:"@dgtanake"}]},{type:a,value:" さんの『UEのPCゲーム対応について』です。楽しみですね。\n　"}]}]},dir:"\u002Farticles\u002Funrealengine",path:cR,extension:".md",createdAt:cS,updatedAt:cS,gitCreatedAt:"2022-12-03T11:05:47.000Z",gitUpdatedAt:"2022-12-18T08:05:11.000Z"},path:cR}],fetch:{"data-v-08b63208:0":{prevTitle:A,nextTitle:A,existPrev:cT,existNext:cT,prevSlug:A,nextSlug:A,seriesPage:A}},mutations:void 0}}("text","element","\n","\n    ","tg-0pky","td","\n  ","code","span","token","p","tr","a","li","punctuation","true",-1,"icon","icon-link","UFunction","ul","div","FFrame","operator",2,"h2","","language-cpp","keyword","pre"," ","(",")","img",",","h1","*","nofollow","noopener","noreferrer","_blank",".",";","without-shadow","FProperty","code-extra","filename","Func","Stack","function","非ネイティブコンパイル言語",3,"strong","h3","remark-highlight","type-opencl-host-cpp","\n\t","comment","Code","検証環境","対象読者","記述範囲と注意事項","計算モデル","命令セット設計","連携の本質は関数呼び出し","典型的なスタックフレームっぽいやつ","レジスタっぽいやつ"," の ","EX_JumpIfNot","UFUNCTION","Context","{","}","ドメイン固有言語 (DSL)","型安全ではない、弱い静的型付け","Blueprint VM 命令表","EX_EndSet","ProcessScriptFunction()","UObject","FFrame::Step()","C++との相互運用性","Blueprint VM ≒ デカい C++ の Wrapper","UFunction の内側","UFUNCTION() マクロの役割 Thunk \u002F CustomThunk","UFunctionの呼び出しと大きな流れ","C++ 関数に対する処理","Blueprint 関数に対する処理","FFrame による Blueprint VM 命令のステップ実行","Blueprint VM 命令の定義","Blueprint バイトコードの逆アセンブル","前提","#blueprint-vm-%E5%91%BD%E4%BB%A4%E8%A1%A8","#ufunction-%E3%83%9E%E3%82%AF%E3%83%AD%E3%81%AE%E5%BD%B9%E5%89%B2-thunk--customthunk","まとめ","おわりに","Blueprint VM","col","th","EX_LocalVariable","EX_Jump","EX_StructConst"," は ","Invoke()","RESULT_DECL","void"," RESULT_DECL","[","]","Step","++","Stack.Code","現在の ","GNatives[]","Value","2022\u002F12\u002F18","ドメイン固有言語-dsl","cとの相互運用性","型安全ではない弱い静的型付け","blueprint-vm-命令表","blueprint-vm--デカい-c-の-wrapper","ufunction","ufunction-の内側","ufunction-マクロの役割-thunk--customthunk","ufunctionの呼び出しと大きな流れ","c-関数に対する処理","blueprint-関数に対する処理","fframe","fframe-による-blueprint-vm-命令のステップ実行","blueprint-vm-命令の定義","blueprint-バイトコードの逆アセンブル","目次","#%E5%89%8D%E6%8F%90","#%E6%A4%9C%E8%A8%BC%E7%92%B0%E5%A2%83","#%E5%AF%BE%E8%B1%A1%E8%AA%AD%E8%80%85","#%E8%A8%98%E8%BF%B0%E7%AF%84%E5%9B%B2%E3%81%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85","#%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AE-blueprint","プログラミング言語としての Blueprint","#%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E5%9B%BA%E6%9C%89%E8%A8%80%E8%AA%9E-dsl","#%E9%9D%9E%E3%83%8D%E3%82%A4%E3%83%86%E3%82%A3%E3%83%96%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E8%A8%80%E8%AA%9E","#c%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E9%81%8B%E7%94%A8%E6%80%A7","#%E5%9E%8B%E5%AE%89%E5%85%A8%E3%81%A7%E3%81%AF%E3%81%AA%E3%81%84%E5%BC%B1%E3%81%84%E9%9D%99%E7%9A%84%E5%9E%8B%E4%BB%98%E3%81%91","#blueprint-%E3%81%AE%E6%AD%B4%E5%8F%B2%E7%9A%84%E8%83%8C%E6%99%AF%E3%81%A8-unrealkismet","Blueprint の歴史的背景と UnrealKismet","#blueprint-vm-%E6%A6%82%E8%A6%81","Blueprint VM 概要","#%E8%A8%88%E7%AE%97%E3%83%A2%E3%83%87%E3%83%AB","#%E5%91%BD%E4%BB%A4%E3%82%BB%E3%83%83%E3%83%88%E8%A8%AD%E8%A8%88","#blueprint-vm--%E3%83%87%E3%82%AB%E3%81%84-c-%E3%81%AE-wrapper","#blueprint-vm-%E8%A9%B3%E8%A7%A3","Blueprint VM 詳解","#%E9%80%A3%E6%90%BA%E3%81%AE%E6%9C%AC%E8%B3%AA%E3%81%AF%E9%96%A2%E6%95%B0%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97","#ufunction","#ufunction-%E3%81%AE%E5%86%85%E5%81%B4","#ufunction%E3%81%AE%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97%E3%81%A8%E5%A4%A7%E3%81%8D%E3%81%AA%E6%B5%81%E3%82%8C","#c-%E9%96%A2%E6%95%B0%E3%81%AB%E5%AF%BE%E3%81%99%E3%82%8B%E5%87%A6%E7%90%86","#blueprint-%E9%96%A2%E6%95%B0%E3%81%AB%E5%AF%BE%E3%81%99%E3%82%8B%E5%87%A6%E7%90%86","#fframe","#%E5%85%B8%E5%9E%8B%E7%9A%84%E3%81%AA%E3%82%B9%E3%82%BF%E3%83%83%E3%82%AF%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%81%A3%E3%81%BD%E3%81%84%E3%82%84%E3%81%A4","#%E3%83%AC%E3%82%B8%E3%82%B9%E3%82%BF%E3%81%A3%E3%81%BD%E3%81%84%E3%82%84%E3%81%A4","#fframe-%E3%81%AB%E3%82%88%E3%82%8B-blueprint-vm-%E5%91%BD%E4%BB%A4%E3%81%AE%E3%82%B9%E3%83%86%E3%83%83%E3%83%97%E5%AE%9F%E8%A1%8C","#blueprint-vm-%E5%91%BD%E4%BB%A4%E3%81%AE%E5%AE%9A%E7%BE%A9","#blueprint-%E3%83%90%E3%82%A4%E3%83%88%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E9%80%86%E3%82%A2%E3%82%BB%E3%83%B3%E3%83%96%E3%83%AB","#%E3%81%93%E3%81%AE%E7%9F%A5%E8%AD%98%E4%BD%95%E3%81%AB%E4%BD%BF%E3%81%88%E3%82%8B%E3%81%AE","この知識、何に使えるの？","#%E3%81%BE%E3%81%A8%E3%82%81","#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB","UFUNCTION()","EX_Return","EX_Nothing","EX_SetArray","EX_EndArray","EX_SetSet","EX_SetMap","EX_EndMap","EX_SetConst","と対応して利用され、実行スタック上の値データ列の終了を示す。","EX_MapConst","Trace point. Only observed in the editor, otherwise it behaves like EX_Nothing."," や ","UStruct","ScriptCore.cpp","class-name"," FFrame","&"," Stack","=","number","16","Buffer","Code ","!=","Object","\n\n  ","\n    Stack"," に対応する ","this"," は、","MostRecentProperty","MostRecentPropertyContainer","B","CodeSkipSizeType","uint32","language-unknown","language-ini","Wildcard","\u002Farticles\u002Funrealengine\u002Fa-little-harder-introduction-to-blueprint","2022-12-18T00:00:00.000Z",false)));