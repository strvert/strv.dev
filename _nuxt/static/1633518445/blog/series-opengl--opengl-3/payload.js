__NUXT_JSONP__("/blog/series-opengl--opengl-3", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak){return {data:[{}],fetch:{"data-v-0b77dbc5:0":{page:{slug:"opengl-3",description:y,title:"OpenGL入門から3DCGレンダラ実装まで その3",series:y,seriesIndex:m,tags:[M],toc:[{id:z,depth:J,text:z},{id:N,depth:m,text:O},{id:P,depth:m,text:Q},{id:A,depth:J,text:A},{id:R,depth:m,text:S},{id:B,depth:m,text:B},{id:T,depth:m,text:U},{id:C,depth:J,text:C},{id:V,depth:m,text:W}],body:{type:"root",children:[{type:b,tag:K,props:{id:z},children:[{type:b,tag:g,props:{href:"#%E8%A3%9C%E5%8A%A9%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA",ariaHidden:h,tabIndex:i},children:[{type:b,tag:d,props:{className:[j,k]},children:[]}]},{type:a,value:z}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"ここまでOpenGLについて記述してきましたが、OpenGLがハードウェアやOSと近いものである特性上、ライブラリとしての取り扱いも特殊な箇所があります。直接的にプラットフォーム間の環境の差異を受けるため、OpenGLを用いたプログラミングでは本来プラットフォーム固有の実装を記述する必要があります。\nしかし、これはかなり面倒なことですし、情報共有やクロスプラットフォーム性と言った面でも非常に効率が悪くなります。そこで、OpenGLにはいくつかの領域において補助ライブラリが存在します。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"これは公式の仕様によるものではありませんが、一般的に広く使われており、公式もこういった補助ライブラリの利用を強く推奨しています。とはいえ、決してOpenGLを簡単な描画ライブラリとしてラップするような性質のものではなく、様々な種類があるOSやGPUを”GPUを使って描画や処理を行う環境”として抽象化してくれるに過ぎないという点には注意が必要です。"}]},{type:a,value:c},{type:b,tag:n,props:{id:N},children:[{type:b,tag:g,props:{href:"#opengl-load-library",ariaHidden:h,tabIndex:i},children:[{type:b,tag:d,props:{className:[j,k]},children:[]}]},{type:a,value:O}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"一般的なC\u002FC++のライブラリであれば、そのライブラリのヘッダをインクルードし、適切にリンカが参照を解決できるように設定すればライブラリの関数を利用することができます。\nしかし、OpenGLはそれでは利用できません。これはプラットフォームによってOSやハードウェアの実行可能な命令が異なることに由来しているようで、OpenGLは実行時に利用する関数のポインタを生成し、変数に割り当てることで呼び出し可能オブジェクトの作成を行います。本来、プログラマはこの初期化処理を実装しないとOpenGLの関数を使うことすらできません。更に、このロード処理自体もプラットフォームによって異なる実装が必要となります。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"これらは**OpenGL ロードライブラリ(OpenGL Loading Library)**と呼ばれる部類の補助ライブラリを利用することで自動化することが可能で、クロスプラットフォーム対応も容易となります。\n以下に、いくつかの主要なOpenGLロードライブラリを紹介します。"}]},{type:a,value:c},{type:b,tag:D,props:{id:"glewopengl-extension-wrangler"},children:[{type:b,tag:g,props:{href:"#glewopengl-extension-wrangler",ariaHidden:h,tabIndex:i},children:[{type:b,tag:d,props:{className:[j,k]},children:[]}]},{type:a,value:"GLEW（OpenGL Extension Wrangler）"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:E},{type:b,tag:g,props:{href:X,rel:[o,p,q],target:r},children:[{type:a,value:X}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Windows, Linux, Mac OS X, FreeBSD, Irix, Solarisなど多くのプラットフォームをサポートするOpenGLロードライブラリです。\nインクルードして以下のように初期化関数を呼び出すことで、そのプラットフォームで利用可能なOpenGLの関数を読み込んで利用可能にすることができます。"}]},{type:a,value:c},{type:b,tag:t,props:{className:[u]},children:[{type:b,tag:d,props:{className:["filename"]},children:[{type:a,value:"Example"}]},{type:b,tag:v,props:{className:[w,"language-cpp"]},children:[{type:b,tag:x,props:{},children:[{type:a,value:"GLenum err "},{type:b,tag:d,props:{className:[f,Y]},children:[{type:a,value:"="}]},{type:a,value:F},{type:b,tag:d,props:{className:[f,L]},children:[{type:a,value:"glewInit"}]},{type:b,tag:d,props:{className:[f,l]},children:[{type:a,value:G}]},{type:b,tag:d,props:{className:[f,l]},children:[{type:a,value:H}]},{type:b,tag:d,props:{className:[f,l]},children:[{type:a,value:Z}]},{type:a,value:c},{type:b,tag:d,props:{className:[f,"keyword"]},children:[{type:a,value:"if"}]},{type:a,value:F},{type:b,tag:d,props:{className:[f,l]},children:[{type:a,value:G}]},{type:a,value:"GLEW_OK "},{type:b,tag:d,props:{className:[f,Y]},children:[{type:a,value:"!="}]},{type:a,value:" err"},{type:b,tag:d,props:{className:[f,l]},children:[{type:a,value:H}]},{type:a,value:c},{type:b,tag:d,props:{className:[f,l]},children:[{type:a,value:"{"}]},{type:a,value:_},{type:b,tag:d,props:{className:[f,"comment"]},children:[{type:a,value:"\u002F* 初期化に失敗した場合の処理 *\u002F"}]},{type:a,value:_},{type:b,tag:d,props:{className:[f,L]},children:[{type:a,value:"fprintf"}]},{type:b,tag:d,props:{className:[f,l]},children:[{type:a,value:G}]},{type:b,tag:d,props:{className:[f,"constant"]},children:[{type:a,value:"stderr"}]},{type:b,tag:d,props:{className:[f,l]},children:[{type:a,value:$}]},{type:a,value:F},{type:b,tag:d,props:{className:[f,"string"]},children:[{type:a,value:"\"Error: %s\\n\""}]},{type:b,tag:d,props:{className:[f,l]},children:[{type:a,value:$}]},{type:a,value:F},{type:b,tag:d,props:{className:[f,L]},children:[{type:a,value:"glewGetErrorString"}]},{type:b,tag:d,props:{className:[f,l]},children:[{type:a,value:G}]},{type:a,value:"err"},{type:b,tag:d,props:{className:[f,l]},children:[{type:a,value:H}]},{type:b,tag:d,props:{className:[f,l]},children:[{type:a,value:H}]},{type:b,tag:d,props:{className:[f,l]},children:[{type:a,value:Z}]},{type:a,value:c},{type:b,tag:d,props:{className:[f,l]},children:[{type:a,value:"}"}]},{type:a,value:c}]}]}]},{type:a,value:c},{type:b,tag:D,props:{id:"glad-multi-language-vulkanglgleseglglxwgl-loader-generator"},children:[{type:b,tag:g,props:{href:"#glad-multi-language-vulkanglgleseglglxwgl-loader-generator",ariaHidden:h,tabIndex:i},children:[{type:b,tag:d,props:{className:[j,k]},children:[]}]},{type:a,value:"glad (Multi-Language Vulkan\u002FGL\u002FGLES\u002FEGL\u002FGLX\u002FWGL Loader-Generator)"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:E},{type:b,tag:g,props:{href:aa,rel:[o,p,q],target:r},children:[{type:a,value:aa}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"多言語対応のロードライブラリ"},{type:b,tag:"strong",props:{},children:[{type:a,value:"ジェネレータ"}]},{type:a,value:"です。ジェネレータというのはどういうことかと言うと、利用したい機能やプロファイル、APIバージョンなどを指定することで、使いたい機能のみを含んだロードライブラリを生成できるバックエンドであるということです。\nこのバックエンドのインターフェースはコマンドラインやWebサービスなど複数用意されており、利用したい手段を選んでローダーを生成することができます。\n以下の画像はgladのWebインターフェースで、各設定を簡単に選択できるようになっていることがわかります。\n"},{type:b,tag:ab,props:{alt:"DeepinScreenshot_select-area_20191216071639.png",src:"https:\u002F\u002Fqiita-image-store.s3.ap-northeast-1.amazonaws.com\u002F0\u002F225893\u002F0ac6b6d5-88d0-cf63-83d4-1d07715b90b0.png"},children:[]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"必要なものだけを選んでライブラリを生成することができるため、GLEWと比較してライブラリサイズが小さく軽量です。また、C\u002FC++以外の言語やOpenGL以外のGL系インターフェースへの対応も行なわれているため、そういった利用の場合にも便利です。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"今回の実装ではgladを利用します。"}]},{type:a,value:c},{type:b,tag:n,props:{id:P},children:[{type:b,tag:g,props:{href:"#contextwindow-toolkits-library",ariaHidden:h,tabIndex:i},children:[{type:b,tag:d,props:{className:[j,k]},children:[]}]},{type:a,value:Q}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"OpenGLはコンテキストを対象としてGPUを利用した処理を記述することができますが、コンテキスト自体の作成や、出来上がった画像をウィンドウとして画面に表示したりするところはサポートしてくれません。コンテキストの作成やウィンドウ表示\u002F管理、入出力などはOS固有の手法が必要とされるため、この部分でも補助ライブラリを利用することが推奨されています。"}]},{type:a,value:c},{type:b,tag:D,props:{id:ac},children:[{type:b,tag:g,props:{href:"#freeglut",ariaHidden:h,tabIndex:i},children:[{type:b,tag:d,props:{className:[j,k]},children:[]}]},{type:a,value:ac}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:E},{type:b,tag:g,props:{href:ad,rel:[o,p,q],target:r},children:[{type:a,value:ad}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"過去に主流だったGLUTというライブラリの後継で、ウィンドウ管理やキーボード\u002Fマウス入力などに対するサポートが含まれています。OpenGLコンテキストの生成にも対応しています。GLUTの後継であるというポリシーから、GLUTのインターフェースをあまり変えないように設計されています。GLUTから遡るとOpenGL自体と同じくらい歴史があり、情報が比較的豊富なようです。"}]},{type:a,value:c},{type:b,tag:D,props:{id:"glfw"},children:[{type:b,tag:g,props:{href:"#glfw",ariaHidden:h,tabIndex:i},children:[{type:b,tag:d,props:{className:[j,k]},children:[]}]},{type:a,value:ae}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:E},{type:b,tag:g,props:{href:af,rel:[o,p,q],target:r},children:[{type:a,value:af}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"GLUTよりも新しく、GLUTなど他のライブラリでの経験を踏まえて設計されています。Linux, macOS, Microsoft Windows, FreeBSD, NetBSD, OpenBSDに対応し、頻繁にアップデートされています。マウス\u002Fキーボードに加えてジョイスティック入力へのサポートなども存在しています。\nfreeglutと比較してコンテキスト作成により詳細な属性設定が可能であったり、イベントループの扱いの違いによってより低レイテンシな入力処理対応が可能であったりするようです。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"今回の実装ではGLFWを利用します。"}]},{type:a,value:c},{type:b,tag:"h1",props:{id:ag},children:[{type:b,tag:g,props:{href:"#%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89",ariaHidden:h,tabIndex:i},children:[{type:b,tag:d,props:{className:[j,k]},children:[]}]},{type:a,value:ag}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"さて、説明も終わって早速実装と行きたいところですが、まずは環境を作らなければなりません。以下では、今回使用するものについて簡単に触れます。"}]},{type:a,value:c},{type:b,tag:K,props:{id:A},children:[{type:b,tag:g,props:{href:"#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B%E3%82%82%E3%81%AE",ariaHidden:h,tabIndex:i},children:[{type:b,tag:d,props:{className:[j,k]},children:[]}]},{type:a,value:A}]},{type:a,value:c},{type:b,tag:n,props:{id:R},children:[{type:b,tag:g,props:{href:"#opengl%E6%9C%AC%E4%BD%93",ariaHidden:h,tabIndex:i},children:[{type:b,tag:d,props:{className:[j,k]},children:[]}]},{type:a,value:S}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"だいたい入ってるんじゃないかと思いますが、お使いの環境で利用可能な実装をインストールしてください。僕は今回NVIDIAのプロプライエタリドライバに含まれているOpenGL 4.6の実装を利用しています。古いデバイスをお使いの場合4.6が利用できない可能性がありますが、今回の記事では最新の拡張などは利用しないので3.x以上であれば問題ないと思われます。"}]},{type:a,value:c},{type:b,tag:n,props:{id:B},children:[{type:b,tag:g,props:{href:"#%E8%A3%9C%E5%8A%A9%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E7%B3%BB",ariaHidden:h,tabIndex:i},children:[{type:b,tag:d,props:{className:[j,k]},children:[]}]},{type:a,value:B}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"以下のものを利用します。"}]},{type:a,value:c},{type:b,tag:ah,props:{},children:[{type:a,value:c},{type:b,tag:s,props:{},children:[{type:a,value:"glad"}]},{type:a,value:c},{type:b,tag:s,props:{},children:[{type:a,value:ae}]},{type:a,value:c},{type:b,tag:s,props:{},children:[{type:a,value:"glm"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"上で説明した補助ライブラリに加えて、行列演算など数学系の処理を実装したライブラリであるglmも利用します。また、GLFWはご利用のディスプレイサーバに合ったものを選択するよう注意してください。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"GLFWとglmについては、僕はArch Linux公式のリポジトリからパッケージマネージャを用いてインストールしました。\ngladは各ディストロのリポジトリに存在しない可能性が高いためセットアップを説明します。\nまず、"},{type:b,tag:g,props:{href:"https:\u002F\u002Fglad.dav1d.de\u002F",rel:[o,p,q],target:r},children:[{type:a,value:"このサイト"}]},{type:a,value:"で以下のような設定を行なった上でGENERATEボタンを押すことで必要なものを含んだライブラリを生成することができます。プロファイルはコアプロファイルで固定ですが、OpenGLのバージョンについてはご自身の環境に合ったものを選択してください。僕と同じ環境で大丈夫な場合は、"},{type:b,tag:g,props:{href:"http:\u002F\u002Fglad.dav1d.de\u002F#profile=core&specification=gl&api=gl%3D4.6&api=gles1%3Dnone&api=gles2%3Dnone&api=glsc2%3Dnone&language=c&loader=on",rel:[o,p,q],target:r},children:[{type:a,value:"このパーマリンク"}]},{type:a,value:"から僕が生成したものと全く同じものにアクセスすることもできます。\n"},{type:b,tag:ab,props:{alt:"DeepinScreenshot_select-area_20191217222125.png",src:"https:\u002F\u002Fqiita-image-store.s3.ap-northeast-1.amazonaws.com\u002F0\u002F225893\u002F0c8ac0ee-e109-7f72-53ae-3121e334b339.png"},children:[]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"ファイルが生成されるとページが遷移し表示されるので、zipファイルをクリックしてダウンロードします。ダウンロードが完了したら、今回の開発で利用する作業ディレクトリをお好きなところに作成し、その直下にglad.zipを以下のように展開します。"}]},{type:a,value:c},{type:b,tag:t,props:{className:[u]},children:[{type:b,tag:v,props:{className:[w,I]},children:[{type:b,tag:x,props:{},children:[{type:a,value:"advent_gl\u002F\n└── glad\u002F\n    ├── include\u002F\n    └── src\u002F\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"以上です。この配置を前提にこの後CMakeのセットアップなどを行います。"}]},{type:a,value:c},{type:b,tag:n,props:{id:T},children:[{type:b,tag:g,props:{href:"#%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9%E3%83%93%E3%83%AB%E3%83%89%E3%83%84%E3%83%BC%E3%83%AB%E7%B3%BB",ariaHidden:h,tabIndex:i},children:[{type:b,tag:d,props:{className:[j,k]},children:[]}]},{type:a,value:U}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"適当に入れます。僕はArch Linux公式のリポジトリからパッケージマネージャを用いてインストールしました。今回の開発ではビルド等はCUIから行います。"}]},{type:a,value:c},{type:b,tag:ah,props:{},children:[{type:a,value:c},{type:b,tag:s,props:{},children:[{type:a,value:"CMake"}]},{type:a,value:c},{type:b,tag:s,props:{},children:[{type:a,value:"make"}]},{type:a,value:c},{type:b,tag:s,props:{},children:[{type:a,value:"gcc"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:K,props:{id:C},children:[{type:b,tag:g,props:{href:"#%E3%83%93%E3%83%AB%E3%83%89%E7%92%B0%E5%A2%83%E3%81%AE%E4%BD%9C%E6%88%90",ariaHidden:h,tabIndex:i},children:[{type:b,tag:d,props:{className:[j,k]},children:[]}]},{type:a,value:C}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"今回はCMakeを用いたビルド環境で開発を行います。CMakeについての細かい解説は行いませんので、わからなければ適時調べてください。"}]},{type:a,value:c},{type:b,tag:n,props:{id:V},children:[{type:b,tag:g,props:{href:"#cmakeliststxt%E3%81%AE%E4%BD%9C%E6%88%90",ariaHidden:h,tabIndex:i},children:[{type:b,tag:d,props:{className:[j,k]},children:[]}]},{type:a,value:W}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"CMakeを用いたビルドを行うため、CMakeLists.txtを作製します。また、gladはプロジェクトと一緒にソースからビルドを行う必要があるため、サブディレクトリとして専用のCMakeLists.txtを用意します。作業ディレクトリ内の構成は以下のようになります。"}]},{type:a,value:c},{type:b,tag:t,props:{className:[u]},children:[{type:b,tag:v,props:{className:[w,I]},children:[{type:b,tag:x,props:{},children:[{type:a,value:"advent_ogl\u002F\n├── CMakeLists.txt\n└── glad\u002F\n    ├── CMakeLists.txt\n    ├── include\u002F\n    └── src\u002F\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"追加した2つのCMakeLists.txtの内容は、以下に添付しておきます。このCMakeLists.txtは、作業ディレクトリ直下に配置されたmain.cppファイルを実行ファイルとしてビルドするように記述されています。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"まずはメインとなる、プロジェクトビルド用のCMakeLists.txtです。"}]},{type:a,value:c},{type:b,tag:t,props:{className:[u]},children:[{type:b,tag:v,props:{className:[w,I]},children:[{type:b,tag:x,props:{},children:[{type:a,value:"cmake_minimum_required(VERSION 3.12)\n\n# プロジェクト名の設定\nproject(advent_gl)\n\n# 必須ライブラリの存在チェック\nfind_package(glfw3 REQUIRED)\nfind_package(glm REQUIRED)\n\n# glad関係\ninclude_directories(glad\u002Finclude)\nadd_subdirectory(glad)\n\n# コンパイルオプション\nadd_compile_options(-O2 -Wall)\n\n# 実行ファイルの指定\nadd_executable(advent_gl main.cpp)\n\n# 実行ファイルにリンクするライブラリの指定\ntarget_link_libraries(advent_gl glad glfw glm ${CMAKE_DL_LIBS})\n\n# c++17を使う\nset_property(TARGET advent_gl PROPERTY CXX_STANDARD 17)\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"続いて、gladをライブラリとして認識させてリンクするためのCMakeLists.txtです。"}]},{type:a,value:c},{type:b,tag:t,props:{className:[u]},children:[{type:b,tag:v,props:{className:[w,I]},children:[{type:b,tag:x,props:{},children:[{type:a,value:"cmake_minimum_required(VERSION 3.12)\n\n# gladという名前でCMakeに認識させるライブラリを作成\n# 静的ライブラリとしてコンパイル。含まれるソースを指定。\nadd_library(glad STATIC\n    src\u002Fglad.c\n)\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"以上CMakeによるプロジェクトのセットアップです。大変シンプルですね。"}]}]},dir:"\u002Farticles\u002Fseries-opengl",path:ai,extension:".md",createdAt:aj,updatedAt:aj},path:ai,series:y,tags:[M]},"data-v-57c1c7e4:0":{prevTitle:"OpenGL入門から3DCGレンダラ実装まで その2",nextTitle:"OpenGL入門から3DCGレンダラ実装まで その4",existPrev:ak,existNext:ak,prevSlug:"\u002Fblog\u002Fseries-opengl--opengl-2",nextSlug:"\u002Fblog\u002Fseries-opengl--opengl-4",seriesTitle:y,seriesPage:""}},mutations:void 0}}("text","element","\n","span","p","token","a","true",-1,"icon","icon-link","punctuation",3,"h3","nofollow","noopener","noreferrer","_blank","li","div","nuxt-content-highlight","pre","line-numbers","code","OpenGL入門から3DCGレンダラ実装まで","補助ライブラリ","インストールするもの","補助ライブラリ系","ビルド環境の作成","h4","公式ページ: "," ","(",")","language-text",2,"h2","function","OpenGL","opengl-load-library","OpenGL Load Library","contextwindow-toolkits-library","Context\u002FWindow Toolkits Library","opengl本体","OpenGL本体","コンパイラビルドツール系","コンパイラ\u002Fビルドツール系","cmakeliststxtの作成","CMakeLists.txtの作成","http:\u002F\u002Fglew.sourceforge.net\u002F","operator",";","\n  ",",","https:\u002F\u002Fgithub.com\u002FDav1dde\u002Fglad","img","freeglut","http:\u002F\u002Ffreeglut.sourceforge.net\u002F","GLFW","https:\u002F\u002Fwww.glfw.org\u002F","環境構築","ul","\u002Farticles\u002Fseries-opengl\u002Fopengl-3","2021-10-06T11:06:03.000Z",true)));