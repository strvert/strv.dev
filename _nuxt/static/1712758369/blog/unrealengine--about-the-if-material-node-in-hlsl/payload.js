__NUXT_JSONP__("/blog/unrealengine--about-the-if-material-node-in-hlsl", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A){return {data:[{page:{slug:"about-the-if-material-node-in-hlsl",description:"UEのマテリアルのIfノードは、HLSLにおいてはどのような形で実現されているのかのメモ",title:"マテリアルのIfノードはHLSLでどう展開されるのか",tags:["Unreal Engine","UE Material","UE Tips"],assets:"\u002Farticle-assets\u002Funrealengine\u002Fabout-the-if-material-node-in-hlsl",toc:[{id:l,depth:m,text:l},{id:q,depth:m,text:r},{id:s,depth:m,text:t}],body:{type:"root",children:[{type:a,tag:n,props:{id:"前提シェーダープログラムは分岐に弱いらしい"},children:[{type:a,tag:e,props:{href:"#%E5%89%8D%E6%8F%90%E3%82%B7%E3%82%A7%E3%83%BC%E3%83%80%E3%83%BC%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%81%AF%E5%88%86%E5%B2%90%E3%81%AB%E5%BC%B1%E3%81%84%E3%82%89%E3%81%97%E3%81%84",ariaHidden:f,tabIndex:g},children:[{type:a,tag:h,props:{className:[i,j]},children:[]}]},{type:b,value:"前提:シェーダープログラムは分岐に弱いらしい"}]},{type:b,value:c},{type:a,tag:d,props:{},children:[{type:b,value:"シェーダープログラムは GPU で実行されます。GPU は CPU と比較すると、if などの命令パイプラインに分岐が入る命令が苦手なのは有名な話です。\n分岐が入ったプログラムでは、分岐の前後においてすべての実行コアが同じ命令を同じ時間実行していることが保証できなくなってしまい、SIMD のメリットを享受しにくくなってしまうためだと思います。"}]},{type:b,value:c},{type:a,tag:n,props:{id:"マテリアルの-if-ノードが気になる"},children:[{type:a,tag:e,props:{href:"#%E3%83%9E%E3%83%86%E3%83%AA%E3%82%A2%E3%83%AB%E3%81%AE-if-%E3%83%8E%E3%83%BC%E3%83%89%E3%81%8C%E6%B0%97%E3%81%AB%E3%81%AA%E3%82%8B",ariaHidden:f,tabIndex:g},children:[{type:a,tag:h,props:{className:[i,j]},children:[]}]},{type:b,value:"マテリアルの If ノードが気になる"}]},{type:b,value:c},{type:a,tag:d,props:{},children:[{type:b,value:"UE のマテリアルノードはシェーダーコンパイルの過程でノード → usf (unreal shader file) → HLSL → ... と変換されていき、最終的に各プラットフォームで利用可能な形式になります。\nところで、UE のマテリアルには If ノードがあります。前述の通り、If はシェーダープログラムにおいてボトルネックになりやすいポイントらしいのですが、マテリアルノードで配置した If はシェーダーコード上ではどういった形式になるのでしょうか"}]},{type:b,value:c},{type:a,tag:o,props:{id:l},children:[{type:a,tag:e,props:{href:"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%83%9E%E3%83%86%E3%83%AA%E3%82%A2%E3%83%AB",ariaHidden:f,tabIndex:g},children:[{type:a,tag:h,props:{className:[i,j]},children:[]}]},{type:b,value:l}]},{type:b,value:c},{type:a,tag:d,props:{},children:[{type:b,value:"今回は以下のようなマテリアルを対象として考えます。"}]},{type:b,value:c},{type:a,tag:d,props:{},children:[{type:a,tag:p,props:{alt:"sample material",src:"\u002Farticle-assets\u002Funrealengine\u002Fabout-the-if-material-node-in-hlsl\u002F\u002Fsample-material.jpg"},children:[]}]},{type:b,value:c},{type:a,tag:d,props:{},children:[{type:b,value:"極めて単純なマテリアルです。Base Color に If ノードを使った特に意味のない処理を接続しています。それ以外の値はデフォルト値のままです。"}]},{type:b,value:c},{type:a,tag:o,props:{id:q},children:[{type:a,tag:e,props:{href:"#%E7%94%9F%E6%88%90%E3%81%95%E3%82%8C%E3%81%9F-hlsl-%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E8%A6%8B%E3%81%A6%E3%81%BF%E3%82%8B",ariaHidden:f,tabIndex:g},children:[{type:a,tag:h,props:{className:[i,j]},children:[]}]},{type:b,value:r}]},{type:b,value:c},{type:a,tag:d,props:{},children:[{type:b,value:"マテリアルノードから生成された HLSL コードは、エディタの以下の位置から閲覧することができます。"}]},{type:b,value:c},{type:a,tag:d,props:{},children:[{type:a,tag:p,props:{alt:"show hlsl",src:"\u002Farticle-assets\u002Funrealengine\u002Fabout-the-if-material-node-in-hlsl\u002F\u002Fshow-hlsl.jpg"},children:[]}]},{type:b,value:c},{type:a,tag:d,props:{},children:[{type:a,tag:p,props:{alt:u,src:"\u002Farticle-assets\u002Funrealengine\u002Fabout-the-if-material-node-in-hlsl\u002F\u002Fhlsl-code.jpg"},children:[]}]},{type:b,value:c},{type:a,tag:d,props:{},children:[{type:b,value:"ただ、このウィンドウはコードを読むには表示上も機能上も全く適していないので、Copy ボタンからコードをコピーし、お好きなエディタ上で閲覧することをおすすめします。"}]},{type:b,value:c},{type:a,tag:o,props:{id:s},children:[{type:a,tag:e,props:{href:"#%E8%A9%B2%E5%BD%93%E9%83%A8%E3%81%AE-hlsl-%E3%82%B3%E3%83%BC%E3%83%89",ariaHidden:f,tabIndex:g},children:[{type:a,tag:h,props:{className:[i,j]},children:[]}]},{type:b,value:t}]},{type:b,value:c},{type:a,tag:v,props:{className:["code-extra"]},children:[{type:a,tag:v,props:{className:["filename"]},children:[{type:b,value:"hoge"}]},{type:a,tag:"pre",props:{},children:[{type:a,tag:u,props:{className:["language-hlsl"]},children:[{type:b,value:"void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)\n{\n    \u002F\u002F 略\n    MaterialFloat3 Local1 = ((abs(0.00000000 - 5.00000000) \u003E 0.00001000) ? (0.00000000 \u003E= 5.00000000 ? MaterialFloat3(1.00000000,0.00000000,0.00000000) : MaterialFloat3(0.00000000,0.00000000,1.00000000)) : MaterialFloat3(0.00000000,1.00000000,0.00000000));\n    \u002F\u002F 略\n    PixelMaterialInputs.BaseColor = Local1;\n    \u002F\u002F 略\n}"}]}]}]},{type:b,value:c},{type:a,tag:d,props:{},children:[{type:b,value:"省略しまくっていますが、今回の If ノードに対応する箇所は上記のコードのように実現されていました。見ると、素朴な条件演算子によって実現されていることがわかります。"}]},{type:b,value:c},{type:a,tag:d,props:{},children:[{type:b,value:"一般的に、シェーダープログラムにおいては条件演算子のほうが通常の If 文よりも高速であると言われます。\nIf 文は命令の流れ自体を切り替えてしまう(真の分岐)のに対して、条件演算子は条件式と、値として返すために引数として取った式のすべてを先に評価し、条件式の値に基づいて返す値を選択するという処理になる(ことが多い)ためです。\nこれであれば、実際には命令パイプライン上での分岐は発生していないため、値を得るための演算コストが分岐処理のコストを上回らない限りにおいては条件演算子が高速に動作します。"}]},{type:b,value:c},{type:a,tag:d,props:{},children:[{type:b,value:"非常に曖昧な書き方をしましたが、これはコンパイラの最適化なども考慮に入れれば、GPU 上での処理とコードの記述が常にこのように対応するとは限らないためです。\n少なくとも、単純な式を扱う条件演算子は前述のような挙動をすると考えて良いと思います。逆に、コンパイラの賢さにもよりますが、内部が非常に単純な If 文であれば、真の分岐は行わずに両方の分岐先を実行した上で値を選択する可能性もあります。"}]},{type:b,value:c},{type:a,tag:d,props:{},children:[{type:b,value:"この辺りについては、OpenGL Wiki によい記述がありましたのでよければご参照ください。(英語)"}]},{type:b,value:c},{type:a,tag:d,props:{},children:[{type:a,tag:e,props:{href:"https:\u002F\u002Fwww.khronos.org\u002Fopengl\u002Fwiki\u002FShader#Execution_model_and_divergence",rel:["nofollow","noopener","noreferrer"],target:"_blank"},children:[{type:b,value:"Shader#Execution model and divergence - OpenGL Wiki"}]}]},{type:b,value:c},{type:a,tag:"br",props:{},children:[]},{type:b,value:c},{type:a,tag:n,props:{id:w},children:[{type:a,tag:e,props:{href:"#%E3%81%BE%E3%81%A8%E3%82%81%E3%81%AE%E3%82%88%E3%81%86%E3%81%AA%E3%81%AA%E3%81%AB%E3%81%8B",ariaHidden:f,tabIndex:g},children:[{type:a,tag:h,props:{className:[i,j]},children:[]}]},{type:b,value:w}]},{type:b,value:c},{type:a,tag:d,props:{},children:[{type:b,value:"処理速度の話はプラットフォームごとのアーキテクチャやコンパイラの賢さによって複雑な場合分けが発生するためなんとも言えませんが、マテリアルの If ノードは条件演算子に展開されるということだけはわかりました。"}]}]},dir:"\u002Farticles\u002Funrealengine",path:x,extension:".md",createdAt:y,updatedAt:z,gitCreatedAt:y,gitUpdatedAt:z},path:x}],fetch:{"data-v-08b63208:0":{prevTitle:k,nextTitle:k,existPrev:A,existNext:A,prevSlug:k,nextSlug:k,seriesPage:k}},mutations:void 0}}("element","text","\n","p","a","true",-1,"span","icon","icon-link","","サンプルマテリアル",2,"h1","h2","img","生成された-hlsl-コードを見てみる","生成された HLSL コードを見てみる","該当部の-hlsl-コード","該当部の HLSL コード","code","div","まとめのようななにか","\u002Farticles\u002Funrealengine\u002Fabout-the-if-material-node-in-hlsl","2022-02-13T13:41:25.000Z","2022-02-13T13:48:20.000Z",false)));