__NUXT_JSONP__("/blog/unrealengine--support-user-defined-types-for-bp-operator-nodes-in-ue5", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_){return {data:[{page:{slug:"support-user-defined-types-for-bp-operator-nodes-in-ue5",description:"UE5で追加されたType promotion機能付き演算子ノードに、ユーザー定義型サポートを追加する方法について",title:"UE5のBP演算子ノードにユーザー定義型を対応させる",enforceCreatedAt:G,enforceUpdatedAt:G,tags:["Unreal Engine","Blueprint","Unreal C++","Unreal Engine 5"],assets:"\u002Farticle-assets\u002Funrealengine\u002Fsupport-user-defined-types-for-bp-operator-nodes-in-ue5",toc:[{id:H,depth:p,text:I},{id:x,depth:p,text:x},{id:y,depth:p,text:y},{id:z,depth:p,text:z},{id:J,depth:p,text:K},{id:A,depth:p,text:A},{id:L,depth:p,text:M}],body:{type:"root",children:[{type:b,tag:r,props:{id:N},children:[{type:b,tag:g,props:{href:"#%E3%81%BE%E3%81%88%E3%81%8C%E3%81%8D",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:N}]},{type:a,value:c},{type:b,tag:q,props:{id:H},children:[{type:b,tag:g,props:{href:"#ue5%E3%81%AE%E6%BC%94%E7%AE%97%E5%AD%90%E3%83%8E%E3%83%BC%E3%83%89%E3%81%A3%E3%81%A6%E3%81%AA%E3%81%AB",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:I}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"先日Early Accessが開始されたUE5には、仮想化されたジオメトリを扱うシステムであるNaniteや、動的かつ高度なライティングを行うLumenなど目を引く新機能が満載です。\nそんな華々しい機能の裏に隠れがちですが、同時に"},{type:b,tag:s,props:{},children:[{type:a,value:"ブループリントのType promotion"}]},{type:a,value:"というBlueprintに関する地味ながら便利な変更も追加されています。この変更は、これまでそれぞれの型ごとに別々のノードとして実装されていた各種演算子(Operator)ノードを、任意の型を演算可能な統一された演算子ノードで行えるようにするというものです。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"例えばUE4の時点では、加算に関するノードだけで以下のような状況になっていました。\n"},{type:b,tag:t,props:{alt:u,src:"\u002Farticle-assets\u002Funrealengine\u002Fsupport-user-defined-types-for-bp-operator-nodes-in-ue5\u002F\u002Fue4-operator-nodes.png"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"しかし、UE5以降では基本的な演算子ノードの入力ピンがすべてワイルドカードとなり、接続されたデータ型に対する加算処理を行うノードへと自動的に型をpromoteしてくれるようになったのです。\n"},{type:b,tag:t,props:{alt:u,src:"\u002Farticle-assets\u002Funrealengine\u002Fsupport-user-defined-types-for-bp-operator-nodes-in-ue5\u002F\u002Fue5-operator-node.png"},children:[]}]},{type:a,value:c},{type:b,tag:r,props:{id:O},children:[{type:b,tag:g,props:{href:"#%E7%B4%A0%E6%9C%B4%E3%81%AA%E7%96%91%E5%95%8F",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:O}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Type promotionは簡便かつ整理された状態を提供してくれる素晴らしい変更ですが、この仕様を見ると「"},{type:b,tag:s,props:{},children:[{type:a,value:"ユーザーが追加した演算可能なデータ型に対してUE5の演算子ノードは対応可能なのか？？"}]},{type:a,value:"」という疑問が湧いてきます。\nC++を用いてワイルドカードを入力として持つBPノードを実装するためには、UFUNCTIONにCustomThunk等のmeta指定子とThunk関数の実装を用いるか、K2_Nodeを継承した独自ノードをUFUNCTIONマクロを用いずに実装する必要があります。Type promotionを行うUE5の演算子ノードも同様に実装されていることは容易に推察ができますが、データ型に対する演算処理のように後からユーザーが追加する可能性があり、かつ内部処理が常に自動生成できるとは限らない処理をワイルドカード化して問題ないのでしょうか。"}]},{type:a,value:c},{type:b,tag:r,props:{id:P},children:[{type:b,tag:g,props:{href:"#%E8%AA%BF%E6%9F%BB%E7%B5%90%E6%9E%9C",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:P}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"エンジンのソースを追った結果、非常に簡単にユーザー定義型をUE5の演算子ノードで扱うことができることがわかりました。以下では、ユーザー定義型をUE5のType promotionに対応させるために踏まえるべき点を記載します。"}]},{type:a,value:c},{type:b,tag:q,props:{id:x},children:[{type:b,tag:g,props:{href:"#%E5%AF%BE%E8%B1%A1%E3%81%A8%E3%81%99%E3%82%8B%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:x}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"実装例を提示するため、以下のようなサンプルのデータ型を定義しました。このデータ型を複素数型と見做して、UE5の演算子ノードで複素数に定義されるいくつかの演算を実装してみます。"}]},{type:a,value:c},{type:b,tag:o,props:{className:[B]},children:[{type:b,tag:o,props:{className:[C]},children:[{type:a,value:"ComplexNumber.h"}]},{type:b,tag:D,props:{},children:[{type:b,tag:f,props:{className:[E]},children:[{type:a,value:"#pragma once\n#include \"ComplexNumber.generated.h\"\n\nUSTRUCT(BlueprintType)\nstruct FComplexNumber\n{\n\tGENERATED_BODY()\n\n\tFComplexNumber() : Real(0.0f), Imag(0.0f) {}\n\tFComplexNumber(const float Real, const float Imaginary) : Real(Real), Imag(Imaginary) {}\n\n\tUPROPERTY(BlueprintReadWrite, EditAnywhere)\n\tfloat Real;\n\n\tUPROPERTY(BlueprintReadWrite, EditAnywhere)\n\tfloat Imag;\n};"}]}]}]},{type:a,value:c},{type:b,tag:q,props:{id:y},children:[{type:b,tag:g,props:{href:"#%E5%AE%9F%E8%A3%85%E4%BE%8B",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:y}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"詳細な説明に先んじて、実装例を提示します。"}]},{type:a,value:c},{type:b,tag:o,props:{className:[B]},children:[{type:b,tag:o,props:{className:[C]},children:[{type:a,value:"ComplexNumberBlueprintLibrary.h"}]},{type:b,tag:D,props:{},children:[{type:b,tag:f,props:{className:[E]},children:[{type:a,value:"#pragma once\n\n#include \"CoreMinimal.h\"\n#include \"ComplexNumber.h\"\n#include \"ComplexNumberBlueprintLibrary.generated.h\"\n\nUCLASS()\nclass UComplexNumberBlueprintLibrary : public UBlueprintFunctionLibrary\n{\n\tGENERATED_BODY()\npublic:\n\n\t\u002F\u002F ---------演算の実装はここから-----------\n\n\t\u002F\u002F ComplexNumber + ComplexNumber (加算)\n\tUFUNCTION(BlueprintPure, meta=(DisplayName=\"ComplexNumber + ComplexNumber\", CompactNodeTitle=\"+\"), Category=\"ComplexNumber\")\n\tstatic FComplexNumber Add_ComplexNumberComplexNumber(const FComplexNumber A, const FComplexNumber B) { return FComplexNumber(A.Real + B.Real, A.Imag + B.Imag); }\n\n\t\u002F\u002F ComplexNumber - ComplexNumber (減算)\n\tUFUNCTION(BlueprintPure, meta=(DisplayName=\"ComplexNumber - ComplexNumber\", CompactNodeTitle=\"-\"), Category=\"ComplexNumber\")\n\tstatic FComplexNumber Subtract_ComplexNumberComplexNumber(const FComplexNumber A, const FComplexNumber B) { return FComplexNumber(A.Real - B.Real, A.Imag - B.Imag); }\n\n\t\u002F\u002F ComplexNumber * float (floatとの乗算)\n\tUFUNCTION(BlueprintPure, meta=(DisplayName=\"ComplexNumber * float\", CompactNodeTitle=\"*\"), Category=\"ComplexNumber\")\n\tstatic FComplexNumber Multiply_ComplexNumberFloat(const FComplexNumber A, const float B) { return FComplexNumber(A.Real * B, A.Imag * B); }\n\n\t\u002F\u002F ---------------ここまで---------------\n\n\t\u002F\u002F ToString\t(ComplexNumber)\n\tUFUNCTION(BlueprintPure, meta=(DisplayName = \"ToString (ComplexNumber)\", CompactNodeTitle=\"-\u003E\", BlueprintAutoCast), Category=\"ComplexNumber\")\n\tstatic FString ToString(const FComplexNumber In)\n\t{\n\t\treturn FString::Printf(TEXT(\"%.3f %s %.3fi\"),\n\t\t\t\tIn.Real,\n\t\t\t\tIn.Imag \u003C 0 ? TEXT(\"-\") : TEXT(\"+\"),\n\t\t\t\tFMath::Abs(In.Imag));\n\t}\n};\n"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"たったこれだけです。このコードをコンパイルすると、BPエディタにおいて"},{type:b,tag:s,props:{},children:[{type:a,value:"ComplexNumber同士の加算"}]},{type:a,value:Q},{type:b,tag:s,props:{},children:[{type:a,value:"ComplexNumber同士の減算"}]},{type:a,value:Q},{type:b,tag:s,props:{},children:[{type:a,value:"ComplexNumberとfloatの乗算"}]},{type:a,value:"が演算子ノードによって行えるようになります。"}]},{type:a,value:c},{type:b,tag:F,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"接続が許可されるようになって……\n"},{type:b,tag:t,props:{alt:u,src:"\u002Farticle-assets\u002Funrealengine\u002Fsupport-user-defined-types-for-bp-operator-nodes-in-ue5\u002F\u002Fcomplex-type-1.png"},children:[]},{type:a,value:"\n繋ぐとComplexNumberの加算ノードになる！\n"},{type:b,tag:t,props:{alt:u,src:"\u002Farticle-assets\u002Funrealengine\u002Fsupport-user-defined-types-for-bp-operator-nodes-in-ue5\u002F\u002Fcomplex-type-2.png"},children:[]}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"こうして演算子ノードと接続した際に行われる処理は、当然ながら先程示したコードで実装されていた関数の内部の処理に置き換わっています。"}]},{type:a,value:c},{type:b,tag:q,props:{id:z},children:[{type:b,tag:g,props:{href:"#%E5%AF%BE%E5%BF%9C%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E6%9D%A1%E4%BB%B6",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:z}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"なんと、UE5の演算子ノードのType promotionに対応するにあたって必要な点は以下の3つのみです。"}]},{type:a,value:c},{type:b,tag:"ul",props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"対象のデータ型に対して、"},{type:b,tag:f,props:{},children:[{type:a,value:"BlueprintPure"}]},{type:a,value:"を指定されたstaticなUFUNCTIONの実装がどこかに存在すること。"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"演算を実装したUFUNCTIONに戻り値が存在すること。"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"演算を実装したUFUNCTIONの名前が"},{type:b,tag:f,props:{},children:[{type:a,value:"[演算名Prefix]_"}]},{type:a,value:"で始まること。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:F,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:R}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"必要となる"},{type:b,tag:f,props:{},children:[{type:a,value:"演算名Prefix"}]},{type:a,value:"については次節で触れます。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"先の実装についていたその他の指定子などは、全て細かなノードの見た目やカテゴリ表示に関するものであり、Type promotionとは一切関係がありません。条件を満たしたUFUNCTIONが存在するだけで、勝手にBPエディタがその存在を認識して、演算子ノードが処理の呼び分けを行ってくれるようになるのです。"}]},{type:a,value:c},{type:b,tag:q,props:{id:J},children:[{type:b,tag:g,props:{href:"#type-promotion%E3%81%8C%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%99%E3%82%8B%E6%BC%94%E7%AE%97",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:K}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"以下に、Type promotionがサポートする演算と、その実装をするために必要なUFUNCTIONのPrefixとなる演算名の対応表を示します。"}]},{type:a,value:"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{type:b,tag:"table",props:{},children:[{type:b,tag:"thead",props:{},children:[{type:b,tag:m,props:{},children:[{type:b,tag:S,props:{},children:[{type:a,value:"演算"}]},{type:b,tag:S,props:{},children:[{type:a,value:"Prefix"}]}]}]},{type:b,tag:"tbody",props:{},children:[{type:b,tag:m,props:{},children:[{type:b,tag:e,props:{},children:[{type:a,value:"+"}]},{type:b,tag:e,props:{},children:[{type:a,value:"Add"}]}]},{type:b,tag:m,props:{},children:[{type:b,tag:e,props:{},children:[{type:a,value:"*"}]},{type:b,tag:e,props:{},children:[{type:a,value:"Multiply"}]}]},{type:b,tag:m,props:{},children:[{type:b,tag:e,props:{},children:[{type:a,value:"-"}]},{type:b,tag:e,props:{},children:[{type:a,value:"Subtract"}]}]},{type:b,tag:m,props:{},children:[{type:b,tag:e,props:{},children:[{type:a,value:"\u002F"}]},{type:b,tag:e,props:{},children:[{type:a,value:"Divide"}]}]},{type:b,tag:m,props:{},children:[{type:b,tag:e,props:{},children:[{type:a,value:"\u003E"}]},{type:b,tag:e,props:{},children:[{type:a,value:"Greater"}]}]},{type:b,tag:m,props:{},children:[{type:b,tag:e,props:{},children:[{type:a,value:"\u003E="}]},{type:b,tag:e,props:{},children:[{type:a,value:"GreaterEqual"}]}]},{type:b,tag:m,props:{},children:[{type:b,tag:e,props:{},children:[{type:a,value:"\u003C"}]},{type:b,tag:e,props:{},children:[{type:a,value:"Less"}]}]},{type:b,tag:m,props:{},children:[{type:b,tag:e,props:{},children:[{type:a,value:"\u003C="}]},{type:b,tag:e,props:{},children:[{type:a,value:"LessEqual"}]}]},{type:b,tag:m,props:{},children:[{type:b,tag:e,props:{},children:[{type:a,value:"!="}]},{type:b,tag:e,props:{},children:[{type:a,value:"NotEqual"}]}]},{type:b,tag:m,props:{},children:[{type:b,tag:e,props:{},children:[{type:a,value:"=="}]},{type:b,tag:e,props:{},children:[{type:a,value:"EqualEqual"}]}]}]}]},{type:a,value:c},{type:b,tag:F,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:R}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"このPrefixをUFUNCTIONの関数名の頭に付加することで、対応する演算の実装として認識してもらうことが出来ます。簡単ですね！"}]},{type:a,value:c},{type:b,tag:r,props:{id:T},children:[{type:b,tag:g,props:{href:"#%E3%81%8A%E3%81%BE%E3%81%91",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:T}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"簡単に動くのはいいですが、一体どんな仕組みで動いているのか気になってしまうと思いますので、少し見てみましょう。"}]},{type:a,value:c},{type:b,tag:q,props:{id:A},children:[{type:b,tag:g,props:{href:"#%E3%81%A9%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%E5%AE%9F%E8%A3%85%E3%82%92%E5%8F%8E%E9%9B%86%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%AE%E3%81%8B",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:A}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"実装を覗くと、この部分はなかなかのパワー的処理によって実現されています。以下はエンジンのソースコードからの抜粋です。"}]},{type:a,value:c},{type:b,tag:o,props:{className:[B]},children:[{type:b,tag:o,props:{className:[C]},children:[{type:a,value:"BlueprintTypePromotion.cpp(抜粋)"}]},{type:b,tag:D,props:{},children:[{type:b,tag:f,props:{className:[E]},children:[{type:a,value:"void FTypePromotion::CreateOpTable()\n{\n\tTRACE_CPUPROFILER_EVENT_SCOPE(FTypePromotion::CreateOpTable);\n\tconst UEdGraphSchema_K2* Schema = GetDefault\u003CUEdGraphSchema_K2\u003E();\n\n\tOperatorTable.Empty();\n\n\tTArray\u003CUClass*\u003E Libraries;\n\tGetDerivedClasses(UBlueprintFunctionLibrary::StaticClass(), Libraries);\n\tfor (UClass* Library : Libraries)\n\t{\n\t\t\u002F\u002F Ignore abstract libraries\u002Fclasses\n\t\tif (!Library || Library-\u003EHasAnyClassFlags(CLASS_Abstract))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (UFunction* Function : TFieldRange\u003CUFunction\u003E(Library, EFieldIteratorFlags::ExcludeSuper, EFieldIteratorFlags::ExcludeDeprecated))\n\t\t{\n\t\t\tif(!IsPromotableFunction(Function))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tFEdGraphPinType FuncPinType;\n\t\t\tFName OpName = GetOpNameFromFunction(Function);\n\n\t\t\tif (OpName != OperatorNames::NoOp && Schema-\u003EConvertPropertyToPinType(Function-\u003EGetReturnProperty(), \u002F* out *\u002F FuncPinType))\n\t\t\t{\n\t\t\t\tAddOpFunction(OpName, Function);\n\t\t\t}\n\t\t}\n\t}\n}"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"この"},{type:b,tag:f,props:{},children:[{type:a,value:U}]},{type:a,value:"というメソッドが何をしているかをざっくりまとめると、以下のようになります。"}]},{type:a,value:c},{type:b,tag:V,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:b,tag:f,props:{},children:[{type:a,value:"UBlueprintFunctionLibrary"}]},{type:a,value:"を継承しているすべてのUClassを取得して配列に詰める。"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"UClassの配列をループして走査しながら、それぞれのUClassが持っているUFUNCTIONを走査する。"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"前述の3つの条件を満たすUFUNCTIONが現れたら、それを演算子ノードの実装に利用可能であると見做してルックアップテーブルに詰める！"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"パワーを感じます。パワーです。とてもメタメタしています。楽しいですね。\nなお、この"},{type:b,tag:f,props:{},children:[{type:a,value:U}]},{type:a,value:"メソッドは、所属している"},{type:b,tag:f,props:{},children:[{type:a,value:"FTypePromotion"}]},{type:a,value:"クラスのコンストラクタで呼び出されている他、エンジンのモジュール構成に変化があったとき(ホットリロード時など)に呼び出されるようになっています。"}]},{type:a,value:c},{type:b,tag:q,props:{id:L},children:[{type:b,tag:g,props:{href:"#%E3%81%AA%E3%81%9C%E6%9C%AC%E6%9D%A5%E3%81%AE%E5%AE%9F%E8%A3%85%E3%83%8E%E3%83%BC%E3%83%89%E3%81%8Cbp%E3%81%AE%E3%83%A1%E3%83%8B%E3%83%A5%E3%83%BC%E3%81%AB%E7%8F%BE%E3%82%8C%E3%81%AA%E3%81%84%E3%81%8B",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:M}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"先程の実装例のUFUNCTIONは、ここまで述べてきたUE5以降のType promotionシステムの知識を無いものとして考えると、ただのBPから利用可能なUFUNCTION定義です。つまり、従来の考え方からするとそれ自体もBPのノードリストに登録されていなければおかしいはずです。しかし、実際にはそうなっておらず、「"},{type:b,tag:f,props:{},children:[{type:a,value:"ComplexNumber"}]},{type:a,value:"用の演算ノード」は現れなくなっています。以下の画像のように、統合されたものしか表示されません。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:t,props:{alt:u,src:"\u002Farticle-assets\u002Funrealengine\u002Fsupport-user-defined-types-for-bp-operator-nodes-in-ue5\u002F\u002Fquestion.png"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"これは、以下の部分のエンジンコードを見るとわかります。このメソッドは長いため、今回の内容にとって重要ではない場所は省いています。"}]},{type:a,value:c},{type:b,tag:o,props:{className:[B]},children:[{type:b,tag:o,props:{className:[C]},children:[{type:a,value:"BlueprintFunctionNodeSpawner.cpp"}]},{type:b,tag:D,props:{},children:[{type:b,tag:f,props:{className:[E]},children:[{type:a,value:"UBlueprintFunctionNodeSpawner* UBlueprintFunctionNodeSpawner::Create(UFunction const* const Function, UObject* Outer\u002F* = nullptr*\u002F)\n{\n    \u002F\u002F 略\n\tbool const bIsPromotableFunction = TypePromoDebug::IsTypePromoEnabled() && FTypePromotion::IsFunctionPromotionReady(Function);\n\n\tTSubclassOf\u003CUK2Node_CallFunction\u003E NodeClass;\n\tif (bIsPromotableFunction)\n\t{\n\t\tNodeClass = UK2Node_PromotableOperator::StaticClass();\n\t}\n    \u002F\u002F 略\n\telse\n\t{\n\t\tNodeClass = UK2Node_CallFunction::StaticClass();\n\t}\n\n\treturn Create(NodeClass, Function, Outer);\n}\n\n\nUBlueprintFunctionNodeSpawner* UBlueprintFunctionNodeSpawner::Create(TSubclassOf\u003CUK2Node_CallFunction\u003E NodeClass, UFunction const* const Function, UObject* Outer\u002F* = nullptr*\u002F)\n{\n    \u002F\u002F 略\n\n\tbool const bIsPromotableFunction =\n\t\tTypePromoDebug::IsTypePromoEnabled() &&\n\t\tFTypePromotion::IsFunctionPromotionReady(Function);\n\n\tFName OpName = FTypePromotion::GetOpNameFromFunction(Function);\n\n\t\u002F\u002F If a spawner for this operator has been created already, than just return that\n\tif (bIsPromotableFunction && FTypePromotion::IsOperatorSpawnerRegistered(Function))\n\t{\n\t\tif (UBlueprintFunctionNodeSpawner* OpSpawner = FTypePromotion::GetOperatorSpawner(OpName))\n\t\t{\n\t\t\treturn OpSpawner;\n\t\t}\n\t}\n\n\tUBlueprintFunctionNodeSpawner* NodeSpawner = NewObject\u003CUBlueprintFunctionNodeSpawner\u003E(Outer);\n\tNodeSpawner-\u003ESetField(const_cast\u003CUFunction*\u003E(Function));\n\n    \u002F\u002F 略\n\n\tFBlueprintActionUiSpec& MenuSignature = NodeSpawner-\u003EDefaultMenuSignature;\n\n\tif(bIsPromotableFunction)\n\t{\n\t\tMenuSignature.MenuName = FTypePromotion::GetUserFacingOperatorName(OpName);\n\t\tMenuSignature.Category = LOCTEXT(\"UtilityOperatorCategory\", \"Utilities|Operators\");\n\t\t\u002F\u002F Possibly generate some special tooltips for promotable operators?\n\t\tMenuSignature.Tooltip = FTypePromotion::GetUserFacingOperatorName(OpName);\n\t\tMenuSignature.Keywords = FTypePromotion::GetKeywordsForOperator(OpName);\n\t\tFTypePromotion::RegisterOperatorSpawner(OpName, NodeSpawner);\n\t}\n\telse\n\t{\n\t\tMenuSignature.MenuName = UK2Node_CallFunction::GetUserFacingFunctionName(Function);\n\t\tMenuSignature.Category = UK2Node_CallFunction::GetDefaultCategoryForFunction(Function, FText::GetEmpty());\n\t\tMenuSignature.Tooltip = FText::FromString(UK2Node_CallFunction::GetDefaultTooltipForFunction(Function));\n\t\t\u002F\u002F add at least one character, so that PrimeDefaultUiSpec() doesn't attempt to query the template node\n\t\tMenuSignature.Keywords = UK2Node_CallFunction::GetKeywordsForFunction(Function);\n\t}\n\n    \u002F\u002F 略\n\n\treturn NodeSpawner;\n}"}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"このコードには2つの"},{type:b,tag:f,props:{},children:[{type:a,value:v}]},{type:a,value:"というメソッドのオーバーロード定義が含まれており、上の"},{type:b,tag:f,props:{},children:[{type:a,value:v}]},{type:a,value:"の定義の最終行で下の"},{type:b,tag:f,props:{},children:[{type:a,value:v}]},{type:a,value:"を呼び出してもいるという構造になっています。\nこれらはBPエディタで右クリックした際に表示されるノードリスト(など)で利用される情報を作成するメソッドです。作成される情報の内容には、名前やTooltipなどの表示情報のほか、ユーザーによってそのリストからノードが選択されたときにエディタ上に実際にノードをSpawnさせるためのSpawnerオブジェクトなどが含まれます。BPエディタが初期化・変更されるなどして全体のリフレッシュ処理が実行されると、BPエディタは存在するすべてのUClassを走査して、それらが持っているAction(エディタからアクセス可能なUPropertyやUFunction、そしてそれらが持っている表示情報や利用時の処理など……)を収集します。その処理の流れの中で、UFunctionに関するものの一部はこの"},{type:b,tag:f,props:{},children:[{type:a,value:v}]},{type:a,value:"メソッドのところにUFunctionに関する情報を作成させ、取得しにやってくるのです。このとき呼ばれるのは、上の方の"},{type:b,tag:f,props:{},children:[{type:a,value:v}]},{type:a,value:"の定義からになります。この前提のもとにこの処理をまとめると、以下のようになります。"}]},{type:a,value:c},{type:b,tag:V,props:{},children:[{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"あるUFunctionが渡されてくる。Type promotionが有効化されていて、かつ受け取ったUFunctionがType promotionの条件を満たしてる場合、SpawnするBPノードのクラスを問答無用でUK2Node_PromotableOperatorノードにする。UK2Node_PromotableOperatorノードは統合後の演算子ノードの実装クラスである。"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"また、同じく受け取ったUFunctionが条件を満たしている場合、作成するActionの情報もUFunctionのものは直接利用せず、受け取ったUFunctionが「定義している演算が属する」演算の名前や表示名、検索キーワードが設定される。この時に作成された情報やSpawnerは登録される。"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"再び、データ型は違うが属する演算は同じUFunctionが渡されてきたとする(例えば、Add_IntIntとAdd_FloatFloatはデータ型は違うがAdd演算に属する定義)。すると、登録処理の前に既に同じ演算のUK2Node_PromotableOperatorノードが登録されていることが検出され、新規に情報を作成するのではなく既に登録した情報を返すようになる。"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:"結果として、「ある演算に対して１つも実装が存在しないと、UE5のType promotionする演算子ノードも一つも存在しない。」「ある演算に対して１つ以上の実装が存在すると、それらに共通する演算子ノードが１つだけ登録される」という処理となる。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:r,props:{id:W},children:[{type:b,tag:g,props:{href:"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:W}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"楽しい機能で大変良いですね。正直、はじめは新たなmeta指定子でも追加されたんだろうと思って実装を見始めたのですが、一切プリプロセスに変更を加えないで対応していて面白かったです。長くなりそうで面倒だったので触れませんでしたが、UK2Node_PromotableOperatorノードが行っている、収集した関数の実装から、渡されてきたピンの型情報に最も合致する関数を探し出す処理などもこの機能の根幹を占めている部分ですので、興味があれば実装を読んでみると面白いと思います。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"ところで、こういう方面進めるなら、はやく部分的にでもUFUNCTIONをtemplateに対応させてくれないかなあという個人的な気持ちがあります。みなさんでこのPRを応援しましょう(他人任せ)。\n"},{type:b,tag:g,props:{href:X,rel:["nofollow","noopener","noreferrer"],target:"_blank"},children:[{type:a,value:X}]}]}]},dir:"\u002Farticles\u002Funrealengine",path:Y,extension:".md",createdAt:Z,updatedAt:Z,gitCreatedAt:"2021-11-25T19:56:59.000Z",gitUpdatedAt:"2022-01-29T00:45:39.000Z"},path:Y}],fetch:{"data-v-08b63208:0":{prevTitle:w,nextTitle:w,existPrev:_,existNext:_,prevSlug:w,nextSlug:w,seriesPage:w}},mutations:void 0}}("text","element","\n","p","td","code","a","true",-1,"span","icon","icon-link","tr","li","div",2,"h2","h1","strong","img","image.png","Create","","対象とするデータ型","実装例","対応のための条件","どうやって実装を収集しているのか","code-extra","filename","pre","language-cpp","blockquote","2021\u002F6\u002F8","ue5の演算子ノードってなに","UE5の演算子ノードってなに？","type-promotionがサポートする演算","Type promotionがサポートする演算","なぜ本来の実装ノードがbpのメニューに現れないか","なぜ本来の実装ノードがBPのメニューに現れないか","まえがき","素朴な疑問","調査結果","、","参考: Engine\\Source\\Editor\\BlueprintGraph\\Private\\BlueprintTypePromotion.cpp","th","おまけ","CreateOpTable","ol","おわりに","https:\u002F\u002Fgithub.com\u002FEpicGames\u002FUnrealEngine\u002Fpull\u002F6902","\u002Farticles\u002Funrealengine\u002Fsupport-user-defined-types-for-bp-operator-nodes-in-ue5","2021-06-08T00:00:00.000Z",false)));