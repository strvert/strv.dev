__NUXT_JSONP__("/blog/unrealengine--the-process-to-start-building-with-the-unreal-build-tool-in-ue4", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw,ax,ay,az,aA,aB,aC,aD,aE,aF,aG,aH,aI,aJ,aK,aL,aM,aN,aO,aP,aQ,aR,aS,aT,aU,aV,aW,aX,aY,aZ,a_){return {data:[{page:{slug:"the-process-to-start-building-with-the-unreal-build-tool-in-ue4",description:"UBTが各種ビルドモードを開始するまでにしていることについて調べたやつ",title:"UE4のUnreal Build Toolのビルド開始までの流れについて",enforceCreatedAt:"2019\u002F6\u002F14",enforceUpdatedAt:"2019\u002F6\u002F15",tags:["Unreal Engine","Unreal Build Tool"],toc:[{id:T,depth:2,text:T},{id:U,depth:V,text:U},{id:W,depth:V,text:W},{id:X,depth:V,text:X},{id:Y,depth:V,text:Y}],body:{type:"root",children:[{type:b,tag:N,props:{id:at},children:[{type:b,tag:v,props:{ariaHidden:w,href:"#%E6%A6%82%E8%A6%81",tabIndex:x},children:[{type:b,tag:c,props:{className:[y,z]},children:[]}]},{type:a,value:at}]},{type:a,value:f},{type:b,tag:l,props:{},children:[{type:a,value:"別の UE4 のリフレクションについての記事を調べながら書こうとしていたのですが、ビルドツール周りについての項で既に肥大化しそうだったので別記事にすることにしました。"}]},{type:a,value:f},{type:b,tag:l,props:{},children:[{type:a,value:"ここに書いてあるのはビルドツール全体の話ではなく、ビルドツールがビルドを開始するまでの流れと概要についてのメモです。"}]},{type:a,value:f},{type:b,tag:N,props:{id:au},children:[{type:b,tag:v,props:{ariaHidden:w,href:"#%E7%92%B0%E5%A2%83",tabIndex:x},children:[{type:b,tag:c,props:{className:[y,z]},children:[]}]},{type:a,value:au}]},{type:a,value:f},{type:b,tag:"ul",props:{},children:[{type:a,value:f},{type:b,tag:av,props:{},children:[{type:a,value:"Unreal Engine 4.22.2"}]},{type:a,value:f},{type:b,tag:av,props:{},children:[{type:a,value:"Windows 10"}]},{type:a,value:f}]},{type:a,value:f},{type:b,tag:l,props:{},children:[{type:a,value:"文章中にソースコードの行数や関数・変数名等が登場しますが、これらは上述の環境におけるものですので、他の環境においては変動する可能性があります。"}]},{type:a,value:f},{type:b,tag:N,props:{id:"unreal-build-tool-ubt"},children:[{type:b,tag:v,props:{ariaHidden:w,href:"#unreal-build-tool-ubt",tabIndex:x},children:[{type:b,tag:c,props:{className:[y,z]},children:[]}]},{type:a,value:"Unreal Build Tool (UBT)"}]},{type:a,value:f},{type:b,tag:l,props:{},children:[{type:a,value:"UE4 には独自のビルドツールが搭載されており、このビルドツールがいろいろやってくれていることで UE4 上での C++コーディングがとても楽になっています。例えば、UE4 で C++を使って実装したアクタのプロパティがエンジンの詳細パネルからアクセスできたり、BP 上で関数が呼び出せたりといったような機能はこのビルドツール(と、Unreal Header Tools)があるおかげです。\nそもそも UnrealC++の構文機能は C++の標準機能を飛び出しているので、こいつが前処理してくれないとコンパイルにかけることすらできません。\nまあそんなすごいことをやっているビルドツール(笑)なので、単にビルド設定をしているとかファイルを管理してるとか以上のことをやっており、ここの中身を少しでも知っておけばいろいろ楽なんじゃなかろうかと思うわけです。"}]},{type:a,value:f},{type:b,tag:N,props:{id:aw},children:[{type:b,tag:v,props:{ariaHidden:w,href:"#%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97%E3%82%92%E8%BF%BD%E3%81%A3%E3%81%A6%E3%81%84%E3%81%8F",tabIndex:x},children:[{type:b,tag:c,props:{className:[y,z]},children:[]}]},{type:a,value:aw}]},{type:a,value:f},{type:b,tag:l,props:{},children:[{type:a,value:"まず、UBT のソースコードはエンジンがインストールされているディレクトリから"}]},{type:a,value:f},{type:b,tag:r,props:{className:[A]},children:[{type:b,tag:t,props:{className:[ax]},children:[{type:b,tag:g,props:{className:[ax]},children:[{type:a,value:"Engine\\Source\\Programs\\UnrealBuildTool"}]}]}]},{type:a,value:f},{type:b,tag:l,props:{},children:[{type:a,value:"と辿っていくと見つかります。ここには何やらいろんなディレクトリがあり、それぞれの中にも大量のコードがあります。"}]},{type:a,value:f},{type:b,tag:r,props:{className:[A]},children:[{type:b,tag:t,props:{className:[Z]},children:[{type:b,tag:g,props:{className:[Z]},children:[{type:a,value:"UnrealBuildTool\n|-- Configuration\n|-- DotNetCore\n|-- Executors\n|-- Modes\n|-- Platform\n|-- ProjectFiles\n|-- Properties\n|-- System\n|-- ToolChain\n|-- UnrealBuildTool.cs\n|-- UnrealBuildTool.csproj\n|-- app.config\n`-- app.manifest\n"}]}]}]},{type:a,value:f},{type:b,tag:"h2",props:{id:T},children:[{type:b,tag:v,props:{ariaHidden:w,href:"#%E3%82%A8%E3%83%B3%E3%83%88%E3%83%AA%E3%83%BC%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88",tabIndex:x},children:[{type:b,tag:c,props:{className:[y,z]},children:[]}]},{type:a,value:T}]},{type:a,value:f},{type:b,tag:l,props:{},children:[{type:a,value:"UBT のエントリーポイントは、UBT のコードがあるディレクトリにある"},{type:b,tag:g,props:{},children:[{type:a,value:ay}]},{type:a,value:"内の Main 関数です。\nそれなりに長いので、ビルドに直接関係しそうなところだけ抜き出して、コメントを翻訳・追記してみます。\nかなり削っているので、いろんなオプション機能や例外処理、パフォーマンス計測用のコードが消えています。ご注意ください。"}]},{type:a,value:f},{type:b,tag:r,props:{className:[ai]},children:[{type:b,tag:r,props:{className:[aj]},children:[{type:a,value:"UnreaalBuildTool.csのMain関数"}]},{type:b,tag:t,props:{},children:[{type:b,tag:g,props:{className:[q]},children:[{type:a,value:"\t\tprivate static int Main(string[] ArgumentsArray)\n\t\t{\n\t\t\t\u002F\u002F Mutex保持用変数\n\t\t\tSingleInstanceMutex Mutex = null;\n\n            \u002F\u002F コマンドライン引数をパース\n            CommandLineArguments Arguments = new CommandLineArguments(ArgumentsArray);\n\n            \u002F\u002F グローバル設定をパース\n            GlobalOptions Options = new GlobalOptions(Arguments);\n\n            \u002F\u002F ビルドを行うディレクトリを Engine\u002FSource に変更します。\n            DirectoryReference.SetCurrentDirectory(UnrealBuildTool.EngineSourceDirectory);\n\n            \u002F\u002Fビルド設定とビルド管理を保持するクラスの型情報を取得\n            Type ModeType = typeof(BuildMode);\n\n            \u002F\u002F 動作モードの指定がされていた場合、動作モードに該当するクラスを探索して型情報をModeTypeに格納する\n            if(Options.Mode != null)\n            {\n                \u002F\u002F すべての有効なモードを探索\n                Dictionary\u003Cstring, Type\u003E ModeNameToType = new Dictionary\u003Cstring, Type\u003E(StringComparer.OrdinalIgnoreCase);\n                foreach(Type Type in Assembly.GetExecutingAssembly().GetTypes())\n                {\n                    if(Type.IsClass && !Type.IsAbstract && Type.IsSubclassOf(typeof(ToolMode)))\n                    {\n                        ToolModeAttribute Attribute = Type.GetCustomAttribute\u003CToolModeAttribute\u003E();\n                        ModeNameToType.Add(Attribute.Name, Type);\n                    }\n                }\n                \u002F\u002F モードの設定を行う\n                ModeNameToType.TryGetValue(Options.Mode, out ModeType)\n            }\n\n            \u002F\u002F ビルドモードクラスの属性に設定されているオプションを取得\n            ToolModeOptions ModeOptions = ModeType.GetCustomAttribute\u003CToolModeAttribute\u003E().Options;\n\n            \u002F\u002F エンジンのコンテンツ(ソースコードなど)のプリフェッチ(事前読み込み)オプションが有効化されていれば開始\n            if((ModeOptions & ToolModeOptions.StartPrefetchingEngine) != 0)\n            {\n                FileMetadataPrefetch.QueueEngineDirectory();\n            }\n\n            \u002F\u002F XMLの設定ファイル読み込みが有効化されていれば読み込み\n            if((ModeOptions & ToolModeOptions.XmlConfig) != 0)\n            {\n                string XmlConfigMutexName = SingleInstanceMutex.GetUniqueMutexForPath(\"UnrealBuildTool_Mutex_XmlConfig\", Assembly.GetExecutingAssembly().CodeBase);\n                using(SingleInstanceMutex XmlConfigMutex = new SingleInstanceMutex(XmlConfigMutexName, true))\n                {\n                    FileReference XmlConfigCache = Arguments.GetFileReferenceOrDefault(\"-XmlConfigCache=\", null);\n                    XmlConfig.ReadConfigFiles(XmlConfigCache);\n                }\n            }\n\n            \u002F\u002F SingleInstance(コードに対して複数のビルドが同時実行できない設定)が有効になっていれば、Mutexを設定\n            if((ModeOptions & ToolModeOptions.SingleInstance) != 0 && !Options.bNoMutex)\n            {\n                string MutexName = SingleInstanceMutex.GetUniqueMutexForPath(\"UnrealBuildTool_Mutex\", Assembly.GetExecutingAssembly().CodeBase);\n                Mutex = new SingleInstanceMutex(MutexName, Options.bWaitMutex);\n            }\n\n            \u002F\u002F すべてのプラットフォームに対してのビルドを登録する場合としない場合の設定\n            if((ModeOptions & ToolModeOptions.BuildPlatforms) != 0)\n            {\n                UEBuildPlatform.RegisterPlatforms(false);\n            }\n            if((ModeOptions & ToolModeOptions.BuildPlatformsForValidation) != 0)\n            {\n                UEBuildPlatform.RegisterPlatforms(true);\n            }\n\n            \u002F\u002F 設定されたモードから適切なハンドラを生成\n            ToolMode Mode = (ToolMode)Activator.CreateInstance(ModeType);\n\n            \u002F\u002F ハンドラに設定されたモードを実行\n            int Result = Mode.Execute(Arguments);\n\n            \u002F\u002F ビルド所要時間の表示が有効であれば表示\n            if((ModeOptions & ToolModeOptions.ShowExecutionTime) != 0)\n            {\n\t            \u002F\u002F 表示用コード　省略\n            }\n\n            return Result;\n\t\t}"}]}]}]},{type:a,value:f},{type:b,tag:l,props:{},children:[{type:a,value:"これがビルドツールのエントリーポイントです。もう少し詳しく見ていきます。"}]},{type:a,value:f},{type:b,tag:_,props:{id:U},children:[{type:b,tag:v,props:{ariaHidden:w,href:"#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E5%BC%95%E6%95%B0%E3%81%AE%E3%83%91%E3%83%BC%E3%82%B9",tabIndex:x},children:[{type:b,tag:c,props:{className:[y,z]},children:[]}]},{type:a,value:U}]},{type:a,value:f},{type:b,tag:l,props:{},children:[{type:a,value:"まず、コマンドライン引数のパース部です。ここに関してはやってることはそのままですね。"}]},{type:a,value:f},{type:b,tag:r,props:{className:[A]},children:[{type:b,tag:t,props:{className:[q]},children:[{type:b,tag:g,props:{className:[q]},children:[{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:"\u002F\u002F コマンドライン引数をパース"}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:O}]},{type:a,value:" Arguments "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:B}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:$}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,k,aa]},children:[{type:a,value:O}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"ArgumentsArray"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:"\n\n       "},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:"\u002F\u002F グローバル設定をパース"}]},{type:a,value:az},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:L}]},{type:a,value:" Options "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:B}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:$}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,k,aa]},children:[{type:a,value:L}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:aA},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:l,props:{},children:[{type:b,tag:g,props:{},children:[{type:a,value:O}]},{type:a,value:"という便利なクラスが"},{type:b,tag:g,props:{},children:[{type:a,value:"Engine\u002FSource\u002FPrograms\u002FDotNETCommon\u002FDotNETUtilities\u002FCommandLineArguments.cs"}]},{type:a,value:"に定義されていて、こいつにコマンドラインから受け取った引数配列を渡すだけでいい感じにしてくれているようです。\nそして、いい感じの形にしたコマンドライン引数の情報を、これまた"},{type:b,tag:g,props:{},children:[{type:a,value:L}]},{type:a,value:"という便利なクラスに渡しています。こちらは Main と同じ"},{type:b,tag:g,props:{},children:[{type:a,value:ay}]},{type:a,value:"内にいます。"},{type:b,tag:g,props:{},children:[{type:a,value:L}]},{type:a,value:"はその名の通り設定情報を保持するクラスなのですが、そのコンストラクタは引数として"},{type:b,tag:g,props:{},children:[{type:a,value:O}]},{type:a,value:"を受け取る仕様になっています。該当コンストラクタを抜き出してきました。"}]},{type:a,value:f},{type:b,tag:r,props:{className:[ai]},children:[{type:b,tag:r,props:{className:[aj]},children:[{type:a,value:"UnreaalBuildTool.csのGlobalOptionsのコンストラクタ"}]},{type:b,tag:t,props:{},children:[{type:b,tag:g,props:{className:[q]},children:[{type:a,value:"\tpublic GlobalOptions(CommandLineArguments Arguments)\n\t{\n\t\tArguments.ApplyTo(this);\n\t\tif (!string.IsNullOrEmpty(RemoteIni))\n\t\t{\n\t\t\tUnrealBuildTool.SetRemoteIniPath(RemoteIni);\n\t\t}\n\t}"}]}]}]},{type:a,value:f},{type:b,tag:l,props:{},children:[{type:a,value:"やっていることは渡された"},{type:b,tag:g,props:{},children:[{type:a,value:O}]},{type:a,value:"のインスタンスが持っている"},{type:b,tag:g,props:{},children:[{type:a,value:"ApplyTo()"}]},{type:a,value:"を、"},{type:b,tag:g,props:{},children:[{type:a,value:L}]},{type:a,value:"自らに対して適用させるというのが主なようです。ついでに"},{type:b,tag:g,props:{},children:[{type:a,value:"-remoteini"}]},{type:a,value:"が指定されている場合の処理もここでやっていますね。"}]},{type:a,value:f},{type:b,tag:l,props:{},children:[{type:a,value:"ここで設定の適用された"},{type:b,tag:g,props:{},children:[{type:a,value:L}]},{type:a,value:"が出来上がり、Main の方でそれを取得しているんですね。"}]},{type:a,value:f},{type:b,tag:_,props:{id:W},children:[{type:b,tag:v,props:{ariaHidden:w,href:"#%E5%8B%95%E4%BD%9C%E3%83%A2%E3%83%BC%E3%83%89%E3%81%A8%E5%8B%95%E4%BD%9C%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E5%8F%96%E5%BE%97",tabIndex:x},children:[{type:b,tag:c,props:{className:[y,z]},children:[]}]},{type:a,value:W}]},{type:a,value:f},{type:b,tag:l,props:{},children:[{type:a,value:"個人的にここの処理がモダンな言語の暴力といった感じで好きです。\nここでは指定された動作モードに対応するクラスを取得してくる処理をしているわけなんですが、なかなかアクロバティックです。"}]},{type:a,value:f},{type:b,tag:r,props:{className:[A]},children:[{type:b,tag:t,props:{className:[q]},children:[{type:b,tag:g,props:{className:[q]},children:[{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:"\u002F\u002F初期値としてビルド設定とビルド管理を保持するクラスの型情報を取得"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:G}]},{type:a,value:" ModeType "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:B}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:ak}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,k,al]},children:[{type:a,value:ab}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:"\u002F\u002F 動作モードの指定がされていた場合、動作モードに該当するクラスを探索して型情報をModeTypeに格納する"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:ac}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"Mode "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:aB}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"null"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:H}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:aC}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ae},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:I}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:J}]}]},{type:a,value:aD},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:B}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:$}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,k,aa]},children:[{type:a,value:ae},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:I}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:J}]}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aG}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:G}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aI}]},{type:a,value:aJ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:aK}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:aL}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:H}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:ac}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:G},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:aM},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:ag}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:aN}]},{type:a,value:G},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:aO},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:ag}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:aP}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:ak}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,k,al]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:H}]},{type:a,value:"\n            "},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:R}]},{type:a,value:aQ},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:B}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,am]},children:[{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:an}]},{type:b,tag:c,props:{className:[d,k,ao]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:I}]},{type:a,value:R},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:J}]}]}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:"\n            ModeNameToType"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:aR}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:aS},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:aT},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:K}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:K}]},{type:a,value:"\n\n    "},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:aU}]},{type:a,value:"\n    ModeNameToType"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:aV}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:ap},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aW}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:K}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:l,props:{},children:[{type:a,value:"まず、Type 型(型情報を持つやつ)の ModeType 変数を宣言しています。初期値はビルドモードを保持する"},{type:b,tag:g,props:{},children:[{type:a,value:ab}]},{type:a,value:"クラスです。\n"},{type:b,tag:g,props:{},children:[{type:a,value:ab}]},{type:a,value:"クラスは"},{type:b,tag:g,props:{},children:[{type:a,value:ar}]},{type:a,value:"にある"},{type:b,tag:g,props:{},children:[{type:a,value:"BuoldMode.cs"}]},{type:a,value:"に宣言されているクラスなのですが、"},{type:b,tag:g,props:{},children:[{type:a,value:ar}]},{type:a,value:"には他にも似たようなファイルがあります。"}]},{type:a,value:f},{type:b,tag:r,props:{className:[A]},children:[{type:b,tag:t,props:{className:[Z]},children:[{type:b,tag:g,props:{className:[Z]},children:[{type:a,value:"Modes\u002F\n|-- BuildMode.cs\n|-- CleanMode.cs\n|-- DeployMode.cs\n|-- GenerateProjectFilesMode.cs\n|-- JsonExportMode.cs\n|-- SetupPlatformsMode.cs\n|-- ValidatePlatformsMode.cs\n|-- WriteDocumentationMode.cs\n`-- WriteMetadataMode.cs\n"}]}]}]},{type:a,value:f},{type:b,tag:l,props:{},children:[{type:a,value:"これらのファイルにはすべて、"},{type:b,tag:g,props:{},children:[{type:a,value:E}]},{type:a,value:"という抽象クラスを継承した各モードのクラスの実装が行われています。そして、これらのクラスは当然、C#で記述されたビルドツールがコンパイルされるときにビルドツール自体のバイナリの中に取り込まれます。\nこれを念頭に置いて、上記の処理からモードの探索部分を改めてみてみます。"}]},{type:a,value:f},{type:b,tag:r,props:{className:[A]},children:[{type:b,tag:t,props:{className:[q]},children:[{type:b,tag:g,props:{className:[q]},children:[{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:aC}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ae},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:I}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:J}]}]},{type:a,value:aD},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:B}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:$}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,k,aa]},children:[{type:a,value:ae},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:I}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:Q}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:J}]}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:aE},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:aF},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aG}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:G}]},{type:a,value:aH},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aI}]},{type:a,value:aJ},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:aK}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:aL}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:H}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:ac}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:G},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:aM},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:ag}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:aN}]},{type:a,value:G},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:aO},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:ag}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:aP}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:ak}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,k,al]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:H}]},{type:a,value:af},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:R}]},{type:a,value:aQ},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:B}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,am]},children:[{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:an}]},{type:b,tag:c,props:{className:[d,k,ao]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:I}]},{type:a,value:R},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:J}]}]}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:"\n        ModeNameToType"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:aR}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:aS},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:aT},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:C},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:F},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:K}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:K}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:l,props:{},children:[{type:a,value:"ここでは、はじめにモード名文字列をキーにとり、対応するモードが実装されたクラスの型情報を値に持つ連想配列を宣言しています。\nそして次に、"},{type:b,tag:"strong",props:{},children:[{type:a,value:"ビルドツール自らのバイナリ内に宣言されている全ての public な型の情報を実行時に取得して"}]},{type:a,value:"、その中から抽象クラス ToolMode を継承している型を抜き出し、そのクラスに設定されている Attribute(属性)情報からモード名を取得、ディクショナリに情報を追加しています。"}]},{type:a,value:f},{type:b,tag:l,props:{},children:[{type:a,value:"クラスの属性については、以下のように各モードクラスの頭に宣言されています。僕はあまり C#を書かないので、C#にこんな属性の記法があることを初めて知りました。UnrealC++の記法ってやっぱり C#リスペクトあるんですかね。"}]},{type:a,value:f},{type:b,tag:r,props:{className:[A]},children:[{type:b,tag:t,props:{className:[q]},children:[{type:b,tag:g,props:{className:[q]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:"["}]},{type:b,tag:c,props:{className:[d,"attribute"]},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:E}]},{type:b,tag:c,props:{className:[d,"attribute-arguments"]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,Q]},children:[{type:a,value:"\"Build\""}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"XmlConfig "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:ah}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"BuildPlatforms "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:ah}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"SingleInstance "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:ah}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"StartPrefetchingEngine "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:ah}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"ShowExecutionTime"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]}]}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:"]"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"class"}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:ab}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:":"}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,"type-list"]},children:[{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:E}]}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:H}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:"\u002F\u002F略"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:K}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:l,props:{},children:[{type:a,value:"おそらくこの機構により、他の部分に一切手を加えなくても"},{type:b,tag:g,props:{},children:[{type:a,value:ar}]},{type:a,value:"に新たなモードのクラスを実装したファイルを追加して引数のパース部にオプションを増やすだけでモードを増やせるようにしているのでしょう。"}]},{type:a,value:f},{type:b,tag:l,props:{},children:[{type:a,value:"最後に、コマンドライン引数で指定されたモードに該当するモードが探索結果のディクショナリにあったら ModeType に参照渡しで設定して完璧です。"}]},{type:a,value:f},{type:b,tag:r,props:{className:[A]},children:[{type:b,tag:t,props:{className:[q]},children:[{type:b,tag:g,props:{className:[q]},children:[{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:aU}]},{type:a,value:"\nModeNameToType"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:aV}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:ap},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:D}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aW}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:_,props:{id:X},children:[{type:b,tag:v,props:{ariaHidden:w,href:"#%E5%90%84%E7%A8%AE%E8%A8%AD%E5%AE%9A%E5%87%A6%E7%90%86",tabIndex:x},children:[{type:b,tag:c,props:{className:[y,z]},children:[]}]},{type:a,value:X}]},{type:a,value:f},{type:b,tag:l,props:{},children:[{type:a,value:"ここでは、ここまでに取得した情報から各種設定を行っています。やっているだけな感じの処理が大半なので、コードは冒頭のみにします。前述の全文の方を御覧ください。"}]},{type:a,value:f},{type:b,tag:r,props:{className:[A]},children:[{type:b,tag:t,props:{className:[q]},children:[{type:b,tag:g,props:{className:[q]},children:[{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:"\u002F\u002F ビルドモードクラスの属性に設定されているオプションを取得"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:"ToolModeOptions"}]},{type:a,value:" ModeOptions "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:B}]},{type:a,value:aq},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,am]},children:[{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:an}]},{type:b,tag:c,props:{className:[d,k,ao]},children:[{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:I}]},{type:a,value:R},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:J}]}]}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:ad},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:"\u002F\u002F エンジンのコンテンツ(ソースコードなど)のプリフェッチ(事前読み込み)オプションが有効化されていれば開始。"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:ac}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:"ModeOptions "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:"&"}]},{type:a,value:M},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:a,value:"StartPrefetchingEngine"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:aB}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,"number"]},children:[{type:a,value:"0"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:H}]},{type:a,value:"\n    FileMetadataPrefetch"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"QueueEngineDirectory"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:K}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:"\u002F\u002F XMLの設定ファイル読み込みが有効化されていれば読み込み"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:as}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:"\u002F\u002F SingleInstance(コードに対して複数のビルドが同時実行できない設定)が有効になっていれば、Mutexを設定"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:as}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:"\u002F\u002F すべてのプラットフォームに対してのビルドを登録する場合としない場合の設定"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:as}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:_,props:{id:Y},children:[{type:b,tag:v,props:{ariaHidden:w,href:"#%E5%87%A6%E7%90%86%E5%AE%9F%E8%A1%8C",tabIndex:x},children:[{type:b,tag:c,props:{className:[y,z]},children:[]}]},{type:a,value:Y}]},{type:a,value:f},{type:b,tag:l,props:{},children:[{type:a,value:"いよいよ情報が揃ったので、実行箇所です。"}]},{type:a,value:f},{type:b,tag:r,props:{className:[A]},children:[{type:b,tag:t,props:{className:[q]},children:[{type:b,tag:g,props:{className:[q]},children:[{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:"\u002F\u002F 設定されたモードから適切なハンドラを生成"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,k]},children:[{type:a,value:E}]},{type:a,value:" Mode "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:B}]},{type:a,value:o},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:a,value:"Activator"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"CreateInstance"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:aX},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:P},{type:b,tag:c,props:{className:[d,p]},children:[{type:a,value:"\u002F\u002F ハンドラに設定されたモードを実行"}]},{type:a,value:f},{type:b,tag:c,props:{className:[d,k]},children:[{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"int"}]}]},{type:a,value:" Result "},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:B}]},{type:a,value:" Mode"},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:h}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"Execute"}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:i}]},{type:a,value:aA},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:j}]},{type:b,tag:c,props:{className:[d,e]},children:[{type:a,value:u}]},{type:a,value:f}]}]}]},{type:a,value:f},{type:b,tag:l,props:{},children:[{type:a,value:"モードに合わせたクラスの型情報を持っている"},{type:b,tag:g,props:{},children:[{type:a,value:aX}]},{type:a,value:"をもとにインスタンスを作成し、抽象クラスである"},{type:b,tag:g,props:{},children:[{type:a,value:E}]},{type:a,value:"にアップキャストしてハンドラ用の"},{type:b,tag:g,props:{},children:[{type:a,value:ap}]},{type:a,value:"変数に格納しています。今更ですが、抽象クラス"},{type:b,tag:g,props:{},children:[{type:a,value:E}]},{type:a,value:"の中身はこんな感じです。"}]},{type:a,value:f},{type:b,tag:r,props:{className:[ai]},children:[{type:b,tag:r,props:{className:[aj]},children:[{type:a,value:"ToolMode.csのToolModeクラス"}]},{type:b,tag:t,props:{},children:[{type:b,tag:g,props:{className:[q]},children:[{type:a,value:"abstract class ToolMode\n{\n\tpublic abstract int Execute(CommandLineArguments Arguments);\n}"}]}]}]},{type:a,value:f},{type:b,tag:l,props:{},children:[{type:a,value:"嘘ではないですがハンドラ(実行しかできない)みたいな感じがすごいですね。\nまあ、そんな感じでこれを通して各モードの実装が実行されるわけですね。"}]},{type:a,value:f},{type:b,tag:N,props:{id:aY},children:[{type:b,tag:v,props:{ariaHidden:w,href:"#%E3%81%84%E3%81%A3%E3%81%9F%E3%82%93%E3%81%BE%E3%81%A8%E3%82%81",tabIndex:x},children:[{type:b,tag:c,props:{className:[y,z]},children:[]}]},{type:a,value:aY}]},{type:a,value:f},{type:b,tag:l,props:{},children:[{type:a,value:"とりあえず Unreal Build Tool がビルドやその他の処理を呼び出すまでの流れはわかりました。\n次はビルド処理を読んで記事を書こうと思います。"}]}]},dir:"\u002Farticles\u002Funrealengine",path:aZ,extension:".md",createdAt:"2019-06-14T00:00:00.000Z",updatedAt:"2019-06-15T00:00:00.000Z",gitCreatedAt:"2021-11-25T21:00:30.000Z",gitUpdatedAt:"2021-11-30T16:52:43.000Z"},path:aZ}],fetch:{"data-v-08b63208:0":{prevTitle:S,nextTitle:S,existPrev:a_,existNext:a_,prevSlug:S,nextSlug:S,seriesPage:S}},mutations:void 0}}("text","element","span","token","punctuation","\n","code",".","(",")","class-name","p","keyword","operator"," ","comment","language-csharp","div","function","pre",";","a","true",-1,"icon","icon-link","remark-highlight","="," Type",",","ToolMode","\n    ","Type","{","\u003C","\u003E","}","GlobalOptions"," ToolModeOptions","h1","CommandLineArguments","\n\n","string","ToolModeAttribute","","エントリーポイント","コマンドライン引数のパース",3,"動作モードと動作オプションの取得","各種設定処理","処理実行","language-treeview","h3","new","constructor-invocation","BuildMode","if","Options","Dictionary","\n        ","&&","|","code-extra","filename","typeof","type-expression","generic-method","GetCustomAttribute","generic","Mode"," ModeType","Engine\u002FSource\u002FPrograms\u002FUnrealBuildTool\u002FModes","\u002F\u002F 略","概要","環境","li","呼び出しを追っていく","language-unknown","UnrealBuildTool.cs","\n       ","Arguments","!=","\u002F\u002F すべての有効なモードを探索"," ModeNameToType ","StringComparer","OrdinalIgnoreCase","foreach"," Type ","in"," Assembly","GetExecutingAssembly","GetTypes","IsClass ","!","IsAbstract ","IsSubclassOf"," Attribute ","Add","Attribute","Name","\u002F\u002F モードの設定を行う","TryGetValue","out","ModeType","いったんまとめ","\u002Farticles\u002Funrealengine\u002Fthe-process-to-start-building-with-the-unreal-build-tool-in-ue4",false)));