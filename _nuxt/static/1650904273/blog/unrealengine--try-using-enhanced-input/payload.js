__NUXT_JSONP__("/blog/unrealengine--try-using-enhanced-input", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao,ap,aq,ar,as,at,au,av,aw){return {data:[{page:{slug:"try-using-enhanced-input",description:"Enhanced Input Plugin を解説してみる記事",title:"Enhanced Input の基礎的な解説",tags:["Unreal Engine","Blueprint","Input System","Enhanced Input"],assets:"\u002Farticle-assets\u002Funrealengine\u002Ftry-using-enhanced-input",toc:[{id:K,depth:q,text:H},{id:L,depth:q,text:z},{id:M,depth:q,text:N},{id:O,depth:s,text:P},{id:Q,depth:s,text:R},{id:A,depth:q,text:A},{id:S,depth:s,text:T},{id:B,depth:s,text:B},{id:U,depth:q,text:V},{id:W,depth:q,text:X},{id:Y,depth:q,text:Z},{id:_,depth:s,text:C},{id:$,depth:s,text:D},{id:aa,depth:q,text:ab},{id:ac,depth:s,text:C},{id:ad,depth:s,text:D},{id:E,depth:q,text:E}],body:{type:"root",children:[{type:b,tag:v,props:{id:ae},children:[{type:b,tag:g,props:{ariaHidden:h,href:"#%E6%A6%82%E8%A6%81",tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:ae}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"UE には、Project Setting から可能な Input Mapping 機能があります。しかし、それとは別に、Enhanced Input という入力処理のプラグインがエンジンにビルトインされています。\nEnhanced Input は入力アクションの定義やマッピングをアセットベースで行うことが可能なほか、入力によって得られる値を柔軟に変換することができます。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"今回は、Enhanced Input を使った入力処理を解説してみようと思います。"}]},{type:a,value:c},{type:b,tag:v,props:{id:af},children:[{type:b,tag:g,props:{ariaHidden:h,href:"#%E7%92%B0%E5%A2%83",tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:af}]},{type:a,value:c},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Unreal Engine 5.0.1"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Windows 11"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:v,props:{id:ag},children:[{type:b,tag:g,props:{ariaHidden:h,href:"#%E6%BA%96%E5%82%99",tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:ag}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Enhaned Input を利用するためには、まずプラグインを有効化する必要があります。 有効化して、エディタを再起動しましょう。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:n,props:{alt:"enable plugin",src:"\u002Farticle-assets\u002Funrealengine\u002Ftry-using-enhanced-input\u002F\u002Fenable-plugin.jpg"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"また、Enhanced Input で入力を受け取るためには、Project Setting から "},{type:b,tag:e,props:{},children:[{type:a,value:"Default Player Input Class"}]},{type:a,value:" と "},{type:b,tag:e,props:{},children:[{type:a,value:"Default Input Component Class"}]},{type:a,value:" を変更する必要があります。　以下のように変更しましょう。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:n,props:{alt:"project setting",src:"\u002Farticle-assets\u002Funrealengine\u002Ftry-using-enhanced-input\u002F\u002Fproject-setting.jpg"},children:[]}]},{type:a,value:c},{type:b,tag:v,props:{id:ah},children:[{type:b,tag:g,props:{ariaHidden:h,href:"#%E8%A7%A3%E8%AA%AC",tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:ah}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Enhanced Input を有効化すると、以下の 3 つのアセットが作成可能になります。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:n,props:{alt:"asset types",src:"\u002Farticle-assets\u002Funrealengine\u002Ftry-using-enhanced-input\u002F\u002Fasset-types.jpg"},children:[]}]},{type:a,value:c},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:H}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:z}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:ai}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"このうち、Input Action と Input Mapping Context についての説明を行います。"}]},{type:a,value:c},{type:b,tag:r,props:{id:K},children:[{type:b,tag:g,props:{ariaHidden:h,href:"#input-action",tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:H}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Input Action は、名前の通り"},{type:b,tag:o,props:{},children:[{type:a,value:"アクション"}]},{type:a,value:"を定義できるアセットです。ここで言うアクションとは、"},{type:b,tag:o,props:{},children:[{type:a,value:"移動"}]},{type:a,value:aj},{type:b,tag:o,props:{},children:[{type:a,value:"銃を打つ"}]},{type:a,value:aj},{type:b,tag:o,props:{},children:[{type:a,value:"アクタのものにインタラクトする"}]},{type:a,value:"のような、ゲーム上での意味を持つ行動の単位で、特に入力に紐づいて発生するものであると考えると良いと思います。進めていくとわかりますが、このアセットを作成し、アセット名を付けること自体が、一つのアクションの定義となっています。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"このアセットでは、主に以下のようなことが設定できます。"}]},{type:a,value:c},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Value Type : アクションから取得できる値の型\n"},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"bool"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Axis1D → float"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Axis2D → Vector2D"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Axis3D → Vector"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Triggers : イベントを発火させるデフォルトのトリガ条件"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Modifiers : 取得前に行われるデフォルトの値変換処理"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:n,props:{alt:"input action details",src:"\u002Farticle-assets\u002Funrealengine\u002Ftry-using-enhanced-input\u002F\u002Finput-action-details.jpg"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"これらが主要な設定項目なのですが、面白いことに、この中で Input Action が必ず設定しなければならないのは、 "},{type:b,tag:e,props:{},children:[{type:a,value:"Value Type"}]},{type:a,value:" のみです。Triggers と Modifiers の設定は、後に説明する Input Mapping Context でも設定することができます。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"ここで考えておきたいのは、Project Setting などから行う入力マッピングと、Input Action で行えるアクション定義とでは、設定できる対象の"},{type:b,tag:o,props:{},children:[{type:a,value:"粒度"}]},{type:a,value:"が異なるということです。\nキーボードでの前後左右移動を実装したいとき、従来であれば "},{type:b,tag:e,props:{},children:[{type:a,value:"Move Forward"}]},{type:a,value:" \u002F "},{type:b,tag:e,props:{},children:[{type:a,value:"Move Right"}]},{type:a,value:"のような軸別のイベントを複数定義して行うのが一般的だったと思います。\nしかし、Enhanced Input で移動を実装しようと思ったら、 "},{type:b,tag:e,props:{},children:[{type:a,value:F}]},{type:a,value:"という Input Action アセット（名前は例）を一つ作成し、Value Type に 2 次元の入力であることを示す"},{type:b,tag:e,props:{},children:[{type:a,value:I}]},{type:a,value:"を設定することで対応します。\nアクションが求める入力値のタイプと、そのアクションとを、入力のレベルでそのまま対応させるのです。明快ですね。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"また、Input Action では、そのアクションが"},{type:b,tag:o,props:{},children:[{type:a,value:"実際にどのデバイスのどの入力と紐づくのか"}]},{type:a,value:"ということを設定しません。ここでは、アクションの宣言(アセットの作成と同義)と、そのアクションから得られる値の型さえ設定すればよいのです。インターフェースのようです。"}]},{type:a,value:c},{type:b,tag:r,props:{id:L},children:[{type:b,tag:g,props:{ariaHidden:h,href:"#input-mapping-context",tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:z}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Input Mapping Context は、Input Action を使って定義したアクションと、実際のデバイスによる入力とのマッピングを行えるアセットです。\nInput Mapping Context によるキーマップは、アセットの単位で実行時に Player Controller に追加したり削除したりすることができます。\nシーンによって可能な操作を変更したり、入力に利用するデバイス別に Input Mapping Context を用意して切り替えたり、あとから DLC などで追加のデバイス用マッピングを追加したりなど、非常に柔軟な運用が可能となります。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"主な設定項目は以下のようなものです。"}]},{type:a,value:c},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"アクション定義として利用する Input Action"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"アクションにマップする入力(配列)\n"},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Triggers: この入力における追加のトリガ条件"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Modifiers: この入力における追加の値変換処理"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Player Mappable Options: キーコンフィグの実装に利用できる、このマップ設定を指す名前などの情報"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:n,props:{alt:"input mapping context details",src:"\u002Farticle-assets\u002Funrealengine\u002Ftry-using-enhanced-input\u002F\u002Finput-mapping-context-details.jpg"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Input Mapping Context には、複数の Input Action によるアクション定義への入力マッピングを設定できます。\n"},{type:b,tag:n,props:{alt:"multiple input action",src:"\u002Farticle-assets\u002Funrealengine\u002Ftry-using-enhanced-input\u002F\u002Fmultiple-input-action.jpg"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Input Action 側でも設定できた Triggers や Modifiers ですが、Input Mapping Context に存在するプロパティも効果は全く同じです。異なるのは、その設定の影響範囲です。\nInput Action 側で設定した場合には、その Input Action によるアクション定義を使った、すべてのシチュエーションにおいて設定が適用されます。\n一方、Input Mapping Context 側で設定する場合には、その Input Mapping Context が有効な状況(Context)で、その特定のキーマッピングを利用した場合にのみ有効となる設定となります。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"個人的には、基本は Input Mapping Context の方で設定を行うこととして、様々なシーンや入力デバイスを通しても共通と思われるトリガ条件や、常に行う値変換などがある場合にのみ、Input Action 側での設定を行うのが良いのではないかと思います。"}]},{type:a,value:c},{type:b,tag:r,props:{id:M},children:[{type:b,tag:g,props:{ariaHidden:h,href:"#trigger-%E3%81%A8-modifier",tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:N}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"改めて、Trigger と Modifier についての説明をしたいと思います。"}]},{type:a,value:c},{type:b,tag:t,props:{id:O},children:[{type:b,tag:g,props:{ariaHidden:h,href:"#trigger",tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:P}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Trigger は、Input Action で定義したアクション、もしくは Input Mapping Context で定義されたキーマップが、イベントをトリガする条件を設定するものです。配列として複数設定することが可能です。\n注意として、Trigger はイベントの発火をフィルタするものであると捉えたほうがよいものです。イベントの発火を生み出すものではありません。\nEnhanced Input では、Trigger の登録数が 0 である場合、マッピングされたキーに何らかの入力がある時に、毎 Tick イベントが発火します。\nそこに Trigger を設定すると、Trigger の条件を満たすときにのみイベントが発火するようになるのです。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Trigger には様々な種類が用意されており、選択したものによって、表示される設定項目が変わります。\nここに表示される Trigger は、"},{type:b,tag:e,props:{},children:[{type:a,value:"UInputTrigger"}]},{type:a,value:"クラスを継承して定義することによって、独自に実装することもできます。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:n,props:{alt:"triggers",src:"\u002Farticle-assets\u002Funrealengine\u002Ftry-using-enhanced-input\u002F\u002Ftriggers.jpg"},children:[]}]},{type:a,value:c},{type:b,tag:t,props:{id:Q},children:[{type:b,tag:g,props:{ariaHidden:h,href:"#modifier",tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:R}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Modifier は、キー入力から得られた生の値を、対応するアクションの処理に利用できる値に変換するために利用するものです。\nInput Action で定義したアクション、もしくは Input Mapping Context で定義されたキーマップに対して設定することができます。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:n,props:{alt:"modifiers",src:"\u002Farticle-assets\u002Funrealengine\u002Ftry-using-enhanced-input\u002F\u002Fmodifiers.jpg"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"例えば、前後左右の移動を行う場合、最終的な移動処理では、X 軸と Y 軸のそれぞれへの入力の大きさを値として（2 次元値として）利用したくなります。\nそんなとき、Input Action では、Value Type に"},{type:b,tag:e,props:{},children:[{type:a,value:I}]},{type:a,value:"を設定します。しかし、入力デバイスがキーボードなどである場合、前後左右それぞれに異なるキーをマッピングしなければならず、単純なマッピングでは求める値をアクションから得ることができません。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Value Type が"},{type:b,tag:e,props:{},children:[{type:a,value:I}]},{type:a,value:"なアクションに対してキーボードからの入力が発生すると、それがどのキーであったとしても、Enhanced Input は"},{type:b,tag:e,props:{},children:[{type:a,value:u}]},{type:a,value:"という値を受け取ります。ここで、Modifier を使うと、以下のように各方向への入力に対して、ほしい値を作り出すことができます。"}]},{type:a,value:"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{type:b,tag:"table",props:{},children:[{type:b,tag:"thead",props:{},children:[{type:b,tag:x,props:{},children:[{type:b,tag:G,props:{},children:[{type:a,value:"押されたキー"}]},{type:b,tag:G,props:{},children:[{type:a,value:"生の値"}]},{type:b,tag:G,props:{},children:[{type:a,value:"Modifier による変換"}]},{type:b,tag:G,props:{},children:[{type:a,value:"アクションから取得できる値"}]}]}]},{type:b,tag:"tbody",props:{},children:[{type:b,tag:x,props:{},children:[{type:b,tag:m,props:{},children:[{type:a,value:"「前に進む」"}]},{type:b,tag:m,props:{},children:[{type:a,value:u}]},{type:b,tag:m,props:{},children:[{type:a,value:"行わない"}]},{type:b,tag:m,props:{},children:[{type:a,value:u}]}]},{type:b,tag:x,props:{},children:[{type:b,tag:m,props:{},children:[{type:a,value:"「後ろに進む」"}]},{type:b,tag:m,props:{},children:[{type:a,value:u}]},{type:b,tag:m,props:{},children:[{type:b,tag:o,props:{},children:[{type:a,value:ak}]},{type:a,value:al}]},{type:b,tag:m,props:{},children:[{type:a,value:"(-1.0, 0.0)"}]}]},{type:b,tag:x,props:{},children:[{type:b,tag:m,props:{},children:[{type:a,value:"「右に進む」"}]},{type:b,tag:m,props:{},children:[{type:a,value:u}]},{type:b,tag:m,props:{},children:[{type:b,tag:o,props:{},children:[{type:a,value:am}]},{type:a,value:an}]},{type:b,tag:m,props:{},children:[{type:a,value:"(0.0, 1.0)"}]}]},{type:b,tag:x,props:{},children:[{type:b,tag:m,props:{},children:[{type:a,value:"「左に進む」"}]},{type:b,tag:m,props:{},children:[{type:a,value:u}]},{type:b,tag:m,props:{},children:[{type:b,tag:o,props:{},children:[{type:a,value:ak}]},{type:a,value:al},{type:b,tag:"br",props:{},children:[]},{type:a,value:"その後、"},{type:b,tag:o,props:{},children:[{type:a,value:am}]},{type:a,value:an}]},{type:b,tag:m,props:{},children:[{type:a,value:"(0.0, -1.0)"}]}]}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"これはすごいですね！　これまでの Project Setting によるマッピングでは、単純なスケールの変換くらいしかできませんでした。しかし、Enhanced Input では、次元を持った値を、様々な Modifier を組み合わせることで自在に変換し、あらゆる入力デバイスに対して対応できる統一的なアクションを定義することができるのです。\nこの機能を見ると、Input Action と Input Mapping Context の双方で Trigger や Modifier が設定できた理由がよくわかります。\nInput Action には共通の設定を行い、Input Mapping Context には様々な入力デバイスやシーンに応じたキーマッピングとトリガ条件、値の変換を記述することができるのです。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Modifier も Trigger 同様、"},{type:b,tag:e,props:{},children:[{type:a,value:"UInputModifier"}]},{type:a,value:"クラスを継承することで、独自に実装することができます。"}]},{type:a,value:c},{type:b,tag:r,props:{id:A},children:[{type:b,tag:g,props:{ariaHidden:h,href:"#%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%81%AE%E5%8F%97%E3%81%91%E5%8F%96%E3%82%8A%E6%96%B9",tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:A}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"これでアクションとキーマッピングの定義法はわかったかと思います。\nここでは、実際にイベントを受け取る方法についての説明を行います。"}]},{type:a,value:c},{type:b,tag:t,props:{id:S},children:[{type:b,tag:g,props:{ariaHidden:h,href:"#%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B-input-mapping-context-%E3%81%AE%E7%99%BB%E9%8C%B2",tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:T}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Enhanced Input が発行するイベントを受け取るには、利用している"},{type:b,tag:e,props:{},children:[{type:a,value:w}]},{type:a,value:"に、利用したい Input Mapping Context アセットを登録する必要があります。\nここで設定した Input Mapping Context アセットの内容が、その"},{type:b,tag:e,props:{},children:[{type:a,value:w}]},{type:a,value:"で利用できるキーマッピング設定となるのです。この登録は、実行時に解除したり新たに登録したりすることができます。\n実際には、以下のように、"},{type:b,tag:e,props:{},children:[{type:a,value:w}]},{type:a,value:"が保持している "},{type:b,tag:e,props:{},children:[{type:a,value:"Enhanced Input Local Player Subsystem"}]},{type:a,value:"を通して設定を行うことができます。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:n,props:{alt:"pc imc register",src:"\u002Farticle-assets\u002Funrealengine\u002Ftry-using-enhanced-input\u002F\u002Fpc-imc-register.jpg"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:e,props:{},children:[{type:a,value:w}]},{type:a,value:"が取得できる、Character や Pawn から設定を行うこともできます。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:n,props:{alt:"ch imc register",src:"\u002Farticle-assets\u002Funrealengine\u002Ftry-using-enhanced-input\u002F\u002Fch-imc-register.jpg"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"複数のマッピングを登録したい場合には、配列などに Input Mapping Context を格納して、ループで登録したりなんてこともできます。"}]},{type:a,value:c},{type:b,tag:t,props:{id:B},children:[{type:b,tag:g,props:{ariaHidden:h,href:"#%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B",tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:B}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"これで、イベントを受け取ることができます。\nEnhanced Input が有効になっていると、Input Action アセットを作成しただけで、ノード一覧に該当するイベントノードが登録されるようです。\nこの時点で、Input Mapping Context に設定したキーマッピングで、このイベントを発火させることができるようになります。\n定義に利用した Trigger の種類によって、有効な実行ピン(Triggered, Started, Ongoing, ...)が変化します。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:n,props:{alt:"ia event",src:"\u002Farticle-assets\u002Funrealengine\u002Ftry-using-enhanced-input\u002F\u002Fia-event.jpg"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"注意点として、このノードは、そのアクションを利用する Input Mapping Context が登録されていなくても配置できるというものがあります。\n配置はできますが、利用している"},{type:b,tag:e,props:{},children:[{type:a,value:w}]},{type:a,value:"に、そのアクションのイベントを発火させる Input Mapping Context が登録されていないと、永遠に発火することはありません。\nまた、このイベントノードは普通のイベントノードとは別物で(どこでもノード一覧に出てくることからもわかりますが)、Enhanced Input プラグイン内部で拡張されたノードです。\n配置すると、対応する Input Action をノード内部で"},{type:b,tag:o,props:{},children:[{type:a,value:"ハード参照"}]},{type:a,value:"します。\nつまり、このノードを配置した"},{type:b,tag:e,props:{},children:[{type:a,value:"Character"}]},{type:a,value:"や"},{type:b,tag:e,props:{},children:[{type:a,value:w}]},{type:a,value:"も、その Input Action アセットをハード参照することになります。\nこれを避けたい場合、C++などで Input Action セットのソフト参照からイベントを発火させるツールを書いたり、同様のものをプロジェクト専用の Player Controller クラスに実装したりする必要があると思われます。"}]},{type:a,value:c},{type:b,tag:v,props:{id:ao},children:[{type:b,tag:g,props:{ariaHidden:h,href:"#%E7%A7%BB%E5%8B%95%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%E8%A8%AD%E5%AE%9A%E3%81%AE%E4%BE%8B",tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:ao}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"簡易的な移動が可能な設定の例を提示します。以下のことを実現します。"}]},{type:a,value:c},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"マウスによる視点変更"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"視点方向に基づいた前後左右移動"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"複数種のデバイスによる移動入力\n"},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"キーボード入力のコンテキスト"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"マウス入力のコンテキスト"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:r,props:{id:U},children:[{type:b,tag:g,props:{ariaHidden:h,href:"#ia_move-%E7%A7%BB%E5%8B%95%E3%82%A2%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E5%AE%9A%E7%BE%A9",tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:V}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:e,props:{},children:[{type:a,value:F}]},{type:a,value:ap}]},{type:a,value:c},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:aq}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"これだけです。"},{type:b,tag:o,props:{},children:[{type:a,value:"移動という入力アクションは、2 次元の値を提供するものである"}]},{type:a,value:"という定義をしただけです。\n前後左右への移動ですので、2 次元の値です。"}]},{type:a,value:c},{type:b,tag:r,props:{id:W},children:[{type:b,tag:g,props:{ariaHidden:h,href:"#ia_look-%E8%A6%96%E7%82%B9%E5%A4%89%E6%9B%B4%E3%82%A2%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E5%AE%9A%E7%BE%A9",tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:X}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:e,props:{},children:[{type:a,value:"IA_Look"}]},{type:a,value:ap}]},{type:a,value:c},{type:b,tag:p,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:aq}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"なんと"},{type:b,tag:e,props:{},children:[{type:a,value:F}]},{type:a,value:"と全く同じです。今回の視点変更は左右上下を見渡すことができればよいので、必要なのはやはり 2 次元の値だからです。"}]},{type:a,value:c},{type:b,tag:r,props:{id:Y},children:[{type:b,tag:g,props:{ariaHidden:h,href:"#imc_keyboard-%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E3%81%A7%E3%81%AE%E3%82%AD%E3%83%BC%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0%E6%99%82%E3%81%AE%E8%A8%AD%E5%AE%9A",tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:Z}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:e,props:{},children:[{type:a,value:ar}]},{type:a,value:"という Input Mapping Context アセットを作成し、以下の項目を設定します。\n少し設定項目が多いので、画像で示します。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:n,props:{alt:"imc keyboard",src:"\u002Farticle-assets\u002Funrealengine\u002Ftry-using-enhanced-input\u002F\u002Fimc-keyboard.jpg"},children:[]}]},{type:a,value:c},{type:b,tag:t,props:{id:_},children:[{type:b,tag:g,props:{ariaHidden:h,href:"#ia_move-%E3%81%B8%E3%81%AE%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0",tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:C}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:e,props:{},children:[{type:a,value:"W"}]},{type:a,value:J},{type:b,tag:e,props:{},children:[{type:a,value:"A"}]},{type:a,value:J},{type:b,tag:e,props:{},children:[{type:a,value:"S"}]},{type:a,value:J},{type:b,tag:e,props:{},children:[{type:a,value:"D"}]},{type:a,value:" キーへのマッピングを行っています。\n移動なので、押されているときには常にイベントが発火し続けてほしいです。\nEnhanced Input は Trigger なしの場合に入力があると毎 Tick イベントが発火するようになるので、Trigger は設定しなくてよいです。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"各キーが示す方向にあわせて、入力で得られた生の値に対する Modifier による変換を設定しています。これについては、Modifier について説明した説で示した例が、この内容の説明となっています。そちらをご参照ください。"}]},{type:a,value:c},{type:b,tag:t,props:{id:$},children:[{type:b,tag:g,props:{ariaHidden:h,href:"#ia_look-%E3%81%B8%E3%81%AE%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0",tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:D}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"マウスの画面上での 2 次元移動へのマッピングを行っています。\n移動同様、常にイベントが発火してほしいものなので、Trigger は設定していません。マウスの動きが発生していと入力中という判定になります。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"マウスの移動から得られる生の値ははじめから 2 次元値なので、そのまま視点移動に使えそうな気もしますが、実際には画面の座標系の関係で Y 軸の値を反転させてやる必要があります。\nそのために、"},{type:b,tag:e,props:{},children:[{type:a,value:"Nagate"}]},{type:a,value:" Modifier を一つ追加して、Y 軸の反転を設定しています。"}]},{type:a,value:c},{type:b,tag:r,props:{id:aa},children:[{type:b,tag:g,props:{ariaHidden:h,href:"#imc_mouse-%E3%83%9E%E3%82%A6%E3%82%B9%E5%85%A5%E5%8A%9B%E6%99%82%E3%81%AE%E8%A8%AD%E5%AE%9A",tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:ab}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"こちらは、マウス入力によって移動も行う場合の設定です。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:n,props:{alt:"imc mouse",src:"\u002Farticle-assets\u002Funrealengine\u002Ftry-using-enhanced-input\u002F\u002Fimc-mouse.jpg"},children:[]}]},{type:a,value:c},{type:b,tag:t,props:{id:ac},children:[{type:b,tag:g,props:{ariaHidden:h,href:"#ia_move-%E3%81%B8%E3%81%AE%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0-1",tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:C}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"マウスで左右の移動を行うのは難しいので、"},{type:b,tag:o,props:{},children:[{type:a,value:"マウスの左ボタンを 0.25 秒以上押し続けると前進を始める"}]},{type:a,value:"というものにしました。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"ボタン入力は 1 次元の値なので、2 次元の値を要求する "},{type:b,tag:e,props:{},children:[{type:a,value:F}]},{type:a,value:"の場合、生の値は "},{type:b,tag:e,props:{},children:[{type:a,value:u}]},{type:a,value:"になります。これはそのままで前進を示す値(X 軸に正の値)なので、特に Modifier は必要ありません。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"0.25 秒以上押し続けたら、という条件は、"},{type:b,tag:o,props:{},children:[{type:a,value:"Hold"}]},{type:a,value:" Trigger を追加し、"},{type:b,tag:e,props:{},children:[{type:a,value:"Hold Time Threshold"}]},{type:a,value:" を設定することで対応しました。"}]},{type:a,value:c},{type:b,tag:t,props:{id:ad},children:[{type:b,tag:g,props:{ariaHidden:h,href:"#ia_look-%E3%81%B8%E3%81%AE%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0-1",tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:D}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:e,props:{},children:[{type:a,value:ar}]},{type:a,value:"の場合と同様です。"}]},{type:a,value:c},{type:b,tag:r,props:{id:E},children:[{type:b,tag:g,props:{ariaHidden:h,href:"#%E7%A7%BB%E5%8B%95%E5%AE%9F%E8%A3%85",tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:E}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"マッピングの登録と、発火したイベントによる実際の移動や視点変更は、以下のように作成しました。\nこれは Player Controller に対する実装です。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:n,props:{alt:"pc impl",src:"\u002Farticle-assets\u002Funrealengine\u002Ftry-using-enhanced-input\u002F\u002Fpc-impl.jpg"},children:[]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"BeginPlay のところを見ると、"},{type:b,tag:e,props:{},children:[{type:a,value:"EInputDevice"}]},{type:a,value:" の値で、マウスのキーマッピングとキーボードのキーマッピングのどちらを利用するかを簡潔に切り替えることができるようになっていることがわかります。\nそして、Input Action に対応した 2 つのイベントには、簡易的な移動と視点変更が実装されています。一つのアクションに対して一つのイベントが定義され、はじめから使いやすい変換済の値が入力されてくることを前提とできるため、こちらも大変簡潔に記述することができています。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"今回は見やすさのため、"},{type:b,tag:e,props:{},children:[{type:a,value:z}]},{type:a,value:"の指定や、どのマッピングを利用するかの選択などを固定で記述していますが、実際には、これらすべてを実行時に動的に変更することができます。\nまた、この例のように異なるデバイスのマッピングを利用する場合には、切り替えではなく両方を同時に登録して使うことのほうが多いかとは思いますが、まあわかり易い例として……。"}]},{type:a,value:c},{type:b,tag:v,props:{id:as},children:[{type:b,tag:g,props:{ariaHidden:h,href:"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB",tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:as}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"良い機能ですね(しみじみ)。いっぱい使いたいです。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"今回は"},{type:b,tag:e,props:{},children:[{type:a,value:ai}]},{type:a,value:"について説明しませんでしたが、これを利用すると簡単にプレイヤーが利用可能なキーコンフィグを作成できます。機会を見て解説したいと思います。"}]}]},dir:"\u002Farticles\u002Funrealengine",path:at,extension:".md",createdAt:au,updatedAt:av,gitCreatedAt:au,gitUpdatedAt:av},path:at}],fetch:{"data-v-08b63208:0":{prevTitle:y,nextTitle:y,existPrev:aw,existNext:aw,prevSlug:y,nextSlug:y,seriesPage:y}},mutations:void 0}}("text","element","\n","p","code","li","a","true",-1,"span","icon","icon-link","td","img","strong","ul",2,"h2",3,"h3","(1.0, 0.0)","h1","Player Controller","tr","","Input Mapping Context","イベントの受け取り方","イベントを利用する","IA_Move へのマッピング","IA_Look へのマッピング","移動実装","IA_Move","th","Input Action","Axis2D",", ","input-action","input-mapping-context","trigger-と-modifier","Trigger と Modifier","trigger","Trigger","modifier","Modifier","利用する-input-mapping-context-の登録","利用する Input Mapping Context の登録","ia_move-移動アクション定義","IA_Move: 移動アクション定義","ia_look-視点変更アクション定義","IA_Look: 視点変更アクション定義","imc_keyboard-キーボードでのキーマッピング時の設定","IMC_Keyboard: キーボードでのキーマッピング時の設定","ia_move-へのマッピング","ia_look-へのマッピング","imc_mouse-マウス入力時の設定","IMC_Mouse: マウス入力時の設定","ia_move-へのマッピング-1","ia_look-へのマッピング-1","概要","環境","準備","解説","Player Bindable Input Config","とか、","Negate"," Modifier で X 軸の符号反転を行う。","Swizzle Input Axis Values"," Modifier で、(X, Y)の値を(Y, X)に並び替える。","移動ができる設定の例","という Input Action アセットを作成し、以下の項目を設定します。","Value Type: Axis2D(Vector2D)","IMC_Keyboard","おわりに","\u002Farticles\u002Funrealengine\u002Ftry-using-enhanced-input","2022-04-25T16:11:43.000Z","2022-04-25T16:20:25.000Z",false)));