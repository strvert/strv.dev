__NUXT_JSONP__("/blog/cpp--write-an-nbit-adder-using-only-types", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac,ad,ae,af,ag,ah,ai,aj,ak,al,am,an,ao){return {data:[{}],fetch:{"blogpost-content:0":{page:{slug:"write-an-nbit-adder-using-only-types",description:"C++の型システムだけで、組み合わせ論理回路であるN-bit加算器を実装してみる。",title:"[C++]型だけでN bit加算器を書こう",enforceCreatedAt:O,enforceUpdatedAt:O,tags:["C++","metaprogramming","静的型付け","concept","C++20"],assets:"\u002Farticle-assets\u002Fcpp\u002Fwrite-an-nbit-adder-using-only-types",toc:[{id:y,depth:t,text:y},{id:P,depth:t,text:Q},{id:z,depth:t,text:z},{id:A,depth:H,text:A},{id:B,depth:t,text:B},{id:C,depth:t,text:C},{id:R,depth:t,text:S},{id:D,depth:H,text:D},{id:T,depth:H,text:U}],body:{type:"root",children:[{type:b,tag:e,props:{},children:[{type:b,tag:"nuxt-link",props:{to:"\u002Farticle-assets\u002Fcpp\u002Fwrite-an-nbit-adder-using-only-types\u002F\u002Fhogehoge.txt"},children:[{type:a,value:"hoge"}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"最近、Twitter で以下の記事を見かけました。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:h,props:{href:V,rel:[W,X,Y],target:Z},children:[{type:a,value:V}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"2018 年の記事と少し古めですが、TypeScript の型システムを利用して論理ゲート～ 4bit 加算器を実装しています。こんなものを見かけたら、C++でもやりたくなってしまうのが人間というものです。ということなので、今回は C++の型システムで組み合わせ回路を実装していきたいと思います。やりたかっただけです。"}]},{type:a,value:c},{type:b,tag:s,props:{id:_},children:[{type:b,tag:h,props:{href:"#%E3%83%AC%E3%82%AE%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3",ariaHidden:k,tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:a,value:_}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"上記の記事では、TypeScript の型システムを用いた静的計算を「コンパイル時計算」とし、TypeScript のコンパイル時計算で組み合わせ回路を実装するという趣旨になっていました。しかし、C++でこの言葉をそのまま採用して実装すると、"},{type:b,tag:d,props:{},children:[{type:a,value:$}]},{type:a,value:"で世界のすべてを殴り倒すことが出来てしまい、面白くありません。せっかくなので今回は、以下のような条件のもとでコードを書いてみましょう。"}]},{type:a,value:c},{type:b,tag:aa,props:{},children:[{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:"非型テンプレートパラメータ以外の場所では、定数値を含め値を書かない。"}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:"同様に、非型テンプレートパラメータを算出する以外の目的で"},{type:b,tag:d,props:{},children:[{type:a,value:$}]},{type:a,value:"な処理を利用しない。"}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:"実行時の処理については、上記の制約の対象としない。ただし、実行時にして良い処理は入出力に関するもののみとする。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"もはや型で遊びたいだけであり、何が目的の実装なのかよくわかりませんが(そもそもレギュレーションガバガバですが)、まあよいでしょう。"}]},{type:a,value:c},{type:b,tag:s,props:{id:ab},children:[{type:b,tag:h,props:{href:"#%E6%A4%9C%E8%A8%BC%E7%92%B0%E5%A2%83",ariaHidden:k,tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:a,value:ab}]},{type:a,value:c},{type:b,tag:aa,props:{},children:[{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:"clang version 12.0.0"}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:"x86_64-pc-linux-gnu"}]},{type:a,value:c},{type:b,tag:u,props:{},children:[{type:a,value:"std=c++2a"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:s,props:{id:ac},children:[{type:b,tag:h,props:{href:"#%E6%B3%A8%E6%84%8F%E7%82%B9",ariaHidden:k,tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:a,value:ac}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"本記事の実装では、fold expression の展開数制限および template の再帰深度上限を回避するような実装は行っていません。ですので、N を大きくしていくと意外とすぐ死にます。"}]},{type:a,value:c},{type:b,tag:s,props:{id:ad},children:[{type:b,tag:h,props:{href:"#%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E5%9E%8B%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B",ariaHidden:k,tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:a,value:ad}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"先駆者様に倣って、0 or 1 の保持にも型を利用していこうと思います。ここは複雑ではありませんので、全体のコードをいきなり提示します。"}]},{type:a,value:c},{type:b,tag:f,props:{className:[i]},children:[{type:b,tag:f,props:{className:[j]},children:[{type:a,value:I}]},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{className:[p]},children:[{type:a,value:"#pragma once\n#include \u003Ctype_traits\u003E\n\nnamespace Binary {\n    struct Binary {};\n    struct I : public Binary {};\n    struct O : public Binary  {};\n\n    template \u003Ctypename T\u003E\n    concept IsBinary = std::is_base_of_v\u003CBinary, T\u003E;\n\n    template \u003Ctypename T\u003E\n    concept IsZero = std::is_same_v\u003CT, O\u003E && IsBinary\u003CT\u003E;\n\n    template \u003Ctypename T\u003E\n    concept IsOne = std::is_same_v\u003CT, I\u003E && IsBinary\u003CT\u003E;\n}\n"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"マーカーの役割を果たす"},{type:b,tag:d,props:{},children:[{type:a,value:"Binary"}]},{type:a,value:"型と、それを継承した"},{type:b,tag:d,props:{},children:[{type:a,value:J}]},{type:a,value:E},{type:b,tag:d,props:{},children:[{type:a,value:K}]},{type:a,value:"のバイナリ型を定義しました。今回はドントケアを含む回路は想定しませんので、回路で現れる値(型だけど)が 0 と 1 以外の値を取ることはありません。ですので、渡されてきた型がバイナリであるか、つまり"},{type:b,tag:d,props:{},children:[{type:a,value:J}]},{type:a,value:E},{type:b,tag:d,props:{},children:[{type:a,value:K}]},{type:a,value:"のどちらかであるかを判断するコンセプトを定義しています。また、対象の型が"},{type:b,tag:d,props:{},children:[{type:a,value:J}]},{type:a,value:"であるか、"},{type:b,tag:d,props:{},children:[{type:a,value:K}]},{type:a,value:"であるかを判断するための"},{type:b,tag:d,props:{},children:[{type:a,value:"IsZero"}]},{type:a,value:E},{type:b,tag:d,props:{},children:[{type:a,value:"IsOne"}]},{type:a,value:"のコンセプトも用意しました。"}]},{type:a,value:c},{type:b,tag:v,props:{id:y},children:[{type:b,tag:h,props:{href:"#%E6%9C%80%E4%BD%8E%E9%99%90%E3%81%AE%E5%87%BA%E5%8A%9B%E5%87%A6%E7%90%86%E3%82%92%E7%94%A8%E6%84%8F%E3%81%97%E3%81%A6%E3%81%8A%E3%81%8F",ariaHidden:k,tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:a,value:y}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"この後論理ゲートを実装していきますが、結果が確認できないと困ります。予め最低限の出力処理を用意しておくことにします。レギュレーションより、ここでは自由な値の利用が許可されます。"}]},{type:a,value:c},{type:b,tag:f,props:{className:[i]},children:[{type:b,tag:f,props:{className:[j]},children:[{type:a,value:"最低限の出力処理"}]},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{className:[p]},children:[{type:a,value:"using Binary::O;\nusing Binary::I;\n\ntemplate \u003CBinary::IsBinary T\u003E\nstruct bitToChar {};\n\ntemplate \u003CBinary::IsZero T\u003E\nstruct bitToChar\u003CT\u003E { inline static constexpr const char v = '0'; };\n\ntemplate \u003CBinary::IsOne T\u003E\nstruct bitToChar\u003CT\u003E { inline static constexpr const char v = '1'; };\n\ntemplate \u003CBinary::IsBinary T\u003E\nconstexpr const char bitToCharV = bitToChar\u003CT\u003E::v;\n\ntemplate \u003Ctemplate \u003Ctypename, typename\u003E typename Gate\u003E\nstatic void printTruthTable() {\n    fmt::print(\"0 0 | {}\\n\", bitToCharV\u003CGate\u003CO, O\u003E\u003E);\n    fmt::print(\"0 1 | {}\\n\", bitToCharV\u003CGate\u003CO, I\u003E\u003E);\n    fmt::print(\"1 0 | {}\\n\", bitToCharV\u003CGate\u003CI, O\u003E\u003E);\n    fmt::print(\"1 1 | {}\\n\", bitToCharV\u003CGate\u003CI, I\u003E\u003E);\n}"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"このコードは、2 入力 1 出力のゲート型を受け取って、その真理値表を出力するものです。基本論理ゲートの動作確認にはこれを使っていきます。"}]},{type:a,value:c},{type:b,tag:s,props:{id:ae},children:[{type:b,tag:h,props:{href:"#%E5%9F%BA%E6%9C%AC%E8%AB%96%E7%90%86%E3%82%B2%E3%83%BC%E3%83%88%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B",ariaHidden:k,tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:a,value:ae}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"前述の記事では、基本論理ゲートの出力をテーブル化して参照するようにしていました。しかし、"},{type:b,tag:"strong",props:{},children:[{type:a,value:"NAND 論理の完全性"}]},{type:a,value:"を利用すれば NAND 以外のゲートをテーブル化する必要はありませんので、本記事ではテーブル化するゲートは NAND のみとし、その他のゲートは NAND 型を組み合わせた型として実装していきます。"}]},{type:a,value:c},{type:b,tag:v,props:{id:P},children:[{type:b,tag:h,props:{href:"#nand-%E3%82%B2%E3%83%BC%E3%83%88%E5%9E%8B",ariaHidden:k,tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:a,value:Q}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"NAND ゲートの実装は以下のようなものにしました。"}]},{type:a,value:c},{type:b,tag:f,props:{className:[i]},children:[{type:b,tag:f,props:{className:[j]},children:[{type:a,value:"basic_gates.h(NAND部)"}]},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{className:[p]},children:[{type:a,value:"    template \u003CBinary::IsBinary A, Binary::IsBinary B\u003E\n    struct NAND  {};\n    template \u003CBinary::IsZero A, Binary::IsZero B\u003E\n    struct NAND\u003CA, B\u003E  { using X = Binary::One; };\n    template \u003CBinary::IsZero A, Binary::IsOne B\u003E\n    struct NAND\u003CA, B\u003E  { using X = Binary::One; };\n    template \u003CBinary::IsOne A, Binary::IsZero B\u003E\n    struct NAND\u003CA, B\u003E  { using X = Binary::One; };\n    template \u003CBinary::IsOne A, Binary::IsOne B\u003E\n    struct NAND\u003CA, B\u003E  { using X = Binary::Zero; };\n    template \u003CBinary::IsBinary A, Binary::IsBinary B\u003E\n    using NANDv = typename NAND\u003CA, B\u003E::X"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"C++20 のコンセプト万々歳です。とても楽にテンプレートパラメータに基づいたオーバーロードを書くことが出来ます。これで、NAND 型のテンプレートパラメータとして渡された 2 つのバイナリ型の組み合わせによって、NAND 型がその内部に NAND ゲートの出力であるバイナリ型の型エイリアス"},{type:b,tag:d,props:{},children:[{type:a,value:"X"}]},{type:a,value:"を持つようになります。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"動作しているかどうか、先程用意した出力処理を利用して検証してみます。"}]},{type:a,value:c},{type:b,tag:f,props:{className:[i]},children:[{type:b,tag:f,props:{className:[j]},children:[{type:a,value:"NAND出力テスト"}]},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{className:[p]},children:[{type:a,value:"int main()\n{\n    printTruthTable\u003CGates::NANDv\u003E();\n}"}]}]}]},{type:a,value:c},{type:b,tag:f,props:{className:[i]},children:[{type:b,tag:f,props:{className:[j]},children:[{type:a,value:"出力"}]},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{className:["language-shell"]},children:[{type:a,value:"0 0 | 1\n0 1 | 1\n1 0 | 1\n1 1 | 0"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"どうやらしっかり動作しているようです！"}]},{type:a,value:c},{type:b,tag:v,props:{id:z},children:[{type:b,tag:h,props:{href:"#%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE%E3%82%B2%E3%83%BC%E3%83%88%E3%81%AE%E5%9E%8B%E3%82%92%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B",ariaHidden:k,tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:a,value:z}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"先述したとおり、あらゆる論理ゲートは NAND ゲートを用いて表現することが出来ます。つまりは、NAND 型を組み合わせるだけで他のゲートの型は用意できるわけです。一気にやってしまいましょう。"}]},{type:a,value:c},{type:b,tag:f,props:{className:[i]},children:[{type:b,tag:f,props:{className:[j]},children:[{type:a,value:"basic_gates.h(その他のゲート達)"}]},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{className:[p]},children:[{type:a,value:"    template \u003CBinary::IsBinary A\u003E\n    using NOT = NAND\u003CA, A\u003E;\n    template \u003CBinary::IsBinary A\u003E\n    using NOTv = typename NOT\u003CA\u003E::X;\n\n    template \u003CBinary::IsBinary A, Binary::IsBinary B\u003E\n    using AND = NOT\u003CNANDv\u003CA, B\u003E\u003E;\n    template \u003CBinary::IsBinary A, Binary::IsBinary B\u003E\n    using ANDv = typename AND\u003CA, B\u003E::X;\n\n    template \u003CBinary::IsBinary A, Binary::IsBinary B\u003E\n    using OR = NAND\u003CNOTv\u003CA\u003E, NOTv\u003CB\u003E\u003E;\n    template \u003CBinary::IsBinary A, Binary::IsBinary B\u003E\n    using ORv = typename OR\u003CA, B\u003E::X;\n\n    template \u003CBinary::IsBinary A, Binary::IsBinary B\u003E\n    using NOR = NOT\u003CORv\u003CA, B\u003E\u003E;\n    template \u003CBinary::IsBinary A, Binary::IsBinary B\u003E\n    using NORv = typename NOR\u003CA, B\u003E::X;\n\n    template \u003CBinary::IsBinary A, Binary::IsBinary B\u003E\n    using XOR = NAND\u003CNANDv\u003CA, NANDv\u003CA, B\u003E\u003E, NANDv\u003CNANDv\u003CA, B\u003E, B\u003E\u003E;\n    template \u003CBinary::IsBinary A, Binary::IsBinary B\u003E\n    using XORv = typename XOR\u003CA, B\u003E::X"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:d,props:{},children:[{type:a,value:"NOT"}]},{type:a,value:F},{type:b,tag:d,props:{},children:[{type:a,value:"AND"}]},{type:a,value:F},{type:b,tag:d,props:{},children:[{type:a,value:"OR"}]},{type:a,value:F},{type:b,tag:d,props:{},children:[{type:a,value:"NOR"}]},{type:a,value:F},{type:b,tag:d,props:{},children:[{type:a,value:af}]},{type:a,value:"の型を定義しました。すべてエイリアステンプレートのみによって実現することが出来ました。"},{type:b,tag:d,props:{},children:[{type:a,value:"NAND"}]},{type:a,value:"に感謝です。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"一応、出力を確認しておきましょう。"}]},{type:a,value:c},{type:b,tag:f,props:{className:[i]},children:[{type:b,tag:f,props:{className:[j]},children:[{type:a,value:L}]},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{className:[p]},children:[{type:a,value:"int main()\n{\n    printTruthTable\u003CGates::ANDv\u003E(\"NAND\");\n    printTruthTable\u003CGates::ORv\u003E(\"OR\");\n    printTruthTable\u003CGates::NORv\u003E(\"NOR\");\n    printTruthTable\u003CGates::XORv\u003E(\"XOR\");\n}"}]}]}]},{type:a,value:c},{type:b,tag:f,props:{className:[w]},children:[{type:b,tag:g,props:{className:[q]},children:[{type:b,tag:d,props:{className:[q]},children:[{type:a,value:"[NAND]\n0 0 | 0\n0 1 | 0\n1 0 | 0\n1 1 | 1\n[OR]\n0 0 | 0\n0 1 | 1\n1 0 | 1\n1 1 | 1\n[NOR]\n0 0 | 1\n0 1 | 0\n1 0 | 0\n1 1 | 0\n[XOR]\n0 0 | 0\n0 1 | 1\n1 0 | 1\n1 1 | 0"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"完璧です。きちんと型のみで論理ゲートが実装できています。"}]},{type:a,value:c},{type:b,tag:M,props:{id:A},children:[{type:b,tag:h,props:{href:"#%E5%9F%BA%E6%9C%AC%E8%AB%96%E7%90%86%E3%82%B2%E3%83%BC%E3%83%88%E3%81%AE%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89",ariaHidden:k,tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:a,value:A}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"基本論理ゲートの実装全体を以下に示しておきます。"}]},{type:a,value:c},{type:b,tag:f,props:{className:[i]},children:[{type:b,tag:f,props:{className:[j]},children:[{type:a,value:"basic_gates.h"}]},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{className:[p]},children:[{type:a,value:"#pragma once\n\n#include \"binary.h\"\n\nnamespace Gates {\n    template \u003CBinary::IsBinary A, Binary::IsBinary B\u003E\n    struct NAND  {};\n    template \u003CBinary::IsZero A, Binary::IsZero B\u003E\n    struct NAND\u003CA, B\u003E  { using X = Binary::I; };\n    template \u003CBinary::IsZero A, Binary::IsOne B\u003E\n    struct NAND\u003CA, B\u003E  { using X = Binary::I; };\n    template \u003CBinary::IsOne A, Binary::IsZero B\u003E\n    struct NAND\u003CA, B\u003E  { using X = Binary::I; };\n    template \u003CBinary::IsOne A, Binary::IsOne B\u003E\n    struct NAND\u003CA, B\u003E  { using X = Binary::O; };\n    template \u003CBinary::IsBinary A, Binary::IsBinary B\u003E\n    using NANDv = typename NAND\u003CA, B\u003E::X;\n\n    template \u003CBinary::IsBinary A\u003E\n    using NOT = NAND\u003CA, A\u003E;\n    template \u003CBinary::IsBinary A\u003E\n    using NOTv = typename NOT\u003CA\u003E::X;\n\n    template \u003CBinary::IsBinary A, Binary::IsBinary B\u003E\n    using AND = NOT\u003CNANDv\u003CA, B\u003E\u003E;\n    template \u003CBinary::IsBinary A, Binary::IsBinary B\u003E\n    using ANDv = typename AND\u003CA, B\u003E::X;\n\n    template \u003CBinary::IsBinary A, Binary::IsBinary B\u003E\n    using OR = NAND\u003CNOTv\u003CA\u003E, NOTv\u003CB\u003E\u003E;\n    template \u003CBinary::IsBinary A, Binary::IsBinary B\u003E\n    using ORv = typename OR\u003CA, B\u003E::X;\n\n    template \u003CBinary::IsBinary A, Binary::IsBinary B\u003E\n    using NOR = NOT\u003CORv\u003CA, B\u003E\u003E;\n    template \u003CBinary::IsBinary A, Binary::IsBinary B\u003E\n    using NORv = typename NOR\u003CA, B\u003E::X;\n\n    template \u003CBinary::IsBinary A, Binary::IsBinary B\u003E\n    using XOR = NAND\u003CNANDv\u003CA, NANDv\u003CA, B\u003E\u003E, NANDv\u003CNANDv\u003CA, B\u003E, B\u003E\u003E;\n    template \u003CBinary::IsBinary A, Binary::IsBinary B\u003E\n    using XORv = typename XOR\u003CA, B\u003E::X;\n}"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"ここまでくれば加算器なんて簡単です。"}]},{type:a,value:c},{type:b,tag:s,props:{id:ag},children:[{type:b,tag:h,props:{href:"#%E5%8A%A0%E7%AE%97%E5%99%A8",ariaHidden:k,tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:a,value:ag}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"型で加算器を実装していきます。"}]},{type:a,value:c},{type:b,tag:v,props:{id:B},children:[{type:b,tag:h,props:{href:"#%E5%8D%8A%E5%8A%A0%E7%AE%97%E5%99%A8",ariaHidden:k,tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:a,value:B}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"全加算器を作るためには、まず半加算器からです。\n"},{type:b,tag:G,props:{alt:N,src:"\u002Farticle-assets\u002Fcpp\u002Fwrite-an-nbit-adder-using-only-types\u002F\u002Fhalf-adder.png"},children:[]},{type:a,value:"\n半加算器は出力が複数あるため、これまでのように基本論理ゲートのエイリアステンプレートで定義することは出来ません。構造体を使って独自の型として実現していきましょう。"}]},{type:a,value:c},{type:b,tag:f,props:{className:[i]},children:[{type:b,tag:f,props:{className:[j]},children:[{type:a,value:"basic_adders.h(HalfAdder部)"}]},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{className:[p]},children:[{type:a,value:"    template \u003CBinary::IsBinary A, Binary::IsBinary B\u003E\n    struct HalfAdder {\n        using X = Gates::XORv\u003CA, B\u003E;\n        using Y = Gates::ANDv\u003CA, B\u003E;\n    };"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"以上です。なんと容易いのでしょうか。"},{type:b,tag:d,props:{},children:[{type:a,value:af}]},{type:a,value:"が既に存在するおかげで、半加算器はたったこれだけのコードで実現できました。動作を確認します。出力が増えたため、新たな出力関数を定義しています。"}]},{type:a,value:c},{type:b,tag:f,props:{className:[i]},children:[{type:b,tag:f,props:{className:[j]},children:[{type:a,value:L}]},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{className:[p]},children:[{type:a,value:"template \u003Ctemplate \u003Ctypename, typename\u003E typename Gate\u003E\nstatic void printTruthTable2_2(const std::string& title) {\n    fmt::print(\"[{}]\\n\", title);\n    fmt::print(\"A B | Y X\\n\", title);\n    fmt::print(\"0 0 | {} {}\\n\", bitToCharV\u003Ctypename Gate\u003CO, O\u003E::Y\u003E, bitToCharV\u003Ctypename Gate\u003CO, O\u003E::X\u003E);\n    fmt::print(\"0 1 | {} {}\\n\", bitToCharV\u003Ctypename Gate\u003CO, I\u003E::Y\u003E, bitToCharV\u003Ctypename Gate\u003CO, I\u003E::X\u003E);\n    fmt::print(\"1 0 | {} {}\\n\", bitToCharV\u003Ctypename Gate\u003CI, O\u003E::Y\u003E, bitToCharV\u003Ctypename Gate\u003CI, O\u003E::X\u003E);\n    fmt::print(\"1 1 | {} {}\\n\", bitToCharV\u003Ctypename Gate\u003CI, I\u003E::Y\u003E, bitToCharV\u003Ctypename Gate\u003CI, I\u003E::X\u003E);\n}\n\nint main()\n{\n    printTruthTable2_2\u003CCircuits::HalfAdder\u003E(\"HalfAdder\");\n}"}]}]}]},{type:a,value:c},{type:b,tag:f,props:{className:[w]},children:[{type:b,tag:g,props:{className:[q]},children:[{type:b,tag:d,props:{className:[q]},children:[{type:a,value:"[HalfAdder]\nA B | Y X\n0 0 | 0 0\n0 1 | 0 1\n1 0 | 0 1\n1 1 | 1 0"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"きちんと加算できていますし、桁上りの出力も正常です。半加算器型が実現できています。"}]},{type:a,value:c},{type:b,tag:v,props:{id:C},children:[{type:b,tag:h,props:{href:"#%E5%85%A8%E5%8A%A0%E7%AE%97%E5%99%A8",ariaHidden:k,tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:a,value:C}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:G,props:{alt:N,src:"\u002Farticle-assets\u002Fcpp\u002Fwrite-an-nbit-adder-using-only-types\u002F\u002Ffull-adder.png"},children:[]},{type:a,value:"\n半加算器と全く同じです。違いを上げるとすれば、可読性のために構造体内部で型エイリアスを利用しているくらいです。"}]},{type:a,value:c},{type:b,tag:f,props:{className:[i]},children:[{type:b,tag:f,props:{className:[j]},children:[{type:a,value:"basic_adders.h(FullAdder部)"}]},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{className:[p]},children:[{type:a,value:"    template \u003CBinary::IsBinary A, Binary::IsBinary B, Binary::IsBinary C\u003E\n    class FullAdder {\n        using HA1 = HalfAdder\u003CA, B\u003E;\n        using HA2 = HalfAdder\u003Ctypename HA1::X, C\u003E;\n    public:\n        using X = typename HA2::X;\n        using Y = Gates::ORv\u003Ctypename HA1::Y, typename HA2::Y\u003E;\n    };"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"早速出力を見てみましょう。今度は入力が増えたので、再び新たな出力関数を定義しています。"}]},{type:a,value:c},{type:b,tag:f,props:{className:[i]},children:[{type:b,tag:f,props:{className:[j]},children:[{type:a,value:L}]},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{className:[p]},children:[{type:a,value:"template \u003Ctemplate \u003Ctypename, typename, typename\u003E typename Gate\u003E\nvoid printTruthTable3_2(const std::string& title)\n{\n    fmt::print(\"[{}]\\n\", title);\n    fmt::print(\"A B C | Y X\\n\"\n               \"0 0 0 | {} {}\\n0 0 1 | {} {}\\n0 1 0 | {} {}\\n0 1 1 | {} {}\\n\"\n               \"1 0 0 | {} {}\\n1 0 1 | {} {}\\n1 1 0 | {} {}\\n1 1 1 | {} {}\\n\",\n            bitToCharV\u003Ctypename Gate\u003CO, O, O\u003E::Y\u003E,\n            bitToCharV\u003Ctypename Gate\u003CO, O, O\u003E::X\u003E,\n            bitToCharV\u003Ctypename Gate\u003CO, O, I\u003E::Y\u003E,\n            bitToCharV\u003Ctypename Gate\u003CO, O, I\u003E::X\u003E,\n            bitToCharV\u003Ctypename Gate\u003CO, I, O\u003E::Y\u003E,\n            bitToCharV\u003Ctypename Gate\u003CO, I, O\u003E::X\u003E,\n            bitToCharV\u003Ctypename Gate\u003CO, I, I\u003E::Y\u003E,\n            bitToCharV\u003Ctypename Gate\u003CO, I, I\u003E::X\u003E,\n            bitToCharV\u003Ctypename Gate\u003CI, O, O\u003E::Y\u003E,\n            bitToCharV\u003Ctypename Gate\u003CI, O, O\u003E::X\u003E,\n            bitToCharV\u003Ctypename Gate\u003CI, O, I\u003E::Y\u003E,\n            bitToCharV\u003Ctypename Gate\u003CI, O, I\u003E::X\u003E,\n            bitToCharV\u003Ctypename Gate\u003CI, I, O\u003E::Y\u003E,\n            bitToCharV\u003Ctypename Gate\u003CI, I, O\u003E::X\u003E,\n            bitToCharV\u003Ctypename Gate\u003CI, I, I\u003E::Y\u003E,\n            bitToCharV\u003Ctypename Gate\u003CI, I, I\u003E::X\u003E\n            );\n}\n\nint main()\n{\n    printTruthTable3_2\u003CCircuits::FullAdder\u003E(\"FullAdder\");\n}"}]}]}]},{type:a,value:c},{type:b,tag:f,props:{className:[w]},children:[{type:b,tag:g,props:{className:[q]},children:[{type:b,tag:d,props:{className:[q]},children:[{type:a,value:"[FullAdder]\nA B C | Y X\n0 0 0 | 0 0\n0 0 1 | 0 1\n0 1 0 | 0 1\n0 1 1 | 1 0\n1 0 0 | 0 1\n1 0 1 | 1 0\n1 1 0 | 1 0\n1 1 1 | 1 1"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"はい。完璧です。"}]},{type:a,value:c},{type:b,tag:v,props:{id:R},children:[{type:b,tag:h,props:{href:"#n-bit-%E5%8A%A0%E7%AE%97%E5%99%A8",ariaHidden:k,tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:a,value:S}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:b,tag:G,props:{alt:N,src:"\u002Farticle-assets\u002Fcpp\u002Fwrite-an-nbit-adder-using-only-types\u002F\u002Fnbit-adder.png"},children:[]},{type:a,value:"\nさて、全加算器が出来ましたので、複数 bit の加算がしたくなってきます。4 bit などの固定長としても良いですが、我々が今利用しているのはソフトウェアですので、ビット長くらいパラメトリックにしたいものです。C++には可変長テンプレートという N bit 加算器のための機能がありますので、こちらを利用して実装してみます。"}]},{type:a,value:c},{type:b,tag:M,props:{id:D},children:[{type:b,tag:h,props:{href:"#%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E5%9E%8B%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B9%E3%81%AE%E4%BD%9C%E6%88%90",ariaHidden:k,tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:a,value:D}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"N bit の加算器を作成するにあたっては、その加算対象となる値や得られる結果をバイナリ型のシーケンスとして扱いたくなります。型のシーケンスなんて作れるのかと思うかもしれませんが、それほど難しくありません。以下を"},{type:b,tag:d,props:{},children:[{type:a,value:I}]},{type:a,value:"に追記します。"}]},{type:a,value:c},{type:b,tag:f,props:{className:[i]},children:[{type:b,tag:f,props:{className:[j]},children:[{type:a,value:I}]},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{className:[p]},children:[{type:a,value:"    template \u003Ctypename T\u003E\n    struct IType {\n        using type = T;\n    };\n\n    template \u003CIsBinary... Bs\u003E\n    struct BinarySeq;\n\n    template\u003Ctypename IndexSeq, IsBinary SetType, std::size_t Pos, std::size_t Len, IsBinary... Ts\u003E\n    struct BinarySeqSetHelper;\n\n    template\u003Cstd::size_t... Indexes, IsBinary SetType, std::size_t Pos, std::size_t Len, IsBinary... Ts\u003E\n    struct BinarySeqSetHelper\u003Cstd::index_sequence\u003CIndexes...\u003E, SetType, Pos, Len, Ts...\u003E\n      : IType\u003CBinarySeq\u003C\n            std::tuple_element_t\u003CIndexes == Pos ? Len : Indexes, std::tuple\u003CTs..., SetType\u003E\u003E...\u003E\u003E {\n        static_assert(Pos \u003C Len, \"out of range\");\n    };\n\n    template\u003CIsBinary... Bs\u003E\n    struct BinarySeq : IType\u003CBinarySeq\u003CBs...\u003E\u003E {\n        static constexpr const std::size_t size = sizeof...(Bs);\n\n        template\u003CIsBinary SetType, std::size_t Pos\u003E\n        using Set = typename BinarySeqSetHelper\u003Cstd::make_index_sequence\u003Csizeof...(Bs)\u003E,\n                                 SetType,\n                                 Pos,\n                                 sizeof...(Bs),\n                                 Bs...\u003E::type;\n    };\n\n    template\u003CIsBinary B, std::size_t N, IsBinary... Bs\u003E\n    struct GenBinarySeq {\n        using type = typename GenBinarySeq\u003CB, N - 1, Bs..., B\u003E::type;\n    };\n\n    template\u003CIsBinary B, IsBinary... Bs\u003E\n    struct GenBinarySeq\u003CB, 0, Bs...\u003E {\n        using type = typename IType\u003CBinarySeq\u003CBs...\u003E\u003E::type;\n    };"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"ここでは、"},{type:b,tag:d,props:{},children:[{type:a,value:r}]},{type:a,value:"という可変長テンプレートパラメータに IsBinary を満たすバイナリ型を持つ型を定義しています。"},{type:b,tag:d,props:{},children:[{type:a,value:r}]},{type:a,value:"が持つ型パラメータを型シーケンスと見做すわけです。"},{type:b,tag:d,props:{},children:[{type:a,value:r}]},{type:a,value:"には"},{type:b,tag:d,props:{},children:[{type:a,value:ah}]},{type:a,value:"という型エイリアステンプレートが含まれていますが、この"},{type:b,tag:d,props:{},children:[{type:a,value:ah}]},{type:a,value:"はテンプレートパラメータとしてシーケンス上の位置と書き込みたい型を指定すると、そのように編集した後の型シーケンスを表すようになるという機能を持っています。また、"},{type:b,tag:d,props:{},children:[{type:a,value:"GenBinarySeq"}]},{type:a,value:"という型も定義されています。これは、テンプレートパラメータとして型と長さを指定すると、指定された型と長さを持つ"},{type:b,tag:d,props:{},children:[{type:a,value:r}]},{type:a,value:"を作成してくれます。"}]},{type:a,value:c},{type:b,tag:ai,props:{id:"binaryseqを出力可能にする"},children:[{type:b,tag:h,props:{href:"#binaryseq%E3%82%92%E5%87%BA%E5%8A%9B%E5%8F%AF%E8%83%BD%E3%81%AB%E3%81%99%E3%82%8B",ariaHidden:k,tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:b,tag:d,props:{},children:[{type:a,value:r}]},{type:a,value:"を出力可能にする"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"バイナリ型を任意の長さのシーケンスとして保持できるようになったのは良いですが、これは値ではなく型テンプレートパラメータとして保持されているに過ぎません。これを我々の確認できる形で出力することは、以下のような実装で実現することが出来ます。"}]},{type:a,value:c},{type:b,tag:f,props:{className:[i]},children:[{type:b,tag:f,props:{className:[j]},children:[{type:a,value:"BinarySeqの出力実装"}]},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{className:[p]},children:[{type:a,value:"template \u003Ctypename Bs\u003E\nstruct BinarySeqPrintHelper;\n\ntemplate \u003CBinary::IsBinary... S\u003E\nstruct BinarySeqPrintHelper\u003CBinary::BinarySeq\u003CS...\u003E\u003E {\n    static void print() {\n        (fmt::print(\"{}\", bitToCharV\u003CS\u003E), ...);\n    }\n};"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"テンプレートの部分特殊化を利用して、"},{type:b,tag:d,props:{},children:[{type:a,value:r}]},{type:a,value:"の型パラメータ部分だけを取り出し、c++17 で導入された fold expression で出力しています。"}]},{type:a,value:c},{type:b,tag:ai,props:{id:"binaryseqを使ってみる"},children:[{type:b,tag:h,props:{href:"#binaryseq%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B",ariaHidden:k,tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:b,tag:d,props:{},children:[{type:a,value:r}]},{type:a,value:"を使ってみる"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"言葉で言われてもわかりにくいかと思いますので、実際の"},{type:b,tag:d,props:{},children:[{type:a,value:r}]},{type:a,value:"の動作を示すサンプルを提示します。"}]},{type:a,value:c},{type:b,tag:f,props:{className:[i]},children:[{type:b,tag:f,props:{className:[j]},children:[{type:a,value:"BinarySeqのサンプルコード"}]},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{className:[p]},children:[{type:a,value:"int main()\n{\n    using Seq1 = Binary::BinarySeq\u003CI, I, I, O, O, I, O, I\u003E;\n    fmt::print(\"1: \");\n    BinarySeqPrintHelper\u003CSeq1\u003E::print();\n    fmt::print(\"\\n\");\n\n    using Seq2 = Seq1::Set\u003CI, 4\u003E::Set\u003CO, 1\u003E;\n    fmt::print(\"2: \");\n    BinarySeqPrintHelper\u003CSeq2\u003E::print();\n    fmt::print(\"\\n\");\n\n    using Seq3 = Binary::GenBinarySeq\u003CO, 4\u003E::type;\n    fmt::print(\"3: \");\n    BinarySeqPrintHelper\u003CSeq3\u003E::print();\n    fmt::print(\"\\n\");\n\n    using Seq4 = Binary::GenBinarySeq\u003CI, 5\u003E::type;\n    fmt::print(\"4: \");\n    BinarySeqPrintHelper\u003CSeq4\u003E::print();\n    fmt::print(\"\\n\");\n\n    using Seq5 = Seq3::Set\u003CI, 2\u003E;\n    fmt::print(\"5: \");\n    BinarySeqPrintHelper\u003CSeq5\u003E::print();\n    fmt::print(\"\\n\");\n}"}]}]}]},{type:a,value:c},{type:b,tag:f,props:{className:[w]},children:[{type:b,tag:g,props:{className:[q]},children:[{type:b,tag:d,props:{className:[q]},children:[{type:a,value:"1: 11100101\n2: 10101101\n3: 0000\n4: 11111\n5: 0010"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"完全に型テンプレートパラメータが「任意長で扱えて」、「要素の編集も可能」なリストと化しています。きっとそういう機能なんだと思います(？)。"}]},{type:a,value:c},{type:b,tag:M,props:{id:T},children:[{type:b,tag:h,props:{href:"#n-bit-%E5%8A%A0%E7%AE%97%E5%99%A8%E6%9C%AC%E4%BD%93",ariaHidden:k,tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:a,value:U}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"ここまでで、すべての準備は整いました。あとはこれらを利用して N bit 加算器を実装するだけです。もったいぶっても仕方ないので(小出しにして詳細に説明するのが面倒なので)実装を貼ります。"}]},{type:a,value:c},{type:b,tag:f,props:{className:[i]},children:[{type:b,tag:f,props:{className:[j]},children:[{type:a,value:"n_bit_adder.h"}]},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{className:[p]},children:[{type:a,value:"#pragma once\n\n#include \u003Ctuple\u003E\n#include \"basic_adders.h\"\n\nnamespace Circuits {\n    template \u003Cstd::size_t Len, typename BS1, typename BS2, typename BS3, Binary::IsBinary Ci\u003E\n    struct NbitAdderHelper;\n\n    template \u003CBinary::IsBinary... S1, Binary::IsBinary... S2, Binary::IsBinary... S3, Binary::IsBinary Ci\u003E\n    struct NbitAdderHelper\u003Csizeof...(S1), Binary::BinarySeq\u003CS1...\u003E, Binary::BinarySeq\u003CS2...\u003E, Binary::BinarySeq\u003CS3...\u003E, Ci\u003E {\n        static_assert(sizeof...(S1) == sizeof...(S2) && sizeof...(S1) == sizeof...(S3), \"Bit length not matched.\");\n        static constexpr const std::size_t N = sizeof...(S1);\n        using A = std::tuple_element_t\u003CN-1, std::tuple\u003CS1...\u003E\u003E;\n        using B = std::tuple_element_t\u003CN-1, std::tuple\u003CS2...\u003E\u003E;\n        using HAdder = Circuits::HalfAdder\u003CA, B\u003E;\n\n        using Ss = typename NbitAdderHelper\u003CN-1, Binary::BinarySeq\u003CS1...\u003E, Binary::BinarySeq\u003CS2...\u003E, typename Binary::BinarySeq\u003CS3...\u003E::template Set\u003Ctypename HAdder::X, N-1\u003E, typename HAdder::Y\u003E::Ss;\n    };\n\n    template \u003Cstd::size_t N, Binary::IsBinary... S1, Binary::IsBinary... S2, Binary::IsBinary... S3, Binary::IsBinary Ci\u003E\n    struct NbitAdderHelper\u003CN, Binary::BinarySeq\u003CS1...\u003E, Binary::BinarySeq\u003CS2...\u003E, Binary::BinarySeq\u003CS3...\u003E, Ci\u003E {\n        static_assert(sizeof...(S1) == sizeof...(S2) && sizeof...(S1) == sizeof...(S3), \"Bit length not matched.\");\n        using A = std::tuple_element_t\u003CN-1, std::tuple\u003CS1...\u003E\u003E;\n        using B = std::tuple_element_t\u003CN-1, std::tuple\u003CS2...\u003E\u003E;\n        using FAdder = Circuits::FullAdder\u003CA, B, Ci\u003E;\n\n        using Ss = typename NbitAdderHelper\u003CN-1, Binary::BinarySeq\u003CS1...\u003E, Binary::BinarySeq\u003CS2...\u003E, typename Binary::BinarySeq\u003CS3...\u003E::template Set\u003Ctypename FAdder::X, N-1\u003E, typename FAdder::Y\u003E::Ss;\n    };\n\n    template \u003CBinary::IsBinary... S1, Binary::IsBinary... S2, Binary::IsBinary... S3, Binary::IsBinary Ci\u003E\n    struct NbitAdderHelper\u003C0, Binary::BinarySeq\u003CS1...\u003E, Binary::BinarySeq\u003CS2...\u003E, Binary::BinarySeq\u003CS3...\u003E, Ci\u003E {\n        static_assert(sizeof...(S1) == sizeof...(S2) && sizeof...(S1) == sizeof...(S3), \"Bit length not matched.\");\n        using Ss = Binary::BinarySeq\u003CCi, S3...\u003E;\n    };\n\n    template \u003Ctypename BS1, typename BS2\u003E\n    using NbitAdder = NbitAdderHelper\u003CBS1::size, BS1, BS2, typename Binary::GenBinarySeq\u003CBinary::O, BS1::size\u003E::type, Binary::O\u003E;\n}"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"いや～ C++は良い言語ですね！！！！\nこのコードでやっているのは、先に示した回路図の安直な再現です。「一番はじめの半加算器」「2 番目～から[ビット長-1]番目の全加算器」「終了処理」の 3 つに特殊化されるように実装を切り分け、再帰的に演算結果を伝達させていっています。テンプレートパラメータの名前で説明するのならば、「"},{type:b,tag:d,props:{},children:[{type:a,value:"std::size_t N"}]},{type:a,value:"がその時に対象としている半加算器\u002F全加算器の通番」「"},{type:b,tag:d,props:{},children:[{type:a,value:"typename BS1"}]},{type:a,value:E},{type:b,tag:d,props:{},children:[{type:a,value:"typename BS2"}]},{type:a,value:"は加算に使われる 2 つのバイナリ型シーケンス」「"},{type:b,tag:d,props:{},children:[{type:a,value:"typename BS3"}]},{type:a,value:"は演算結果を保持しているバイナリ型シーケンス」「"},{type:b,tag:d,props:{},children:[{type:a,value:"Binary::IsBinary Ci"}]},{type:a,value:"は下位の加算器からの桁上り入力」です。結果として、演算対象とするシーケンスを受け取った"},{type:b,tag:d,props:{},children:[{type:a,value:"NbitAdderHelper"}]},{type:a,value:"型は「先頭に最後の桁上り、2 番めから終端までが演算結果」となるバイナリ型シーケンスを示す型"},{type:b,tag:d,props:{},children:[{type:a,value:"Ss"}]},{type:a,value:"を内部に持つようになります。読みにくさはピカイチですが、やっていることはそんなに複雑ではありません。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"この実装では与えられる"},{type:b,tag:d,props:{},children:[{type:a,value:r}]},{type:a,value:"の長さが同一でなければ静的アサートでコンパイルエラーとなるようにしています。しかし、今回の処理は加算であるため、単純な 0 埋めの(メタ)実装を追加することで異なる長さの"},{type:b,tag:d,props:{},children:[{type:a,value:r}]},{type:a,value:"も加算可能になります(あれ、でもそれって加算回路的にどうなの)。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"ここで例によって、結果を見える形にするための出力処理を実装しておきます。"}]},{type:a,value:c},{type:b,tag:f,props:{className:[i]},children:[{type:b,tag:f,props:{className:[j]},children:[{type:a,value:"NbitAdderprintHelper"}]},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{className:[p]},children:[{type:a,value:"template \u003Ctypename Bs\u003E\nstruct NbitAdderPrintHelper;\n\ntemplate \u003CBinary::IsBinary... S1, Binary::IsBinary... S2\u003E\nstruct NbitAdderPrintHelper\u003CCircuits::NbitAdder\u003CBinary::BinarySeq\u003CS1...\u003E, Binary::BinarySeq\u003CS2...\u003E\u003E\u003E {\n    static void print_result() {\n        (fmt::print(\"{}\", bitToCharV\u003CS1\u003E), ...);\n        fmt::print(\" + \");\n        (fmt::print(\"{}\", bitToCharV\u003CS2\u003E), ...);\n\n        using Adder = Circuits::NbitAdder\u003CBinary::BinarySeq\u003CS1...\u003E, Binary::BinarySeq\u003CS2...\u003E\u003E;\n        fmt::print(\" = \");\n        BinarySeqPrintHelper\u003Ctypename Adder::Ss\u003E::print();\n        fmt::print(\"\\n\");\n    }\n};"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"特筆すべきところは特にありませんね。では結果を確認していきましょう！"}]},{type:a,value:c},{type:b,tag:f,props:{className:[i]},children:[{type:b,tag:f,props:{className:[j]},children:[{type:a,value:"Nbit加算器動作確認"}]},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{className:[p]},children:[{type:a,value:"int main()\n{\n    using ASeq = Binary::BinarySeq\u003CI, I, I, O, O, I, O, I, O, O, I, I, O, I, I, O\u003E;\n    using BSeq = Binary::BinarySeq\u003CI, I, O, I, O, O, I, I, O, I, O, O, O, O, I, I\u003E;\n    NbitAdderPrintHelper\u003CCircuits::NbitAdder\u003CASeq, BSeq\u003E\u003E::print_result();\n}"}]}]}]},{type:a,value:c},{type:b,tag:f,props:{className:[w]},children:[{type:b,tag:g,props:{className:[q]},children:[{type:b,tag:d,props:{className:[q]},children:[{type:a,value:"1110010100110110 + 1101001101000011 = 11011100001111001"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"この結果が正しいのか、Windows の電卓くんに計算してもらいました。\n"},{type:b,tag:G,props:{alt:"出力検証結果",src:"\u002Farticle-assets\u002Fcpp\u002Fwrite-an-nbit-adder-using-only-types\u002F\u002Fresult.png"},children:[]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"やった！完璧ですね！！C++の型システム上で N bit の加算器を動作させることに成功しました！！"}]},{type:a,value:c},{type:b,tag:s,props:{id:aj},children:[{type:b,tag:h,props:{href:"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB",ariaHidden:k,tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:a,value:aj}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"ここまで記事を読んでくださった方に朗報があります。C++には**+演算子**と呼ばれる演算子が存在しており、以下のように記述することで加算を行うことが出来ます。"}]},{type:a,value:c},{type:b,tag:f,props:{className:[i]},children:[{type:b,tag:f,props:{className:[j]},children:[{type:a,value:"add"}]},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{className:[p]},children:[{type:a,value:"1 + 2 \u002F\u002F → 3"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"また、このようにコンパイル時に値が確定するリテラルとして表記された値は、コンパイラの最適化によってコンパイル時に演算結果の値へと置き換えられることが殆どであり、実行時コストを考える必要もありません。2 進数以外読めないという方も安心してください。C++14 からの C++は 2 進数リテラルを持っています。"}]},{type:a,value:c},{type:b,tag:f,props:{className:[i]},children:[{type:b,tag:f,props:{className:[j]},children:[{type:a,value:"bin_add"}]},{type:b,tag:g,props:{},children:[{type:b,tag:d,props:{className:[p]},children:[{type:a,value:"0b1 + 0b10 \u002F\u002F → 0b11 (3)"}]}]}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"よって、C++の型システムで加算器を実装する必要はありません。"}]},{type:a,value:c},{type:b,tag:s,props:{id:ak},children:[{type:b,tag:h,props:{href:"#%E8%BF%BD%E8%A8%98",ariaHidden:k,tabIndex:l},children:[{type:b,tag:m,props:{className:[n,o]},children:[]}]},{type:a,value:ak}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"本記事で利用したソースコードを GitHub にあげておきました。\n"},{type:b,tag:h,props:{href:al,rel:[W,X,Y],target:Z},children:[{type:a,value:al}]}]}]},dir:"\u002Farticles\u002Fcpp",path:am,extension:".md",createdAt:an,updatedAt:an,gitCreatedAt:"2021-11-25T17:55:07.000Z",gitUpdatedAt:"2022-01-29T00:45:39.000Z"},path:am},"data-v-08b63208:0":{prevTitle:x,nextTitle:x,existPrev:ao,existNext:ao,prevSlug:x,nextSlug:x,seriesPage:x}},mutations:void 0}}("text","element","\n","code","p","div","pre","a","code-extra","filename","true",-1,"span","icon","icon-link","language-cpp","language-unknown","BinarySeq","h1",2,"li","h2","remark-highlight","","最低限の出力処理を用意しておく","その他のゲートの型を用意する","基本論理ゲートのソースコード","半加算器","全加算器","バイナリ型シーケンスの作成","と","\u002F","img",3,"binary.h","O","I","出力テスト","h3","image.png","2021\u002F6\u002F17","nand-ゲート型","NAND ゲート型","n-bit-加算器","N bit 加算器","n-bit-加算器本体","N bit 加算器本体","https:\u002F\u002Fqiita.com\u002FKuniwak\u002Fitems\u002F983ba68fcf68d915b07d","nofollow","noopener","noreferrer","_blank","レギュレーション","constexpr","ul","検証環境","注意点","バイナリ型を定義する","基本論理ゲートを実装する","XOR","加算器","Set","h4","おわりに","追記","https:\u002F\u002Fgithub.com\u002Fstrvworks\u002Flogical_cpp\u002Ftree\u002Fmaster","\u002Farticles\u002Fcpp\u002Fwrite-an-nbit-adder-using-only-types","2021-06-17T00:00:00.000Z",false)));